# License Tree

This module defines a class used to convert SPDX license expressions into
a binary expression tree, and vice versa.

For example, for the expression A AND B AND (C OR D), the tree should look like:
   AND
  /  \
 A   AND
    /   \
   B    OR
       /  \
      C    D

## API
class LicNode
    Defines a single node in the license expression tree. The tree below this
    node can be converted to a string by str(LicNode), or simply passed in to print().

create_exp_tree(expression=None, ignore_list=[])
    This function takes the string form of an SPDX expression, and converts it
    to the tree format. Ignores any licenses listed in ignore list.

render_exp_tree(exp_tree=None, string="")
    Converts a tree format back to SPDX compliant string form.

## Motivation
Photon must have SPDX compliant license expressions. This means we both cannot have
unrecognized IDs (ones that are not in the SPDX database), and we cannot have
standalone exceptions (exceptions must be conjoined to a real license by the "WITH"
operator). We can deal with the majority of this by removing all unofficial licenses from
the scancode database. But, this still falls slightly short, as we cannot remove
"LicenseRef-unknown-spdx" and scancode has a nasty habit of (rarely) reporting standalone
license exceptions.

There is a dearth of Python libraries which allow us to manipulate license expressions.
The main "license_expression" library, which we use, can read/write/validate expressions,
but it doesn't allow any manipulation. The same problem is present with other boolean
algebra libraries.

The "license_expression" API also doesn't like to parse invalid expressions into machine
form. For example, "A AND" would fail parsing:
```license_expression.ExpressionError: AND requires two or more licenses as in: MIT AND BSD```

So, the last resort is to implement a logical representation of license expressions that
is easily manipulatable. And as a bonus, we can make it more robust so it can tolerate holes,
or other situations which may crash "license_expression"

### Flattening
Another advantage of the tree API is that we can flatten the license expressions which scancode
gives us. For example, this is a real license which scancode returns for a specific file in the linux
kernel:
```(GPL-2.0-only WITH Linux-syscall-note AND MIT) AND (GPL-1.0-or-later AND LGPL-2.1-or-later)```

Since these are all ANDs, this is unnecessarily convoluted and should be flattened to:
```GPL-2.0-only WITH Linux-syscall-note AND MIT AND GPL-1.0-or-later AND LGPL-2.1-or-later```

## Development / Testing
Test cases are located in "exp_tree_tests.yaml". When messing with the code, please run the tests
with `python test_license_tree.py`, and also add more test cases if applicable.
