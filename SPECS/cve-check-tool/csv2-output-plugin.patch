From 434866f89119793259f3ec818cc5e30fadcf2258 Mon Sep 17 00:00:00 2001
From: Alexey Makhalov <amakhalov@vmware.com>
Date: Wed, 31 Aug 2016 07:31:27 +0000
Subject: [PATCH] Added alternative csv output.

---
 src/main.c                          |  8 +++-
 src/plugins/Makefile.am             |  1 +
 src/plugins/output/csv2/Makefile.am | 16 +++++++
 src/plugins/output/csv2/csv2.c      | 96 +++++++++++++++++++++++++++++++++++++
 4 files changed, 119 insertions(+), 2 deletions(-)
 create mode 100644 src/plugins/output/csv2/Makefile.am
 create mode 100644 src/plugins/output/csv2/csv2.c

diff --git a/src/main.c b/src/main.c
index 8593c17..c0394f3 100644
--- a/src/main.c
+++ b/src/main.c
@@ -285,6 +285,7 @@ static gchar *nvds = NULL;
 static gchar *forced_type = NULL;
 static bool no_html = false;
 static bool csv_mode = false;
+static bool csv2_mode = false;
 static char *modified_stamp = NULL;
 static gchar *mapping_file = NULL;
 static gchar *output_file = NULL;
@@ -301,6 +302,7 @@ static GOptionEntry _entries[] = {
         { "modified", 'm', 0, G_OPTION_ARG_STRING, &modified_stamp, "Ignore reports after modification date", "D" },
         { "srpm-dir", 's', 0, G_OPTION_ARG_STRING, &srpm_dir, "Source RPM directory", "S" },
         { "csv", 'c', 0, G_OPTION_ARG_NONE, &csv_mode, "Output CSV formatted data only", NULL },
+        { "csv2", 'z', 0, G_OPTION_ARG_NONE, &csv2_mode, "Output CSV formatted data only (alternative)", NULL },
         { "mapping", 'M', 0, G_OPTION_ARG_STRING, &mapping_file, "Path to a mapping file", NULL},
         { "output-file", 'o', 0, G_OPTION_ARG_STRING, &output_file, "Path to the output file (output plugin specific)", NULL},
         { "use-fractional-compare", 'f', 0, G_OPTION_ARG_NONE, &use_frac_compare, "CVE version string fractional compare", NULL },
@@ -501,11 +503,11 @@ int main(int argc, char **argv)
                 goto cleanup_no_lock;
         }
 
-        quiet = csv_mode || !no_html;
+        quiet = csv_mode || csv2_mode || !no_html;
         self->output_file = output_file;
         self->cacert_file = cacert_file;
 
-        if (!csv_mode && self->output_file) {
+        if (!csv_mode && !csv2_mode && self->output_file) {
                 quiet = false;
         }
 
@@ -792,6 +794,8 @@ clean:
          */
         if (csv_mode) {
                 report = cve_plugin_get_by_name("csv");
+        } else if (csv2_mode) {
+                report = cve_plugin_get_by_name("csv2");
         } else if (!no_html) {
                 report = cve_plugin_get_by_name("html");
         } else {
diff --git a/src/plugins/Makefile.am b/src/plugins/Makefile.am
index 0d56f8e..2c728af 100644
--- a/src/plugins/Makefile.am
+++ b/src/plugins/Makefile.am
@@ -6,6 +6,7 @@ pkglib_LTLIBRARIES =
 # Output plugins
 include output/cli/Makefile.am
 include output/csv/Makefile.am
+include output/csv2/Makefile.am
 include output/html/Makefile.am
 
 # Packaging plugins
diff --git a/src/plugins/output/csv2/Makefile.am b/src/plugins/output/csv2/Makefile.am
new file mode 100644
index 0000000..dd753d4
--- /dev/null
+++ b/src/plugins/output/csv2/Makefile.am
@@ -0,0 +1,16 @@
+pkglib_LTLIBRARIES += \
+	csv2.la
+
+csv2_la_SOURCES = \
+	output/csv2/csv2.c
+
+csv2_la_LIBADD = \
+	$(MODULE_COMMON_LIBS) \
+	${top_builddir}/src/libcve.la
+
+csv2_la_CFLAGS = \
+	$(MODULE_COMMON_CFLAGS) \
+	$(AM_CFLAGS)
+
+csv2_la_LDFLAGS = \
+	$(MODULE_FLAGS)
diff --git a/src/plugins/output/csv2/csv2.c b/src/plugins/output/csv2/csv2.c
new file mode 100644
index 0000000..368a13b
--- /dev/null
+++ b/src/plugins/output/csv2/csv2.c
@@ -0,0 +1,96 @@
+/*
+ * csv2.c - CSV output
+ *
+ * Copyright (C) 2016 VMware
+ *
+ * cve-check-tool is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define _GNU_SOURCE
+
+#include <stdio.h>
+#include <errno.h>
+
+#include "config.h"
+#include "util.h"
+#include "cve-check-tool.h"
+#include "plugin.h"
+
+static bool csv_write_report(CveCheckTool *self)
+{
+        GHashTableIter iter;
+        gchar *key = NULL;
+        struct source_package_t *v = NULL;
+        struct cve_entry_t *entry = NULL;
+        GList *c = NULL;
+        FILE *fd = NULL;
+        bool ret = false;
+
+        if (self->output_file) {
+                fd = fopen(self->output_file, "w");
+                if (!fd) {
+                        fprintf(stderr, "Unable to open %s for writing: %s\n", self->output_file, strerror(errno));
+                        return false;
+                }
+        } else {
+                fd = stdout;
+        }
+
+        /* CVE score|CVE number|package name|CVE summary */
+        g_hash_table_iter_init(&iter, self->db);
+        while (g_hash_table_iter_next(&iter, (void**)&key, (void**)&v)) {
+                if (!v->issues && !v->patched && !self->show_unaffected) {
+                        continue;
+                }
+                if (!v->issues && self->hide_patched) {
+                        continue;
+                }
+                for (c = v->issues; c; c = c->next) {
+                        entry = cve_db_get_cve(self->cve_db, (gchar*)c->data);
+                        if (self->modified > 0 && entry->modified > self->modified) {
+                                cve_free(entry);
+                                continue;
+                        }
+                        if (fprintf(fd, "%s|%s|%s|%s\n", entry->score, entry->id, key, entry->summary) < 0) {
+                                goto io_error;
+                        }
+		}
+        }
+
+        ret = true;
+        goto success;
+
+io_error:
+        fprintf(stderr, "Error writing to file: %s\n", strerror(errno));
+success:
+        ret = true;
+        if (fd != stdout && self->output_file) {
+                fclose(fd);
+        }
+
+        return ret;
+}
+
+_module_export_ bool cve_plugin_module_init(CvePlugin *self)
+{
+        self->report = csv_write_report;
+        self->flags = PLUGIN_TYPE_REPORT;
+        self->name = "csv2";
+        return true;
+}
+
+/*
+ * Editor modelines  -  https://www.wireshark.org/tools/modelines.html
+ *
+ * Local variables:
+ * c-basic-offset: 8
+ * tab-width: 8
+ * indent-tabs-mode: nil
+ * End:
+ *
+ * vi: set shiftwidth=8 tabstop=8 expandtab:
+ * :indentSize=8:tabSize=8:noTabs=true:
+ */
-- 
2.8.1

