From 28a832cca78dfe870f5f62f7b8f588972c44fa3a Mon Sep 17 00:00:00 2001
From: Alexey Makhalov <amakhalov@vmware.com>
Date: Wed, 20 May 2020 00:33:07 -0700
Subject: [PATCH] newca: new archive format

It is same as "newc" with only change that files data
starts at page aligned boundary. By default it is
4096 bytes. Can be set to different value by changing
io block size.
Extraction requires to specify -C option (e.g. -C 4096)
---
 src/copyin.c  | 53 ++++++++++++++++++++++++++++++++++++++++++++++-----
 src/copyout.c | 11 +++++++++--
 src/extern.h  |  3 ++-
 src/global.c  |  2 +-
 src/main.c    | 13 +++++++++++++
 src/util.c    |  8 ++++++++
 6 files changed, 81 insertions(+), 9 deletions(-)

diff --git a/src/copyin.c b/src/copyin.c
index b29f348..7688baf 100644
--- a/src/copyin.c
+++ b/src/copyin.c
@@ -91,7 +91,8 @@ tape_skip_padding (int in_file_des, off_t offset)
 {
   off_t pad;
 
-  if (archive_format == arf_crcascii || archive_format == arf_newascii)
+  if (archive_format == arf_crcascii || archive_format == arf_newascii
+	|| archive_format == arf_newasciialigned)
     pad = (4 - (offset % 4)) % 4;
   else if (archive_format == arf_binary || archive_format == arf_hpbinary)
     pad = (2 - (offset % 2)) % 2;
@@ -398,7 +399,8 @@ copyin_regular_file (struct cpio_file_stat* file_hdr, int in_file_des)
       /* Can the current file be linked to a previously copied file? */
       if (file_hdr->c_nlink > 1
 	  && (archive_format == arf_newascii
-	      || archive_format == arf_crcascii) )
+	      || archive_format == arf_crcascii
+	      || archive_format == arf_newasciialigned) )
 	{
 	  int link_res;
 	  if (file_hdr->c_filesize == 0)
@@ -508,6 +510,14 @@ copyin_regular_file (struct cpio_file_stat* file_hdr, int in_file_des)
 	error (0, 0, _("cannot swap bytes of %s: odd number of bytes"),
 	       file_hdr->c_name);
     }
+  if (archive_format == arf_newasciialigned)
+    {
+      off_t input_position = input_bytes +
+	  (in_buff - input_buffer);
+      int offset = input_position % io_block_size;
+      if (offset)
+        tape_toss_input (in_file_des, io_block_size - offset);
+    }
   copy_files_tape_to_disk (in_file_des, out_file_des, file_hdr->c_filesize);
   disk_empty_output_buffer (out_file_des, true);
   
@@ -537,7 +547,8 @@ copyin_regular_file (struct cpio_file_stat* file_hdr, int in_file_des)
 
   tape_skip_padding (in_file_des, file_hdr->c_filesize);
   if (file_hdr->c_nlink > 1
-      && (archive_format == arf_newascii || archive_format == arf_crcascii) )
+      && (archive_format == arf_newascii || archive_format == arf_crcascii
+	  || archive_format == arf_newasciialigned) )
     {
       /* (see comment above for how the newc and crc formats 
 	 store multiple links).  Now that we have the data 
@@ -884,6 +895,7 @@ read_in_header (struct cpio_file_stat *file_hdr, int in_des)
     struct old_cpio_header old_header;
   } magic;
   long bytes_skipped = 0;	/* Bytes of junk found before magic number.  */
+  bool existing_dir = false;
 
   /* Search for a valid magic number.  */
 
@@ -905,6 +917,8 @@ read_in_header (struct cpio_file_stat *file_hdr, int in_des)
 
 	  if (!strncmp (tmpbuf.s, "070701", 6))
 	    archive_format = arf_newascii;
+	  else if (!strncmp (tmpbuf.s, "0707ca", 6))
+	    archive_format = arf_newasciialigned;
 	  else if (!strncmp (tmpbuf.s, "070707", 6))
 	    archive_format = arf_oldascii;
 	  else if (!strncmp (tmpbuf.s, "070702", 6))
@@ -960,6 +974,33 @@ read_in_header (struct cpio_file_stat *file_hdr, int in_des)
 	  read_in_new_ascii (file_hdr, in_des);
 	  break;
 	}
+      if (archive_format == arf_newasciialigned
+	  && !strncmp (magic.str, "0707ca", 6))
+	{
+	  if (bytes_skipped > 0)
+	    {
+              if (!table_flag && try_existing_file (file_hdr, in_des, &existing_dir) == 0)
+                {
+	          error (0, 0, _("warning: skipped %ld byte of junk. Page aligned "
+	            "(newca) format detected. Current io_size is %ld, try different io_size"
+		    "(e.g. -C 4096)"), bytes_skipped, io_block_size);
+                }
+	    }
+	  /*
+	   * We cannot represent "0707ca" string in octal format.
+	   * Good news, that file_hdr->c_magic for arf_newasciialigned
+	   * is used only for debug print messages in main loop of
+	   * process_copy_in(). It is safe to pick any non existing value.
+	   * Decimal value we picked 070312 has 0x70ca hex represintation,
+	   * which is lower 16 bits of full header 0x0707ca.
+	   * We do not want 'newca' header to be octal representable as
+	   * it can potentially conflict with newly added formats in future,
+	   * and we won't upstream 'newca' format.
+	   */
+	  file_hdr->c_magic = 070312;
+	  read_in_new_ascii (file_hdr, in_des);
+	  break;
+	}
       if (archive_format == arf_crcascii
 	  && !strncmp (magic.str, "070702", 6))
 	{
@@ -1334,7 +1375,8 @@ process_copy_in ()
 	     data for the links.  If it does, we'll copy in the data
 	     to the links, but not to this file.  */
 	  if (file_hdr.c_nlink > 1 && (archive_format == arf_newascii
-	      || archive_format == arf_crcascii) )
+	      || archive_format == arf_crcascii
+	      || archive_format == arf_newasciialigned) )
 	    {
 	      if (create_defered_links_to_skipped(&file_hdr, in_file_des) < 0)
 	        {
@@ -1423,7 +1465,8 @@ process_copy_in ()
   if (append_flag)
     return;
 
-  if (archive_format == arf_newascii || archive_format == arf_crcascii)
+  if (archive_format == arf_newascii || archive_format == arf_crcascii
+      || archive_format == arf_newasciialigned)
     {
       create_final_defers ();
     }
diff --git a/src/copyout.c b/src/copyout.c
index 8b0beb6..ca50a68 100644
--- a/src/copyout.c
+++ b/src/copyout.c
@@ -80,7 +80,8 @@ tape_pad_output (int out_file_des, int offset)
 {
   size_t pad;
 
-  if (archive_format == arf_newascii || archive_format == arf_crcascii)
+  if (archive_format == arf_newascii || archive_format == arf_crcascii ||
+      archive_format == arf_newasciialigned)
     pad = (4 - (offset % 4)) % 4;
   else if (archive_format == arf_tar || archive_format == arf_ustar)
     pad = (512 - (offset % 512)) % 512;
@@ -546,6 +547,11 @@ write_out_header (struct cpio_file_stat *file_hdr, int out_des)
     case arf_crcascii:
       return write_out_new_ascii_header ("070702", file_hdr, out_des);
       
+    case arf_newasciialigned:
+      /* Pick 0707ca header. Hoping it won't conflict with any new
+         headers in future.  */
+      return write_out_new_ascii_header ("0707ca", file_hdr, out_des);
+      
     case arf_oldascii:
       return write_out_old_ascii_header (makedev (file_hdr->c_dev_maj,
 						  file_hdr->c_dev_min),
@@ -690,7 +696,8 @@ process_copy_out ()
 		      break;
 		    }
 		}
-	      if ( (archive_format == arf_newascii || archive_format == arf_crcascii)
+	      if ( (archive_format == arf_newascii || archive_format == arf_crcascii ||
+		    archive_format == arf_newasciialigned)
 		  && (file_hdr.c_nlink > 1) )
 		{
 		  if (last_link (&file_hdr) )
diff --git a/src/extern.h b/src/extern.h
index 11ac6bf..d68cd53 100644
--- a/src/extern.h
+++ b/src/extern.h
@@ -24,11 +24,12 @@
 enum archive_format
 {
   arf_unknown, arf_binary, arf_oldascii, arf_newascii, arf_crcascii,
-  arf_tar, arf_ustar, arf_hpoldascii, arf_hpbinary
+  arf_tar, arf_ustar, arf_hpoldascii, arf_hpbinary, arf_newasciialigned
 };
 
 extern enum archive_format archive_format;
 extern int reset_time_flag;
+#define IO_BLOCK_SIZE_DEFAULT 512
 extern int io_block_size;
 extern int create_dir_flag;
 extern int rename_flag;
diff --git a/src/global.c b/src/global.c
index fb3abe9..bb6cf55 100644
--- a/src/global.c
+++ b/src/global.c
@@ -28,7 +28,7 @@
 int reset_time_flag = false;
 
 /* Block size value, initially 512.  -B sets to 5120.  */
-int io_block_size = 512;
+int io_block_size = IO_BLOCK_SIZE_DEFAULT;
 
 /* The header format to recognize and produce.  */
 enum archive_format archive_format = arf_unknown;
diff --git a/src/main.c b/src/main.c
index b1bc70a..123b27f 100644
--- a/src/main.c
+++ b/src/main.c
@@ -368,6 +368,8 @@ parse_opt (int key, char *arg, struct argp_state *state)
 	archive_format = arf_crcascii;
       else if (!strcasecmp (arg, "newc"))
 	archive_format = arf_newascii;
+      else if (!strcasecmp (arg, "newca"))
+	archive_format = arf_newasciialigned;
       else if (!strcasecmp (arg, "odc"))
 	archive_format = arf_oldascii;
       else if (!strcasecmp (arg, "bin"))
@@ -574,6 +576,15 @@ usage (int status)
   exit (status);
 }
 
+static inline void
+set_io_block_size()
+{
+  /* Set io_block_size to page size if not defined */
+  if (archive_format == arf_newasciialigned &&
+      io_block_size == IO_BLOCK_SIZE_DEFAULT)
+    io_block_size = sysconf(_SC_PAGESIZE);
+}
+
 /* Process the arguments.  Set all options and set up the copy pass
    directory or the copy in patterns.  */
 
@@ -629,6 +640,7 @@ process_args (int argc, char *argv[])
       save_patterns = &argv[index];
       if (input_archive_name)
 	archive_name = input_archive_name;
+      set_io_block_size();
     }
   else if (copy_function == process_copy_out)
     {
@@ -668,6 +680,7 @@ process_args (int argc, char *argv[])
 
       if (!arf_stores_inode_p (archive_format))
 	renumber_inodes_option = ignore_devno_option = 0;
+      set_io_block_size();
     }
   else
     {
diff --git a/src/util.c b/src/util.c
index 4421b20..96f5ffa 100644
--- a/src/util.c
+++ b/src/util.c
@@ -479,6 +479,14 @@ copy_files_disk_to_tape (int in_des, int out_des, off_t num_bytes,
   int rc;
   off_t original_num_bytes;
 
+  if (archive_format == arf_newasciialigned) {
+    /* Page align file content */
+    size = io_block_size - output_size;
+    if (size > 0) {
+      write_nuls_to_file (size, out_des, tape_buffered_write);
+    }
+  }
+
   original_num_bytes = num_bytes;
 
   while (num_bytes > 0)
-- 
2.39.0

