From 83122cb8b940894a4af1d3469a46e6068de93024 Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Sun, 26 Feb 2023 17:05:19 +0530
Subject: [PATCH] Fix %setup and %patch not getting expanded in rpmspec --parse
 output

Handling %setup and %patch pseudo-macros in %prep is, ahem, special.
Which is why they don't appear expanded in --parse output despite
getting expanded at actual build-time. Add a flag to spec parsing
machinery to allow handling spec->parsed locally where needed, and
do so for %prep.

This is slightly ugly, but the alternatives are far more complicated
and still wont get rid of the ugliness as long as %patchN syntax
preprocessing is needed.

Fixes: #2048

[sshedi: ported fix to rpm-4.14.x]
Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 build/parsePrep.c         | 58 +++++++++++++++++++++------------------
 build/parseSpec.c         |  1 +
 build/rpmbuild_internal.h |  1 +
 3 files changed, 34 insertions(+), 26 deletions(-)

diff --git a/build/parsePrep.c b/build/parsePrep.c
index 5454b7a..fd83916 100644
--- a/build/parsePrep.c
+++ b/build/parsePrep.c
@@ -16,6 +16,12 @@
 #include "lib/rpmug.h"
 #include "debug.h"
 
+static void appendBuf(rpmSpec spec, const char *s, int nl)
+{
+    appendStringBufAux(spec->prep, s, nl);
+    appendStringBufAux(spec->parsed, s, nl);
+}
+
 /**
  * Check that file owner and group are known.
  * @param urlfn		file url
@@ -104,7 +110,7 @@ static char *doPatch(rpmSpec spec, uint32_t c, int strip, const char *db,
     } else arg_fuzz = xstrdup("");
 
     rasprintf(&args, "%s -p%d %s%s%s%s%s%s", arg_patch_flags, strip, arg_backup, arg_fuzz, arg_dir, arg_outfile,
-		reverse ? " -R" : "", 
+		reverse ? " -R" : "",
 		removeEmpties ? " -E" : "");
 
     /* Avoid the extra cost of fork and pipe for uncompressed patches */
@@ -123,11 +129,11 @@ static char *doPatch(rpmSpec spec, uint32_t c, int strip, const char *db,
 
     if (c != INT_MAX) {
 	rasprintf(&buf, "echo \"Patch #%u (%s):\"\n"
-			"%s\n", 
+			"%s\n",
 			c, basename(fn), patchcmd);
     } else {
 	rasprintf(&buf, "echo \"Patch (%s):\"\n"
-			"%s\n", 
+			"%s\n",
 			basename(fn), patchcmd);
     }
     free(patchcmd);
@@ -325,7 +331,7 @@ static int doSetupMacro(rpmSpec spec, const char *line)
     if (arg < -1) {
 	rpmlog(RPMLOG_ERR, _("line %d: Bad %%setup option %s: %s\n"),
 		 spec->lineNum,
-		 poptBadOption(optCon, POPT_BADOPTION_NOALIAS), 
+		 poptBadOption(optCon, POPT_BADOPTION_NOALIAS),
 		 poptStrerror(arg));
 	goto exit;
     }
@@ -333,7 +339,7 @@ static int doSetupMacro(rpmSpec spec, const char *line)
     if (dirName) {
 	spec->buildSubdir = xstrdup(dirName);
     } else {
-	rasprintf(&spec->buildSubdir, "%s-%s", 
+	rasprintf(&spec->buildSubdir, "%s-%s",
 		  headerGetString(spec->packages->header, RPMTAG_NAME),
 		  headerGetString(spec->packages->header, RPMTAG_VERSION));
     }
@@ -347,30 +353,30 @@ static int doSetupMacro(rpmSpec spec, const char *line)
 	rc = RPMRC_OK;
 	goto exit;
     }
-    
+
     /* cd to the build dir */
     {	char * buildDir = rpmGenPath(spec->rootDir, "%{_builddir}", "");
 
 	rasprintf(&buf, "cd '%s'", buildDir);
-	appendLineStringBuf(spec->prep, buf);
+	appendBuf(spec, buf, 1);
 	free(buf);
 	free(buildDir);
     }
-    
+
     /* delete any old sources */
     if (!leaveDirs) {
 	rasprintf(&buf, "rm -rf '%s'", spec->buildSubdir);
-	appendLineStringBuf(spec->prep, buf);
+	appendBuf(spec, buf, 1);
 	free(buf);
     }
 
-    appendStringBuf(spec->prep, getStringBuf(before));
+    appendBuf(spec, getStringBuf(before), 0);
 
     /* if necessary, create and cd into the proper dir */
     if (createDir) {
 	buf = rpmExpand("%{__mkdir_p} ", spec->buildSubdir, "\n",
 			"cd '", spec->buildSubdir, "'", NULL);
-	appendLineStringBuf(spec->prep, buf);
+	appendBuf(spec, buf, 1);
 	free(buf);
     }
 
@@ -379,13 +385,13 @@ static int doSetupMacro(rpmSpec spec, const char *line)
 	char *chptr = doUntar(spec, 0, quietly);
 	if (!chptr)
 	    goto exit;
-	appendLineStringBuf(spec->prep, chptr);
+	appendBuf(spec, chptr, 1);
 	free(chptr);
     }
 
     if (!createDir) {
 	rasprintf(&buf, "cd '%s'", spec->buildSubdir);
-	appendLineStringBuf(spec->prep, buf);
+	appendBuf(spec, buf, 1);
 	free(buf);
     }
 
@@ -393,16 +399,16 @@ static int doSetupMacro(rpmSpec spec, const char *line)
 	char *chptr = doUntar(spec, 0, quietly);
 	if (chptr == NULL)
 	    goto exit;
-	appendLineStringBuf(spec->prep, chptr);
+	appendBuf(spec, chptr, 1);
 	free(chptr);
     }
-    
-    appendStringBuf(spec->prep, getStringBuf(after));
+
+    appendBuf(spec, getStringBuf(after), 0);
 
     /* Fix the permissions of the setup build tree */
     {	char *fix = rpmExpand("%{_fixperms} .", NULL);
 	if (fix && *fix != '%') {
-	    appendLineStringBuf(spec->prep, fix);
+	    appendBuf(spec, fix, 1);
 	}
 	free(fix);
     }
@@ -440,7 +446,7 @@ static rpmRC doPatchMacro(rpmSpec spec, const char *line)
     const char **argv = NULL;
     ARGV_t patch, patchnums = NULL;
     rpmRC rc = RPMRC_FAIL; /* assume failure */
-    
+
     struct poptOption const patchOpts[] = {
 	{ NULL, 'P', POPT_ARG_STRING, NULL, 'P', NULL, NULL },
 	{ NULL, 'p', POPT_ARG_INT, &opt_p, 'p', NULL, NULL },
@@ -471,7 +477,7 @@ static rpmRC doPatchMacro(rpmSpec spec, const char *line)
     poptParseArgvString(buf, &argc, &argv);
     free(buf);
 
-    /* 
+    /*
      * Grab all -P<N> numbers for later processing. Stored as strings
      * at this point so we only have to worry about conversion in one place.
      */
@@ -492,7 +498,7 @@ static rpmRC doPatchMacro(rpmSpec spec, const char *line)
     }
 
     if (c < -1) {
-	rpmlog(RPMLOG_ERR, _("%s: %s: %s\n"), poptStrerror(c), 
+	rpmlog(RPMLOG_ERR, _("%s: %s: %s\n"), poptStrerror(c),
 		poptBadOption(optCon, POPT_BADOPTION_NOALIAS), line);
 	goto exit;
     }
@@ -513,10 +519,10 @@ static rpmRC doPatchMacro(rpmSpec spec, const char *line)
 	if (s == NULL) {
 	    goto exit;
 	}
-	appendLineStringBuf(spec->prep, s);
+	appendBuf(spec, s, 1);
 	free(s);
     }
-	
+
     rc = RPMRC_OK;
 
 exit:
@@ -539,17 +545,17 @@ int parsePrep(rpmSpec spec)
     spec->prep = newStringBuf();
 
     /* There are no options to %prep */
-    if ((rc = readLine(spec, STRIP_NOTHING)) > 0) {
+    if ((rc = readLine(spec, STRIP_PARSED)) > 0) {
 	return PART_NONE;
     } else if (rc < 0) {
 	return PART_ERROR;
     }
-    
+
     while (! (nextPart = isPart(spec->line))) {
 	/* Need to expand the macros inline.  That way we  */
 	/* can give good line number information on error. */
 	argvAdd(&saveLines, spec->line);
-	if ((rc = readLine(spec, STRIP_NOTHING)) > 0) {
+	if ((rc = readLine(spec, STRIP_PARSED)) > 0) {
 	    nextPart = PART_NONE;
 	    break;
 	} else if (rc < 0) {
@@ -564,7 +570,7 @@ int parsePrep(rpmSpec spec)
 	} else if (rstreqn(*lines, "%patch", sizeof("%patch")-1)) {
 	    rc = doPatchMacro(spec, *lines);
 	} else {
-	    appendStringBuf(spec->prep, *lines);
+	    appendBuf(spec, *lines, 0);
 	}
 	if (rc != RPMRC_OK && !(spec->flags & RPMSPEC_FORCE)) {
 	    goto exit;
diff --git a/build/parseSpec.c b/build/parseSpec.c
index 606a0d8..e3c4b9a 100644
--- a/build/parseSpec.c
+++ b/build/parseSpec.c
@@ -483,6 +483,7 @@ int readLine(rpmSpec spec, int strip)
     /* Collect parsed line */
     if (spec->parsed == NULL)
 	spec->parsed = newStringBuf();
+    if (!(strip & STRIP_PARSED))
     appendStringBufAux(spec->parsed, spec->line,(strip & STRIP_TRAILINGSPACE));
 
     /* FIX: spec->readStack->next should be dependent */
diff --git a/build/rpmbuild_internal.h b/build/rpmbuild_internal.h
index 50b021a..0730965 100644
--- a/build/rpmbuild_internal.h
+++ b/build/rpmbuild_internal.h
@@ -188,6 +188,7 @@ typedef enum rpmParseState_e {
 #define STRIP_NOTHING             0
 #define STRIP_TRAILINGSPACE (1 << 0)
 #define STRIP_COMMENTS      (1 << 1)
+#define STRIP_PARSED        (1 << 2) /* Avoid adding to spec->parsed (hack) */
 
 #ifdef __cplusplus
 extern "C" {
-- 
2.39.2

