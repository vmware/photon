From 9d0655fdfa442a06e6470c8818e76a27c7a4f373 Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Tue, 7 Dec 2021 11:59:08 +0530
Subject: [PATCH] fix deliverables path

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 toys/lsb/pidof.c         |  2 +-
 toys/other/blkid.c       |  4 ++--
 toys/other/dos2unix.c    |  4 ++--
 toys/other/freeramdisk.c |  2 +-
 toys/other/fsync.c       |  2 +-
 toys/other/help.c        |  2 +-
 toys/other/lspci.c       |  2 +-
 toys/other/oneit.c       |  2 +-
 toys/other/readahead.c   |  2 +-
 toys/other/sysctl.c      |  4 ++--
 toys/other/vconfig.c     |  2 +-
 toys/other/vmstat.c      |  2 +-
 toys/other/watchdog.c    |  2 +-
 toys/posix/df.c          |  2 +-
 toys/posix/kill.c        |  4 ++--
 toys/posix/ps.c          | 16 ++++++++--------
 toys/posix/test.c        |  2 +-
 17 files changed, 28 insertions(+), 28 deletions(-)

diff --git a/toys/lsb/pidof.c b/toys/lsb/pidof.c
index 791eed05..3a8d69cd 100644
--- a/toys/lsb/pidof.c
+++ b/toys/lsb/pidof.c
@@ -5,7 +5,7 @@
  *
  * http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/pidof.html
 
-USE_PIDOF(NEWTOY(pidof, "so:x", TOYFLAG_BIN))
+USE_PIDOF(NEWTOY(pidof, "so:x", TOYFLAG_USR|TOYFLAG_BIN))
 
 config PIDOF
   bool "pidof"
diff --git a/toys/other/blkid.c b/toys/other/blkid.c
index 01b5971b..924e2db4 100644
--- a/toys/other/blkid.c
+++ b/toys/other/blkid.c
@@ -5,8 +5,8 @@
  * See ftp://ftp.kernel.org/pub/linux/utils/util-linux/v2.24/libblkid-docs/api-index-full.html
  * TODO: -U and -L should require arguments
 
-USE_BLKID(NEWTOY(blkid, "ULs*[!LU]", TOYFLAG_BIN))
-USE_FSTYPE(NEWTOY(fstype, "<1", TOYFLAG_BIN))
+USE_BLKID(NEWTOY(blkid, "ULs*[!LU]", TOYFLAG_SBIN))
+USE_FSTYPE(NEWTOY(fstype, "<1", TOYFLAG_USR|TOYFLAG_BIN))
 
 config BLKID
   bool "blkid"
diff --git a/toys/other/dos2unix.c b/toys/other/dos2unix.c
index 083a8140..4284eb8c 100644
--- a/toys/other/dos2unix.c
+++ b/toys/other/dos2unix.c
@@ -2,8 +2,8 @@
  *
  * Copyright 2012 Rob Landley <rob@landley.net>
 
-USE_DOS2UNIX(NEWTOY(dos2unix, 0, TOYFLAG_BIN))
-USE_UNIX2DOS(NEWTOY(unix2dos, 0, TOYFLAG_BIN))
+USE_DOS2UNIX(NEWTOY(dos2unix, 0, TOYFLAG_USR|TOYFLAG_BIN))
+USE_UNIX2DOS(NEWTOY(unix2dos, 0, TOYFLAG_USR|TOYFLAG_BIN))
 
 config DOS2UNIX
   bool "dos2unix/unix2dos"
diff --git a/toys/other/freeramdisk.c b/toys/other/freeramdisk.c
index 9e6845a7..66899408 100644
--- a/toys/other/freeramdisk.c
+++ b/toys/other/freeramdisk.c
@@ -4,7 +4,7 @@
  *
  * No Standard
 
-USE_FREERAMDISK(NEWTOY(freeramdisk, "<1>1", TOYFLAG_SBIN|TOYFLAG_NEEDROOT))
+USE_FREERAMDISK(NEWTOY(freeramdisk, "<1>1", TOYFLAG_USR|TOYFLAG_SBIN|TOYFLAG_NEEDROOT))
 
 config FREERAMDISK
   bool "freeramdisk"
diff --git a/toys/other/fsync.c b/toys/other/fsync.c
index d7812b90..31eb2cf4 100644
--- a/toys/other/fsync.c
+++ b/toys/other/fsync.c
@@ -4,7 +4,7 @@
  *
  * No Standard.
 
-USE_FSYNC(NEWTOY(fsync, "<1d", TOYFLAG_BIN))
+USE_FSYNC(NEWTOY(fsync, "<1d", TOYFLAG_USR|TOYFLAG_BIN))
 
 config FSYNC
   bool "fsync"
diff --git a/toys/other/help.c b/toys/other/help.c
index 1cdbe7e1..ab8d8809 100644
--- a/toys/other/help.c
+++ b/toys/other/help.c
@@ -4,7 +4,7 @@
  *
  * Often a shell builtin.
 
-USE_HELP(NEWTOY(help, "ahu", TOYFLAG_BIN|TOYFLAG_MAYFORK))
+USE_HELP(NEWTOY(help, "ahu", TOYFLAG_USR|TOYFLAG_BIN|TOYFLAG_MAYFORK))
 
 config HELP
   bool "help"
diff --git a/toys/other/lspci.c b/toys/other/lspci.c
index 62df47c9..9ab3c4d2 100644
--- a/toys/other/lspci.c
+++ b/toys/other/lspci.c
@@ -1,7 +1,7 @@
 /*
  * lspci - written by Isaac Dunham
 
-USE_LSPCI(NEWTOY(lspci, "emkn"USE_LSPCI_TEXT("@i:"), TOYFLAG_USR|TOYFLAG_BIN))
+USE_LSPCI(NEWTOY(lspci, "emkn"USE_LSPCI_TEXT("@i:"), TOYFLAG_USR|TOYFLAG_SBIN))
 
 config LSPCI
   bool "lspci"
diff --git a/toys/other/oneit.c b/toys/other/oneit.c
index 4c8bb1f6..de797508 100644
--- a/toys/other/oneit.c
+++ b/toys/other/oneit.c
@@ -2,7 +2,7 @@
  *
  * Copyright 2005, 2007 by Rob Landley <rob@landley.net>.
 
-USE_ONEIT(NEWTOY(oneit, "^<1nc:p3[!pn]", TOYFLAG_SBIN))
+USE_ONEIT(NEWTOY(oneit, "^<1nc:p3[!pn]", TOYFLAG_USR|TOYFLAG_SBIN))
 
 config ONEIT
   bool "oneit"
diff --git a/toys/other/readahead.c b/toys/other/readahead.c
index 4edd6516..d645a6e8 100644
--- a/toys/other/readahead.c
+++ b/toys/other/readahead.c
@@ -4,7 +4,7 @@
  *
  * No standard.
 
-USE_READAHEAD(NEWTOY(readahead, NULL, TOYFLAG_BIN))
+USE_READAHEAD(NEWTOY(readahead, NULL, TOYFLAG_USR|TOYFLAG_BIN))
 
 config READAHEAD
   bool "readahead"
diff --git a/toys/other/sysctl.c b/toys/other/sysctl.c
index 37735942..f71e4b22 100644
--- a/toys/other/sysctl.c
+++ b/toys/other/sysctl.c
@@ -4,8 +4,8 @@
  * Copyright 2014 Kyungwan Han <asura321@gmail.com>
  *
  * No Standard
- 
-USE_SYSCTL(NEWTOY(sysctl, "^neNqwpaA[!ap][!aq][!aw][+aA]", TOYFLAG_SBIN))
+
+USE_SYSCTL(NEWTOY(sysctl, "^neNqwpaA[!ap][!aq][!aw][+aA]", TOYFLAG_SBIN|TOYFLAG_USR))
 
 config SYSCTL
   bool "sysctl"
diff --git a/toys/other/vconfig.c b/toys/other/vconfig.c
index 83674d8b..6081159a 100644
--- a/toys/other/vconfig.c
+++ b/toys/other/vconfig.c
@@ -5,7 +5,7 @@
  *
  * No standard
 
-USE_VCONFIG(NEWTOY(vconfig, "<2>4", TOYFLAG_NEEDROOT|TOYFLAG_SBIN))
+USE_VCONFIG(NEWTOY(vconfig, "<2>4", TOYFLAG_USR|TOYFLAG_NEEDROOT|TOYFLAG_SBIN))
 
 config VCONFIG
   bool "vconfig"
diff --git a/toys/other/vmstat.c b/toys/other/vmstat.c
index d5cf5691..6463cd14 100644
--- a/toys/other/vmstat.c
+++ b/toys/other/vmstat.c
@@ -5,7 +5,7 @@
  * TODO: I have no idea how "system" category is calculated.
  * whatever we're doing isn't matching what other implementations are doing.
 
-USE_VMSTAT(NEWTOY(vmstat, ">2n", TOYFLAG_BIN))
+USE_VMSTAT(NEWTOY(vmstat, ">2n", TOYFLAG_BIN|TOYFLAG_USR))
 
 config VMSTAT
   bool "vmstat"
diff --git a/toys/other/watchdog.c b/toys/other/watchdog.c
index 0402d3ee..b8627bc5 100644
--- a/toys/other/watchdog.c
+++ b/toys/other/watchdog.c
@@ -4,7 +4,7 @@
  *
  * See kernel.org/doc/Documentation/watchdog/watchdog-api.txt
 
-USE_WATCHDOG(NEWTOY(watchdog, "<1>1Ft#=4<1T#=60<1", TOYFLAG_NEEDROOT|TOYFLAG_BIN))
+USE_WATCHDOG(NEWTOY(watchdog, "<1>1Ft#=4<1T#=60<1", TOYFLAG_NEEDROOT|TOYFLAG_BIN|TOYFLAG_USR))
 
 config WATCHDOG
   bool "watchdog"
diff --git a/toys/posix/df.c b/toys/posix/df.c
index caf8cf89..9e3adbab 100644
--- a/toys/posix/df.c
+++ b/toys/posix/df.c
@@ -4,7 +4,7 @@
  *
  * See http://opengroup.org/onlinepubs/9699919799/utilities/df.html
 
-USE_DF(NEWTOY(df, "HPkhit*a[-HPh]", TOYFLAG_SBIN))
+USE_DF(NEWTOY(df, "HPkhit*a[-HPh]", TOYFLAG_BIN))
 
 config DF
   bool "df"
diff --git a/toys/posix/kill.c b/toys/posix/kill.c
index 27676593..70d46898 100644
--- a/toys/posix/kill.c
+++ b/toys/posix/kill.c
@@ -12,7 +12,7 @@
  * No Standard
 
 USE_KILL(NEWTOY(kill, "?ls: ", TOYFLAG_BIN|TOYFLAG_MAYFORK))
-USE_KILLALL5(NEWTOY(killall5, "?o*ls: [!lo][!ls]", TOYFLAG_SBIN))
+USE_KILLALL5(NEWTOY(killall5, "?o*ls: [!lo][!ls]", TOYFLAG_USR|TOYFLAG_SBIN))
 
 config KILL
   bool "kill"
@@ -127,7 +127,7 @@ void kill_main(void)
       if (!readfile(toybuf, toybuf, sizeof(toybuf)) || !*toybuf) continue;
 
       // Check with omit list.
-      for (count = 0; count < ocount; count++) 
+      for (count = 0; count < ocount; count++)
         if (procpid == olist[count]) break;
       if (count != ocount) continue;
 
diff --git a/toys/posix/ps.c b/toys/posix/ps.c
index f8b2e03a..c67049ea 100644
--- a/toys/posix/ps.c
+++ b/toys/posix/ps.c
@@ -44,12 +44,12 @@
  * TODO: top: thread support and SMP
  * TODO: pgrep -f only searches the amount of cmdline that fits in toybuf.
 
-USE_PS(NEWTOY(ps, "k(sort)*P(ppid)*aAdeflMno*O*p(pid)*s*t*Tu*U*g*G*wZ[!ol][+Ae][!oO]", TOYFLAG_BIN|TOYFLAG_LOCALE))
+USE_PS(NEWTOY(ps, "k(sort)*P(ppid)*aAdeflMno*O*p(pid)*s*t*Tu*U*g*G*wZ[!ol][+Ae][!oO]", TOYFLAG_USR|TOYFLAG_BIN|TOYFLAG_LOCALE))
 // stayroot because iotop needs root to read other process' proc/$$/io
 // TOP and IOTOP have a large common option block used for common processing,
 // the default values are different but the flags are in the same order.
 USE_TOP(NEWTOY(top, ">0O*" "Hk*o*p*u*s#<1d%<100=3000m#n#<1bq[!oO]", TOYFLAG_USR|TOYFLAG_BIN|TOYFLAG_LOCALE))
-USE_IOTOP(NEWTOY(iotop, ">0AaKO" "Hk*o*p*u*s#<1=7d%<100=3000m#n#<1bq", TOYFLAG_USR|TOYFLAG_BIN|TOYFLAG_STAYROOT|TOYFLAG_LOCALE))
+USE_IOTOP(NEWTOY(iotop, ">0AaKO" "Hk*o*p*u*s#<1=7d%<100=3000m#n#<1bq", TOYFLAG_USR|TOYFLAG_SBIN|TOYFLAG_STAYROOT|TOYFLAG_LOCALE))
 USE_PGREP(NEWTOY(pgrep, "?cld:u*U*t*s*P*g*G*fnovxL:[-no]", TOYFLAG_USR|TOYFLAG_BIN))
 USE_PKILL(NEWTOY(pkill,    "?Vu*U*t*s*P*g*G*fnovxl:[-no]", TOYFLAG_USR|TOYFLAG_BIN))
 
@@ -551,7 +551,7 @@ static char *string_field(struct procpid *tb, struct ofields *field)
 
   // Clock displays
   } else if (which <= PS_TIME_) {
-    int unit = 60, pad = 2, j = TT.ticks; 
+    int unit = 60, pad = 2, j = TT.ticks;
     time_t seconds;
 
     if (which!=PS_TIME_) unit *= 60*24;
@@ -614,7 +614,7 @@ static char *string_field(struct procpid *tb, struct ofields *field)
       if (slot[SLOT_sid]==*slot) *s++ = 's';
       if (slot[SLOT_vmlck]) *s++ = 'L';
       if (slot[SLOT_ttypgrp]==*slot) *s++ = '+';
-    } 
+    }
     *s = 0;
   } else if (which==PS_STIME) {
     time_t t = time(0)-slot[SLOT_uptime]+slot[SLOT_starttime]/TT.ticks;
@@ -1243,7 +1243,7 @@ static int ksort(void *aa, void *bb)
 
 // Collect ->extra field from leaf nodes DIRTREE_SAVEd by get_ps() into array
 // (recursion because tree from get_thread() isn't flat list of siblings)
-static struct procpid **collate_leaves(struct procpid **tb, struct dirtree *dt) 
+static struct procpid **collate_leaves(struct procpid **tb, struct dirtree *dt)
 {
   while (dt) {
     struct dirtree *next = dt->next;
@@ -1266,7 +1266,7 @@ static struct procpid **collate(int count, struct dirtree *dt)
   collate_leaves(tbsort, dt);
 
   return tbsort;
-} 
+}
 
 // parse command line arguments (ala -k -o) with a comma separated FIELD list
 static void default_ko(char *s, void *fields, char *err, struct arg_list *arg)
@@ -1729,7 +1729,7 @@ static void top_common(
           else if (i == KEY_DOWN) topoff++;
           else if (i == KEY_PGDN) topoff += lines;
           else if (i == KEY_PGUP) topoff -= lines;
-          if (topoff<0) topoff = 0; 
+          if (topoff<0) topoff = 0;
           if (topoff>mix.count) topoff = mix.count;
         }
       }
@@ -1842,7 +1842,7 @@ static void do_pgk(struct procpid *tb)
     printf("%lld", *tb->slot);
     if (FLAG(l))
       printf(" %s", tb->str+tb->offset[4]*!!FLAG(f));
-    
+
     printf("%s", TT.pgrep.d ? TT.pgrep.d : "\n");
   }
 }
diff --git a/toys/posix/test.c b/toys/posix/test.c
index 3fadf3ad..51e02627 100644
--- a/toys/posix/test.c
+++ b/toys/posix/test.c
@@ -7,7 +7,7 @@
  * TODO sh [[ ]] options: <   aaa<bbb  >   bbb>aaa   ~= regex
 
 USE_TEST(NEWTOY(test, 0, TOYFLAG_USR|TOYFLAG_BIN|TOYFLAG_NOHELP|TOYFLAG_MAYFORK))
-USE_TEST_GLUE(OLDTOY([, test, TOYFLAG_BIN|TOYFLAG_MAYFORK|TOYFLAG_NOHELP))
+USE_TEST_GLUE(OLDTOY([, test, TOYFLAG_USR|TOYFLAG_BIN|TOYFLAG_MAYFORK|TOYFLAG_NOHELP))
 
 config TEST
   bool "test"
-- 
2.25.1

