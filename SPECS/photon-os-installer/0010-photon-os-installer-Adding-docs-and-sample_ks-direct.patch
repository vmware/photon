From 0d9d6f45339bebafd5135a434f13651caa72b093 Mon Sep 17 00:00:00 2001
From: Ankit Jain <ankitja@vmware.com>
Date: Thu, 2 Mar 2023 12:32:05 +0000
Subject: [PATCH 10/16] photon-os-installer: Adding docs and sample_ks
 directory

- Moved ks_config.txt to docs/ks_config.md
- Moved ui_config.txt to docs/ui_config.md
- Moved sample_ks.cfg sample_ks/sample_ks.cfg
- Moved sample_ui.cfg sample_ks/sample_ui.cfg
- Added various sample_ks files under sample_ks/
  for different features such as:
  - ostree
  - preinstall, postinstall
  - default configs

Change-Id: I00e5fe3bd56d4cea04e7378663b8365f8400ab1e
Signed-off-by: Ankit Jain <ankitja@vmware.com>
---
 docs/README.md                                |  20 +
 docs/ks_config.md                             | 604 ++++++++++++++++++
 docs/ui_config.md                             |  19 +
 photon_installer/generate_initrd.sh           |   2 +-
 photon_installer/isoBuilder.py                |   2 +-
 photon_installer/ks_config.txt                | 414 +-----------
 photon_installer/sample_ks.cfg                |  25 +-
 photon_installer/sample_ui.cfg                |  10 +-
 photon_installer/ui_config.txt                |  18 +-
 sample_ks/sample_ks.cfg                       |  24 +
 .../sample_ks_ostree_client_from_default.cfg  |  12 +
 .../sample_ks_ostree_client_from_server.cfg   |  15 +
 .../sample_ks_preinstall_postinstall.cfg      |  28 +
 ...s_preinstallscripts_postinstallscripts.cfg |  25 +
 sample_ks/sample_ui.cfg                       |   9 +
 15 files changed, 762 insertions(+), 465 deletions(-)
 create mode 100644 docs/README.md
 create mode 100644 docs/ks_config.md
 create mode 100644 docs/ui_config.md
 create mode 100644 sample_ks/sample_ks.cfg
 create mode 100644 sample_ks/sample_ks_ostree_client_from_default.cfg
 create mode 100644 sample_ks/sample_ks_ostree_client_from_server.cfg
 create mode 100644 sample_ks/sample_ks_preinstall_postinstall.cfg
 create mode 100644 sample_ks/sample_ks_preinstallscripts_postinstallscripts.cfg
 create mode 100644 sample_ks/sample_ui.cfg

diff --git a/docs/README.md b/docs/README.md
new file mode 100644
index 0000000..5fc927f
--- /dev/null
+++ b/docs/README.md
@@ -0,0 +1,20 @@
+# What is kickstart
+Kickstart is a json format file use to configure installer to deploy OS as per user requirements.
+
+# Ways to provide Kickstart path:
+
+### 1. Remote kickstart
+
+    ks=http://<kickstart-link>
+
+### 2. Kickstart from cdrom attched with iso
+
+    ks=cdrom:/isolinux/sample_ks.cfg
+
+### 3. Secondary Device Kickstart
+
+    ks=<device-path>:<path-referential-to-device>
+    Example:
+    ks=/dev/sr1:/isolinux/sample_ks.cfg
+
+Please refer [ks_config.md](https://github.com/vmware/photon-os-installer/docs/ks_config.md) to explore more about kickstart features.
diff --git a/docs/ks_config.md b/docs/ks_config.md
new file mode 100644
index 0000000..e6dd010
--- /dev/null
+++ b/docs/ks_config.md
@@ -0,0 +1,604 @@
+# Kickstart Features
+
+Kickstart config file is a json format with following possible parameters:
+
+
+### _"additional_files":_ (optional)
+
+- Contains list of pairs { source file (or directory), destination file
+(or directory) } to copy to the target system. Source file
+(directory) will be looked up in "search_path" list.
+
+  Example:
+  ```json
+  {
+     "additional_files": [
+                           {"resizefs.sh": "/usr/local/bin/resizefs.sh"},
+                           {"resizefs.service": "/lib/systemd/system/resizefs.service"}
+                         ]
+  }
+  ```
+### _"additional_packages":_
+- Same as _"packages"_
+
+### _"additional_rpms_path":_ (optional)
+- Provide a path containing additional RPMS that are to be bundled into the image.
+
+
+### _"arch":_ (optional)
+- Target system architecture. Should be set if target architecture is
+different from host one, for instance x86_64 machine building RPi
+image.
+
+  - ***Acceptable values:*** _"x86_64"_, _"aarch64"_
+
+  - ***Default value:*** autodetected host architecture
+
+  Example:
+  ```json
+  {
+    "arch": "aarch64"
+  }
+  ```
+
+### _"bootmode":_ (optional)
+- Sets the boot type to suppot: EFI, BIOS or both.
+
+  - ***Acceptable values:*** _"bios"_, _"efi"_, _"dualboot"_
+  - ***Default value:*** _"dualboot"_ for x86_64 and _"efi"_ for aarch64
+
+- _"bios"_ will add special partition (very first) for first stage grub.
+- _"efi"_ will add ESP (Efi Special Partition), format is as FAT and copy
+there EFI binaries including grub.efi
+- _"dualboot"_ will add two extra partitions for "bios" and "efi" modes.
+  - This target will support both modes that can be switched in bios
+settings without extra actions in the OS.
+
+  Example:
+  ```json
+  {
+    "bootmode": "bios"
+  }
+  ```
+
+### _"disk":_ (required)
+
+- Target"s disk device file path to install into, such as "/dev/sda".
+Loop device is also supported.
+
+  Example:
+  ```json
+  {
+    "disk": "/dev/sdb"
+  }
+  ```
+- /dev/disk/by-path is also supported.
+
+  Example:
+  ```json
+  {
+    "disk": "/dev/disk/by-path/pci-0000:03:00.0-scsi-0:0:1:0"
+  }
+  ```
+### _"eject_cdrom":_ (optional)
+- Eject or not cdrom after installation completed.
+  - **Boolean:** _true_ or _false_
+  - **Default value:** true
+
+  Example:
+  ```json
+  {
+    "eject_cdrom": false
+  }
+  ```
+
+### _"hostname":_ (optional)
+- Set target host name.
+  - **Default value:** "photon-<randomized string>"
+
+  Example:
+  ```json
+  {
+    "hostname": "photon-machine"
+  }
+  ```
+### _"live":_ (optional)
+- Should be set to false if target system will not be run on
+ host machine. When it set to false, installer will not add EFI boot
+ entries, and will not generate unique machine-id.
+  - **Boolean:** _false_ if "disk" is /dev/loop and _true_ otherwise.
+
+  Example:
+   ```json
+  {
+    "live": false
+  }
+   ```
+### _"log_level":_ (optional)
+- Set installer logging level.
+  - **Acceptable values:** _"error"_, _"warning"_, _"info"_, _"debug"_
+  - **Default value:** _"info"_
+
+    Example:
+    ```json
+    {
+      "log_level": "debug"
+    }
+    ```
+### _"ostree":_ (optional)
+- Atomic flavour of Photon OS.
+- Define the type of repo data used for installing the OS
+- There are two type:
+  1. Default Repo(comes with ISO)
+  2. Custom Repo (Remote server)
+  - _"default_repo":_ (required)
+    - **Boolean:** _true_ or _false_
+      - _true_ : Default Repo is selected
+      - _false_: Custom Repo is selected
+    - **Default value:** _true_
+   Example:
+   ```json
+   {
+     "ostree": {
+                  "default_repo": true
+               }
+   }
+   ```
+  - _"repo_url":_ (Required, Only If Custom Repo is selected)
+    - **Supported Values:** Valid "repo" URL of remote server where repo data exists
+  - _"repo_ref":_ (Required, Only If Custom Repo is selected)
+    - **Supported Value:** Valid "ref" path which was mentioned for
+                           creation of Base Tree on remote server
+
+   Example:
+   ```json
+   {
+     "ostree": {
+                 "default_repo": false,
+                 "repo_url": "http://<ip>:<port>/repo",
+                 "repo_ref": "photon/4.0/x86_64/minimal"
+               }
+   }
+   ```
+
+### _"packagelist_file":_ (optional if _"packages"_ set)
+- Contains file name which has list of packages to install.
+
+  Example:
+  ```json
+  {
+    "packagelist_file": "packages_minimal.json"
+  }
+  ```
+
+### _"packages":_ (optional if _"packagelist_file"_ set)
+- Contains list of packages to install.
+
+  Example:
+  ```json
+  {
+    "packages": ["minimal", "linux", "initramfs"]
+  }
+  ```
+
+### _"partition_type":_ (optional)
+- Set partition table type. Supported values are: "gpt", "msdos".
+ - **Default value:** _"gpt"_
+
+  Example:
+  ```json
+  {
+    "partition_type": "msdos"
+  }
+  ```
+
+### _"partitions":_ (optional)
+- Contains list of partitions to create.
+- Each partition is a dictionary of the following items:
+ - _"filesystem":_ (required)
+  - Filesystem type.
+      - **Supported values:** _"swap"_, _"ext4"_, _"vfat"_, _"xfs"_, _"btrfs"_.
+
+  - _"disk":_ (_optional_ if single disk device is available,
+             _required_ if multiple disk devices are available)
+    - Target disk device will have the defined partition
+    - **Supported values:**
+      - _"/dev/loop":_ loop devices
+      - _"/dev/sdX"_ : scsi drives based devices
+      - _"/dev/hdX"_ : IDE drives based devices
+  - _"mountpoint":_ (required for non "swap" partitions)
+    - Mount point for the partition.
+  - _"size":_ (required)
+    - Size of the partition in MB. If 0 then partition is considered
+  as expansible to fill rest of the disk. Only one expansible
+  partition is allowed.
+  - _"mkfs_options":_ (optional)
+    - Additional parameters for the mkfs command as a string
+  - _"fs_options":_ (optional)
+    -fs options to be passed to mount command as a string
+
+    Example:
+    ```json
+    "fs_options": "nodev,noexec,nosuid"
+    ```
+  - _"btrfs":_ (optional)
+    - Creates btrfs volumes and subvolumes.
+    - Value is a dictionary with 1 required and 1 optional key.
+    - _"label"_ (optional)
+      - Name of the parent volume label.
+    - _"subvols"_ (optional)
+      - Subvolumes inside parent volume.
+
+    Example:
+    ```json
+    {
+      "disk": "/dev/sda",
+      "partitions": [
+                      {
+                        "mountpoint": "/",
+                        "size": 0,
+                        "filesystem": "btrfs"
+                      }
+                    ]
+    }
+    ```
+    Example to create subvols:
+    ```json
+    {
+      "partitions" : [
+                        {
+                          "mountpoint": "/",
+                          "size": 2048,
+                          "filesystem": "btrfs",
+                          "btrfs" : {
+                                      "label" : "main",
+                                      "subvols" : [
+                                                    {
+                                                      "name": "rootfs",
+                                                      "mountpoint": "/root"
+                                                    },
+                                                    {
+                                                      "name": "home",
+                                                      "mountpoint": "/home",
+                                                      "subvols": [
+                                                                   {
+                                                                      "name": "dir1",
+                                                                      "mountpoint": "/dir1"
+                                                                   }
+                                                                 ]
+                                                    }
+                                                  ]
+                                     }
+                        }
+                    ]
+    }
+    ```
+  - _"lvm":_ (optional)
+    - Will logical volume (LVM) for this partition.
+    - Value is a dictionary with 2 required keys:
+    - _"vg_name"_ (required)
+      - Name of a virtual group to put current partition into.
+      - Several partitions may have same "vg_name"
+    - _"lv_name"_ (required)
+      - Unique logical volume name of the partition.
+
+    Example:
+    ```json
+    {
+      "partitions" : [
+                             {
+                               "mountpoint": "/",
+                               "size": 0,
+                               "filesystem": "ext4",
+                               "lvm": {
+                                        "vg_name": "VirtualGroup1",
+                                        "lv_name": "root"
+                                      }
+                             },
+                             {
+                               "mountpoint": "/boot/efi",
+                               "size": 12,
+                               "filesystem": "vfat",
+                               "fs_options": "-n EFI"
+                             },
+                             {
+                               "size": 128,
+                               "filesystem": "swap"
+                             }
+                     ]
+    }
+    ```
+    Example: Multiple Disk device partition table
+    ```json
+    {
+      "partitions": [
+       {
+         "disk": "/dev/sda",
+         "mountpoint": "/",
+         "size": 0,
+         "filesystem": "ext4"
+       },
+       {
+         "disk": "/dev/sdb",
+         "mountpoint": "/sdb",
+         "size": 0,
+         "filesystem": "ext4"
+       },
+       {
+         "disk": "/dev/sdc",
+         "mountpoint": "/sdc",
+         "size": 0,
+         "filesystem": "ext4"
+       },
+     ]
+    }
+    ```
+  - _"ab":_ (optional)
+    - This feature enables the system to create a shadow partition
+  (snapshot of user-defined partition) of a user defined partition.
+    - This is required to support the system upgrade/rollback functionality via
+  AB System Upgrade mechanism.
+    - **Acceptable values:** _true_, _false_
+    - **Default value:** _false_
+
+    Example: In given the partition table below, the "/" partition will have
+  a shadow partition but the "/sda" partition will not have a shadow partition:
+    ```json
+    {
+      "partitions": [
+                      {
+                        "disk": "/dev/sda",
+                        "mountpoint": "/",
+                        "size": 0,
+                        "filesystem": "ext4",
+                        "ab": true
+                      },
+                      {
+                        "disk": "/dev/sda",
+                        "mountpoint": "/sda",
+                        "size": 100,
+                        "filesystem": "ext4"
+                      }
+                    ]
+    }
+    ```
+
+### _"network":_ (optional)
+- Used to configure network in live/installed system.
+
+- Set  _"version":_ _"2"_ or the legacy config will be used, see below.
+
+- The syntax roughly follows the cloud-init or netplan configuration,
+    but not all options are supported.
+
+ - _"hostname":_ set the host name.
+
+ - _"ethernets":_ Settings for ethernet interfaces. Each interface has an 'id',
+    which can be any name which may be refrenced for examplev for VLANs. Can
+    be the interface name.
+
+    - Within any _'id'_:
+
+      - _"match"_ : set a way to match this interface. Can be 'name' or 'macaddress'.
+
+      - _"dhcp4"_ : boolean, set to true or false
+
+      - _"dhcp6"_ : boolean, set to true or false
+
+      - _"accept-ra"_ : boolean, set to true or false. Whether to accept
+    Router Advertisement for IPv6.
+
+      - _"addresses"_ : a list of ip addresses (IPv4 or IPv6) with cidr netmask.
+
+      - _"gateway"_ : the default gateway.
+
+      - _"nameservers"_ : a dictionary with "addresses" containing a list of name servers,
+    and "search" with a list of search domains.
+
+ - _"vlans":_ Settings for VLAN interfaces. Similar to _"ethernets"_ above,
+    but with these additional required settings:
+
+   - _"id"_ : the VLAN id (integer in the range 1..4094)
+
+   - _"link"_ : the id of the ethernet interface to use, from the "ethernets"
+    configured.
+
+  Example:
+  ```json
+  {
+    "network":{
+                "version": "2",
+                "hostname" : "photon-machine",
+                "ethernets": {
+                                "id0": {
+                                          "match": {
+                                                    "name" : "eth0"
+                                                   },
+                                          "dhcp4" : false,
+                                          "addresses": ["192.168.2.58/24"],
+                                          "gateway": "192.168.2.254",
+                                          "nameservers": {
+                                                            "addresses" : ["8.8.8.8", "8.8.4.4"],
+                                                            "search" : ["vmware.com", "eng.vmware.com"]
+                                                          }
+                                       }
+                             },
+                "vlans": {
+                            "vlan0": {
+                                        "id": 100,
+                                        "link": "id0",
+                                        "addresses":["192.168.100.58/24"]
+                                     }
+                         }
+              }
+  }
+  ```
+
+ - Legacy network configuration:
+  - _"type"_ (required)
+    - String: must be one of _dhcp_/_static_/_vlan_. Indicates how the network
+  is being configured.
+  - _"hostname"_ (optional; when _type_ == _dhcp_)
+    - String: DHCP client hostname
+  - _"ip_addr"_ (required; when _type_ == _static_)
+    - IP String: IP address to be configured
+  - _"netmask"_ (required; when _type_ == _static_)
+    - IP String: Netmask to be configured
+  - _"gateway"_ (required; when _type_ == _static_)
+    - IP String: Gateway IP address to be configured
+  - _"nameserver"_ (required; when _type_ == _static_)
+    - IP String: Name server IP address to be configured
+  - _"vlan_id"_ (required; when _type_ == _vlan_)
+    - ID String: (1-4094); VLAN ID number expressed as string
+
+### _"password":_ (optional)
+- Set root password. It is dictionary of the following items:
+  - _"text"_ (required) password plain text (_"crypted"_ : _false_)
+  or encrypted (_"crypted"_: _true_)
+  - _"crypted"_ (required) Hint on how to interpret "text" content.
+  - _"age"_ (optional) Set password expiration date. If not set, then
+  used Photon OS default password aging value.
+  - **Value:** integer. Meanings:
+    - Any positive number - password will be expired in
+    so many days from today.
+    - Zero (0) - marks password as already expired. root
+    will be asked to change current password during the
+    first login.
+    - Minus one (-1) - removes root password expiration date.
+  - **Default value:**
+  ```json
+  {
+    "crypted": true,
+    "text": "*"
+  }
+  ```
+  which means root is not allowed to login.
+
+  Example:
+  ```json
+  {
+    "password": {
+                  "crypted": false,
+                  "text": "changeme",
+                  "age": 0
+                }
+  }
+  ```
+
+### _"postinstall":_ (optional)
+- Contains list of lines to be executed as a single script on
+ the target after installation.
+
+  Example:
+  ```json
+  {
+    "postinstall": [
+                     "#!/bin/sh",
+                     "echo \"Hello World\" > /etc/postinstall"
+                   ]
+  }
+  ```
+ ### _"postinstallscripts":_ (optional)
+- Contains list of scripts to execute on the target after installation.
+- Scripts will be looked up in _"search_path"_ list.
+
+  Example:
+  ```json
+  {
+    "postinstallscripts": ["rpi3-custom-patch.sh"]
+  }
+  ```
+
+### _"preinstall":_ (optional)
+- Contains list of lines to be executed as a single script on
+ the target before installation starts.
+- if ks file defines any value($VALUE) that need to be populated dynamically
+ during runtime then it should be determined and exported in preinstall script.
+
+  Example:
+  ```json
+  {
+    "disk": "$DISK"
+    "preinstall": [
+                    "#!/bin/sh",
+                    "ondisk=$(ls -lh /dev/disk/by-path/ | grep 'scsi-0:0:1:0' | cut -d' ' -f 9)",
+                    "export DISK=\"/dev/disk/by-path/$ondisk\""
+                  ]
+  }
+  ```
+### _"preinstallscripts":_ (optional)
+- Contains list of scripts to execute on the target before installation starts.
+- Scripts will be looked up in _"search_path"_ list.
+
+  Example:
+  ```json
+  {
+    "preinstallscripts": ["find_disk.sh"]
+  }
+  ```
+
+### _"public_key":_ (optional)
+- To inject entry to authorized_keys as a string. Setting this variable
+ enables root login in sshd config.
+
+### _"search_path":_ (optional)
+- List of directories to search for additional files and scripts.
+
+  Example:
+  ```json
+  {
+    "search_path": ["/home/user", "/tmp"]
+  }
+  ```
+
+### _"shadow_password":_ (optional)
+- Contains encrypted root password <encrypted password here>.
+- Short form of:
+  ```json
+  {
+    "password": {
+                  "crypted": true,
+                  "text": "<encrypted password here>"
+                }
+  }
+  ```
+
+### _"ui":_ (optional)
+- Installer will show UI for progress status if it set to true.
+ Or logging output will be printed to console - default behavior.
+  - **Boolean:** _true_ or _false_
+  - **Default value:** _false_
+
+   Example:
+   ```json
+   {
+     "ui": true
+   }
+   ```
+
+### _"linux_flavor":_ (optional)
+- Contains the flavor of linux to install, if multiple linux flavors
+ are present in _"packages"_ or _"packagelist_file"_
+  - **Acceptable values:** _"linux"_, _"linux-esx"_, _"linux-rt"_, _"linux-aws"_, and _"linux-secure"_
+
+  Example:
+  ```json
+  {
+    "linux_flavor": "linux-esx"
+  }
+  ```
+
+### _"photon_docker_image":_ (optional)
+- Contains the docker image <name:tag>
+ are present in _"packages"_ or _"packagelist_file"_
+  - **Acceptable values:** _"photon:1.0"_, _"photon:2.0"_, _"photon:3.0"_, _"photon:4.0"_, _"photon:latest"_ etc.
+  - **Default value:** _"photon:latest"_
+
+  Example:
+  ```json
+  {
+    "photon_docker_image": "photon:4.0"
+  }
+  ```
+
+For reference, look at [sample_ks.cfg](../sample_ks/sample_ks.cfg) file
diff --git a/docs/ui_config.md b/docs/ui_config.md
new file mode 100644
index 0000000..dc8e363
--- /dev/null
+++ b/docs/ui_config.md
@@ -0,0 +1,19 @@
+# What is UI config
+
+UI config is a json format file with the following possible parameters:
+
+**Note:** All top level keys must be optional.
+
+### "download_screen" (depends on _"network_screen"_)
+- Used to show a window where user can input a custom URL from
+  which a file can be downloaded and placed in a custom location
+  in the installed system.
+
+  - _"title"_ (required)
+    - A short title to identify this screen
+  - _"intro"_ (required)
+    - An brief 2 line intro of what URL you are requesting the
+      user to input
+  - _"destination"_ (required)
+    - String: Path to where in the installed system you would
+              like to see this file
diff --git a/photon_installer/generate_initrd.sh b/photon_installer/generate_initrd.sh
index cdf2eda..e18a488 100755
--- a/photon_installer/generate_initrd.sh
+++ b/photon_installer/generate_initrd.sh
@@ -66,7 +66,7 @@ rm -rf ${INITRD}/var/cache/tdnf
 mv ${INITRD}/boot ${WORKINGDIR}/
 
 mkdir -p $INITRD/installer
-cp $SCRIPT_PATH/sample_ui.cfg ${INITRD}/installer
+cp $SCRIPT_PATH/../sample_ks/sample_ui.cfg ${INITRD}/installer
 mv ${WORKINGDIR}/EULA.txt ${INITRD}/installer
 
 # TODO: change minimal to custom.json
diff --git a/photon_installer/isoBuilder.py b/photon_installer/isoBuilder.py
index 4bec77c..90ed1cd 100755
--- a/photon_installer/isoBuilder.py
+++ b/photon_installer/isoBuilder.py
@@ -272,7 +272,7 @@ def main():
     parser.add_argument("-c", "--custom-initrd-pkgs", dest="custom_initrd_pkgs", default=None, help="optional parameter to provide cutom initrd pkg list file.")
     parser.add_argument("-r", "--additional_repos", action="append", default=None, help="<Optional> Pass repo file as input to download rpms from external repo")
     parser.add_argument("-p", "--custom-packages-json", dest="custom_packages_json", default="")
-    parser.add_argument("-k", "--kickstart-path", dest="kickstart_path", default=f"{os.path.dirname(__file__)}/sample_ks.cfg")
+    parser.add_argument("-k", "--kickstart-path", dest="kickstart_path", default=f"{os.path.dirname(__file__)}/../sample_ks/sample_ks.cfg")
     parser.add_argument("-b", "--boot-cmdline-param", dest="boot_cmdline_param", default="")
 
     options = parser.parse_args()
diff --git a/photon_installer/ks_config.txt b/photon_installer/ks_config.txt
index 9f8010c..55850e5 100644
--- a/photon_installer/ks_config.txt
+++ b/photon_installer/ks_config.txt
@@ -1,413 +1 @@
-/*
- * Copyright © 2020 VMware, Inc.
- * SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-only
- */
-Ways to provide Kickstart path:
-
-1. Remote kickstart:-
-
-        ks=http://<kickstart-link>
-
-2. Kickstart from cdrom attched with iso:
-
-	ks=cdrom:/isolinux/sample_ks.cfg
-
-3. Secondary Device Kickstart
-
-	ks=<device-path>:<path-referential-to-device>
-	Ex- ks=/dev/sr1:/isolinux/sample_ks.cfg
-
-Kickstart config file is a json format with following possible parameters:
-
-"additional_files": (optional)
-	Contains list of pairs { source file (or directory), destination file
-	(or directory) } to copy to the target system. Source file
-	(directory) will be looked up in "search_path" list.
-	Example: { "additional_files": [
-		{"resizefs.sh": "/usr/local/bin/resizefs.sh"},
-		{"resizefs.service": "/lib/systemd/system/resizefs.service"}]}
-
-"additional_packages" same as "packages"
-
-"additional_rpms_path" (optional)
-	Provide a path containing additional RPMS that are to be bundled into
-	the image.
-
-"arch" (optional)
-	Target system architecture. Should be set if target architecture is
-	different from host one, for instance x86_64 machine building RPi
-	image.
-	Acceptable values are: "x86_64", "aarch64"
-	Default value: autodetected host architecture
-	Example: { "arch": "aarch64" }
-
-"bootmode" (optional)
-	Sets the boot type to suppot: EFI, BIOS or both.
-	Acceptable values are: "bios", "efi", "dualboot"
-	"bios" will add special partition (very first) for first stage grub.
-	"efi" will add ESP (Efi Special Partition), format is as FAT and copy
-	there EFI binaries including grub.efi
-	"dualboot" will add two extra partitions for "bios" and "efi" modes.
-	This target will support both modes that can be switched in bios
-	settings without extra actions in the OS.
-	Default value: "dualboot" for x86_64 and "efi" for aarch64
-	Example: { "bootmode": "bios" }
-
-"disk" (required)
-	Target"s disk device file path to install into, such as "/dev/sda".
-	Loop device is also supported.
-	Example: { "disk": "/dev/sdb" }
-	/dev/disk/by-path is also supported.
-	Example: { "disk": "/dev/disk/by-path/pci-0000:03:00.0-scsi-0:0:1:0" }
-
-"eject_cdrom" (optional)
-	Eject or not cdrom after installation completed.
-	Boolean: true or false
-	Default value: true
-	Example: { "eject_cdrom": false }
-
-"hostname" (optional)
-	Set target host name.
-	Default value: "photon-<randomized string>"
-	Example: { "hostname": "photon-machine" }
-
-"live" (optional)
-	Should be set to flase if target system will not be run on
-	host machine. When it set to false, installer will not add EFI boot
-	entries, and will not generate unique machine-id.
-	Default value: false if "disk" is /dev/loop and true otherwise.
-	Example: { "live": false }
-
-"log_level" (optional)
-	Set installer logging level.
-	Acceptable values are: "error", "warning", "info", "debug"
-	Default value: "info"
-	Example: { "log_level": "debug" }
-
-"ostree" (optional)
-        Atomic flavour of Photon OS.
-        "default_repo" (required)
-                 Define the type of repo data used for installing the OS
-                 There are two type: 1. Default Repo(comes with ISO) 2. Custom Repo (Remote server)
-                 Boolean: true or false
-                   where true : Default Repo is selected
-                         false: Custom Repo is selected
-                 Default value: true
-        Example: { "ostree": {"default_repo": true}}
-        "repo_url" (Required, Only If Custom Repo is selected)
-                 Supported Value: Valid "repo" URL of remote server where repo data exists
-        "repo_ref" (Required, Only If Custom Repo is selected)
-                 Supported Value: Valid "ref" path which was mentioned for
-                                  creation of Base Tree on remote server
-        Example: { "ostree": {
-                              "default_repo": false,
-                              "repo_url": "http://<ip>:<port>/repo",
-                              "repo_ref": "photon/3.0/x86_64/minimal"
-                             }
-                 }
-
-"packagelist_file" (optional if "packages" set)
-	Contains file name which has list of packages to install.
-	Example: { "packagelist_file": "packages_minimal.json" }
-
-"packages" (optional if "packagelist_file" set)
-	Contains list of packages to install.
-	Example: { "packages": ["minimal", "linux", "initramfs"] }
-
-"partition_type" (optional)
-	Set partition table type. Supported values are: "gpt", "msdos".
-	Default value: "gpt"
-	Example: { "partition_type": "msdos" }
-
-"partitions" (optional)
-	Contains list of partitions to create.
-	Each partition is a dictionary of the following items:
-	"filesystem" (required)
-		Filesystem type. Supported values are: "swap", "ext4", "vfat", "xfs", "btrfs".
-	"disk" (optional if single disk device is available,
-                required if multiple disk devices are available)
-               Target disk device will have the defined partition
-               Supported values are:
-               "/dev/loop": loop devices
-               "/dev/sdX" : scsi drives based devices
-               "/dev/hdX" : IDE drives based devices
-	"mountpoint" (required for non "swap" partitions)
-		Mount point for the partition.
-	"size" (required)
-		Size of the partition in MB. If 0 then partition is considered
-		as expansible to fill rest of the disk. Only one expansible
-		partition is allowed.
-	"mkfs_options" (optional)
-		Additional parameters for the mkfs command as a string
-	"fs_options" (optional)
-		fs options to be passed to mount command as a string
-                ex - "fs_options": "nodev,noexec,nosuid"
-	"btrfs" (optional)
-		Creates btrfs volumes and subvolumes.
-		Value is a dictionary with 1 required and 1 optional key.
-		"label" (optional)
-			Name of the parent volume label.
-		"subvols" (optional)
-			Subvolumes inside parent volume.
-		Ex -
-		"disk": "/dev/sda",
-		"partitions": [
-                        {"mountpoint": "/", "size": 0, "filesystem": "btrfs"}]
-		Ex to create subvols -
-		{ "partitions" :
-			[{ "mountpoint": "/", "size": 2048, "filesystem": "btrfs",
-			      "btrfs" :
-				{
-					"label" : "main",
-					"subvols" : [
-						{"name": "rootfs", "mountpoint": "/root"},
-						{"name": "home", "mountpoint": "/home", "subvols": [{"name": "dir1", "mountpoint": "/dir1"}]}
-					]
-				}
-			}]
-		}
-	"lvm" (optional)
-		Will logical volume (LVM) for this partition.
-		Value is a dictionary with 2 required keys:
-		"vg_name" (required)
-			Name of a virtual group to put current partition into.
-			Several partitions may have same "vg_name"
-		"lv_name" (required)
-			Unique logical volume name of the partition.
-	Default value: [{"mountpoint": "/", "size": 0, "filesystem": "ext4"}]
-	Example: { "partitions" : [
-			{ "mountpoint": "/", "size": 0, "filesystem": "ext4",
-			  "lvm": {
-				   "vg_name": "VirtualGroup1",
-				   "lv_name": "root"
-				 }
-			},
-			{
-				"mountpoint": "/boot/efi",
-				"size": 12,
-				"filesystem": "vfat",
-				"fs_options": "-n EFI"
-			},
-			{"size": 128, "filesystem": "swap"} ] }
-	Example: Multiple Disk device partition table
-		{ "partitions": [
-				{
-					"disk": "/dev/sda",
-					"mountpoint": "/",
-					"size": 0,
-					"filesystem": "ext4"
-				},
-				{
-					"disk": "/dev/sdb",
-					"mountpoint": "/sdb",
-					"size": 0,
-					"filesystem": "ext4"
-				},
-				{
-					"disk": "/dev/sdc",
-					"mountpoint": "/sdc",
-					"size": 0,
-					"filesystem": "ext4"
-				},
-			]
-		}
-	"ab": (optional)
-		This feature enables the system to create a shadow partition
-		(snapshot of user-defined partition) of a user defined partition.
-		This is required to support the system upgrade/rollback functionality via
-		AB System Upgrade mechanism.
-		Acceptable values are: true, false
-		Default value: false
-		Example: In given the partition table below, the "/" partition will have
-		a shadow partition but the "/sda" partition will not have a shadow partition:
-			{ "partitions": [
-					{
-						"disk": "/dev/sda",
-						"mountpoint": "/",
-						"size": 0,
-						"filesystem": "ext4",
-						"ab": true
-					},
-					{
-						"disk": "/dev/sda",
-						"mountpoint": "/sda",
-						"size": 100,
-						"filesystem": "ext4"
-					}
-				]
-			}
-
-"network" (optional)
-    Used to configure network in live/installed system.
-
-    Set  "version": "2" or the legacy config will be used, see below.
-    
-    The syntax roughly follows the cloud-init or netplan configuration,
-    but not all options are supported.
-    
-    "hostname": set the host name.
-
-    "ethernets": Settings for ethernet interfaces. Each interface has an 'id',
-    which can be any name which may be refrenced for examplev for VLANs. Can
-    be the interface name.
-    
-    Within any 'id':
-    
-    "match" : set a way to match this interface. Can be 'name' or 'macaddress'.
-
-    "dhcp4" : boolean, set to true or false
-    
-    "dhcp6" : boolean, set to true or false
-
-    "accept-ra" : boolean, set to true or false. Whether to accept
-    Router Advertisement for IPv6.
-
-    "addresses" : a list of ip addresses (IPv4 or IPv6) with cidr netmask.
-    
-    "gateway" : the default gateway.
-    
-    "nameservers" : a dictionary with "addresses" containing a list of name servers,
-    and "search" with a list of search domains.
-
-    "vlans": Settings for VLAN interfaces. Similar to "ethernets" above,
-    but with these additional required settings:
-    
-    "id" : the VLAN id (integer in the range 1..4094)
-
-    "link" : the id of the ethernet interface to use, from the "ethernets"
-    configured.
-
-    Example:
-
-    "network":{
-        "version": "2",
-        "hostname" : "photon-machine",
-        "ethernets": {
-            "id0":{
-                "match":{
-                    "name" : "eth0"
-                },
-                "dhcp4" : false,
-                "addresses":[
-                    "192.168.2.58/24"
-                ],
-                "gateway": "192.168.2.254",
-                "nameservers":{
-                    "addresses" : ["8.8.8.8", "8.8.4.4"],
-                    "search" : ["vmware.com", "eng.vmware.com"]
-                }
-            }
-        },
-        "vlans": {
-            "vlan0": {
-                "id": 100,
-                "link": "id0",
-                "addresses":[
-                    "192.168.100.58/24"
-                ]
-            }
-        }
-    }
-
-    Legacy network configuration:
-
-	"type" (required)
-		String; must be one of dhcp/static/vlan. Indicates how the network
-		is being configured.
-	"hostname" (optional; when type == dhcp)
-		String; DHCP client hostname
-	"ip_addr" (required; when type == static)
-		IP String; IP address to be configured
-	"netmask" (required; when type == static)
-		IP String; Netmask to be configured
-	"gateway" (required; when type == static)
-		IP String; Gateway IP address to be configured
-	"nameserver" (required; when type == static)
-		IP String; Name server IP address to be configured
-	"vlan_id" (required; when type == vlan)
-		ID String. (1-4094); VLAN ID number expressed as string
-
-"password" (optional)
-	Set root password. It is dictionary of the following items:
-	"text" (required) password plain text ("crypted" : false)
-		of encrypted ("crypted": true)
-	"crypted" (required) Hint on how to interpret "text" content.
-	"age" (optional) Set password expiration date. If not set, then
-		used Photon OS default password aging value.
-		Value: integer. Meanings:
-		- Any positive number - password will be expired in
-		  so many days from today.
-		- Zero (0) - marks password as already expired. root
-		  will be asked to change current password during the
-		  first login.
-		- Minus one (-1) - removes root password expiration date.
-	Default value: { "crypted": true, "text": "*"} }
-	    which means root is not allowed to login.
-	Example: { "password": {
-			"crypted": false,
-			"text": "changeme",
-			"age": 0 } }
-
-"postinstall" (optional)
-	Contains list of lines to be executed as a single script on
-	the target after installation.
-	Example: { "postinstall": [
-			"#!/bin/sh",
-			"echo \"Hello World\" > /etc/postinstall" ] }
-"postinstallscripts" (optional)
-	Contains list of scripts to execute on the target after installation.
-	Scripts will be looked up in "search_path" list.
-	Example: { "postinstallscripts": ["rpi3-custom-patch.sh"] }
-
-"preinstall" (optional)
-	Contains list of lines to be executed as a single script on
-	the target before installation starts.
-	if ks file defines any value($VALUE) that need to be populated dynamically
-	during runtime then it should be determined and exported in preinstall script.
-	Example: {
-			"disk": "$DISK"
-			"preinstall": [
-                                "#!/bin/sh",
-                                "ondisk=$(ls -lh /dev/disk/by-path/ | grep 'scsi-0:0:1:0' | cut -d' ' -f 9)",
-                                "export DISK=\"/dev/disk/by-path/$ondisk\""
-                                ] }
-"preinstallscripts" (optional)
-	Contains list of scripts to execute on the target before installation starts.
-	Scripts will be looked up in "search_path" list.
-	Example: { "preinstallscripts": ["find_disk.sh"] }
-
-"public_key" (optional)
-	To inject entry to authorized_keys as a string. Setting this variable
-	enables root login in sshd config.
-
-"search_path" (optional)
-	List of directories to search for additional files and scripts.
-	Example: { "search_path": ["/home/user", "/tmp"] }
-
-"shadow_password" (optional)
-	Contains encrypted root password <encrypted password here>.
-	Short form of: { "password": {
-				"crypted": true,
-				"text": "<encrypted password here>"} }
-
-"ui" (optional)
-	Installer will show UI for progress status if it set to true.
-	Or logging output will be printed to console - default behavior.
-	Boolean: true or false
-	Default value: false
-	Example: { "ui": true }
-
-"linux_flavor" (optional)
-	Contains the flavor of linux to install, if multiple linux flavors
-	are present in "packages" or "packagelist_file"
-	Acceptable values are: "linux", "linux-esx", "linux-rt", "linux-aws", and "linux-secure"
-	Example: { "linux_flavor": "linux-esx" }
-
-"photon_docker_image" (optional)
-	Contains the docker image <name:tag>
-	are present in "packages" or "packagelist_file"
-	Acceptable values are: "photon:1.0", "photon:2.0", "photon:3.0", "photon" etc.
-        Default value: "photon:latest"
-	Example: { "photon_docker_image": "photon:3.0" }
-
-For reference, look at "sample_ks.cfg" file
+Documentation has been moved to https://github.com/vmware/photon-os-installer/docs/ks_config.md
diff --git a/photon_installer/sample_ks.cfg b/photon_installer/sample_ks.cfg
index 2334718..ec66c01 100644
--- a/photon_installer/sample_ks.cfg
+++ b/photon_installer/sample_ks.cfg
@@ -1,24 +1 @@
-{
-    "hostname": "photon-machine",
-    "password":
-        {
-            "crypted": false,
-            "text": "changeme"
-        },
-    "disk": "/dev/sda",
-    "partitions": [
-                        {"mountpoint": "/", "size": 0, "filesystem": "ext4"},
-                        {"mountpoint": "/boot", "size": 128, "filesystem": "ext4"},
-                        {"mountpoint": "/root", "size": 128, "filesystem": "ext4"},
-                        {"size": 128, "filesystem": "swap"}
-                    ],
-    "packagelist_file": "packages_minimal.json",
-    "additional_packages": ["vim"],
-    "postinstall": [
-                		"#!/bin/sh",
-                    	"echo \"Hello World\" > /etc/postinstall"
-                   ],
-    "public_key": "<ssh-key-here>",
-    "linux_flavor": "linux",
-    "photon_docker_image": "photon:3.0"
-}
+This file has been moved to https://github.com/vmware/photon-os-installer/sample_ks/sample_ks.cfg
diff --git a/photon_installer/sample_ui.cfg b/photon_installer/sample_ui.cfg
index 089ffe7..816db8a 100644
--- a/photon_installer/sample_ui.cfg
+++ b/photon_installer/sample_ui.cfg
@@ -1,9 +1 @@
-{
-    "license_display_title": "Licence Display Title",
-    "eula_file_path": null,
-	"download_screen": {
-		"title": "[!] Download File from URL Page",
-		"intro": "This is a short description on what this window is doing",
-		"destination": "/etc/config/config.file"
-	}
-}
+This file has been moved to https://github.com/vmware/photon-os-installer/sample_ks/sample_ui.cfg
diff --git a/photon_installer/ui_config.txt b/photon_installer/ui_config.txt
index 939814c..ae39b68 100644
--- a/photon_installer/ui_config.txt
+++ b/photon_installer/ui_config.txt
@@ -1,17 +1 @@
-UI config file is a json format with following possible parameters:
-
-Note: All top level keys must be optional.
-
-"download_screen" (depends on "network_screen")
-	Used to show a window where user can input a custom URL from
-	which a file can be downloaded and placed in a custom location
-	in the installed system.
-
-	"title" (required)
-		A short title to identify this screen
-	"intro" (required)
-		An brief 2 line intro of what URL you are requesting the
-		user to input
-	"destination" (required)
-		String; Path to where in the installed system you would
-		like to see this file
+Documentation has been moved to https://github.com/vmware/photon-os-installer/docs/ui_config.md
diff --git a/sample_ks/sample_ks.cfg b/sample_ks/sample_ks.cfg
new file mode 100644
index 0000000..b7c4ade
--- /dev/null
+++ b/sample_ks/sample_ks.cfg
@@ -0,0 +1,24 @@
+{
+    "hostname": "photon-machine",
+    "password":
+        {
+            "crypted": false,
+            "text": "changeme"
+        },
+    "disk": "/dev/sda",
+    "partitions": [
+                        {"mountpoint": "/", "size": 0, "filesystem": "ext4"},
+                        {"mountpoint": "/boot", "size": 128, "filesystem": "ext4"},
+                        {"mountpoint": "/root", "size": 128, "filesystem": "ext4"},
+                        {"size": 128, "filesystem": "swap"}
+                    ],
+    "packagelist_file": "packages_minimal.json",
+    "additional_packages": ["vim"],
+    "postinstall": [
+                   	"#!/bin/sh",
+                    	"echo \"Hello World\" > /etc/postinstall"
+                   ],
+    "public_key": "<ssh-key-here>",
+    "linux_flavor": "linux",
+    "photon_docker_image": "photon:4.0"
+}
diff --git a/sample_ks/sample_ks_ostree_client_from_default.cfg b/sample_ks/sample_ks_ostree_client_from_default.cfg
new file mode 100644
index 0000000..fa09c6b
--- /dev/null
+++ b/sample_ks/sample_ks_ostree_client_from_default.cfg
@@ -0,0 +1,12 @@
+{
+  "hostname": "photon-machine",
+  "password": {
+    "crypted": false,
+    "text": "changeme"
+  },
+  "disk": "/dev/sda",
+  "ostree": {
+    "default_repo": true
+  },
+  "photon_docker_image": "photon:4.0"
+}
diff --git a/sample_ks/sample_ks_ostree_client_from_server.cfg b/sample_ks/sample_ks_ostree_client_from_server.cfg
new file mode 100644
index 0000000..8b61f77
--- /dev/null
+++ b/sample_ks/sample_ks_ostree_client_from_server.cfg
@@ -0,0 +1,15 @@
+{
+    "hostname": "photon-machine",
+    "password":
+        {
+            "crypted": false,
+            "text": "changeme"
+        },
+    "disk": "/dev/sda",
+    "ostree": {
+                "default_repo": false,
+                "repo_url": "http://127.0.0.0:8000/repo",
+                "repo_ref": "photon/3.0/x86_64/minimal"
+              },
+    "photon_docker_image": "photon:4.0"
+}
diff --git a/sample_ks/sample_ks_preinstall_postinstall.cfg b/sample_ks/sample_ks_preinstall_postinstall.cfg
new file mode 100644
index 0000000..faac946
--- /dev/null
+++ b/sample_ks/sample_ks_preinstall_postinstall.cfg
@@ -0,0 +1,28 @@
+{
+  "hostname": "photon-machine",
+  "password": {
+    "crypted": false,
+    "text": "$PASSWD"
+  },
+  "disk": "$DISK",
+  "packagelist_file": "packages_minimal.json",
+  "additional_packages": [
+    "vim"
+  ],
+  "preinstall": [
+    "#!/bin/sh",
+    "ondisk=$(ls -lh /dev/disk/by-path/ | grep 'scsi-0:0:1:0' | cut -d' ' -f 9)",
+    "export DISK=\"/dev/disk/by-path/$ondisk\"",
+    "export KERNEL=\"linux-esx\"",
+    "export PASSWD=\"Ph0t0n0s!\""
+  ],
+  "postinstall": [
+    "#!/bin/sh",
+    "echo \"Hello World\" > /etc/postinstall"
+  ],
+  "public_key": "<ssh-key-here>",
+  "linux_flavor": "$KERNEL",
+  "photon_docker_image": "photon:4.0",
+  "photon_release_version": "4.0",
+  "ui": true
+}
diff --git a/sample_ks/sample_ks_preinstallscripts_postinstallscripts.cfg b/sample_ks/sample_ks_preinstallscripts_postinstallscripts.cfg
new file mode 100644
index 0000000..c21563a
--- /dev/null
+++ b/sample_ks/sample_ks_preinstallscripts_postinstallscripts.cfg
@@ -0,0 +1,25 @@
+{
+  "hostname": "photon-machine",
+  "password": {
+    "crypted": false,
+    "text": "changeme"
+  },
+  "disk": "$DISK",
+  "packagelist_file": "packages_minimal.json",
+  "additional_packages": [
+    "vim"
+  ],
+  "search_path": [
+    "/mnt/media"
+  ],
+  "preinstallscripts": [
+    "pre_test.sh"
+  ],
+  "postinstallscripts": [
+    "post_test.sh"
+  ],
+  "public_key": "<ssh-key-here>",
+  "linux_flavor": "$KERNEL",
+  "photon_docker_image": "photon:4.0",
+  "ui": true
+}
diff --git a/sample_ks/sample_ui.cfg b/sample_ks/sample_ui.cfg
new file mode 100644
index 0000000..089ffe7
--- /dev/null
+++ b/sample_ks/sample_ui.cfg
@@ -0,0 +1,9 @@
+{
+    "license_display_title": "Licence Display Title",
+    "eula_file_path": null,
+	"download_screen": {
+		"title": "[!] Download File from URL Page",
+		"intro": "This is a short description on what this window is doing",
+		"destination": "/etc/config/config.file"
+	}
+}
-- 
2.23.1

