diff --git a/jdk/src/share/classes/sun/security/ssl/TrustStoreManager.java b/jdk/src/share/classes/sun/security/ssl/TrustStoreManager.java
index e7b4763d..5e9d1f77 100644
--- a/jdk/src/share/classes/sun/security/ssl/TrustStoreManager.java
+++ b/jdk/src/share/classes/sun/security/ssl/TrustStoreManager.java
@@ -72,6 +72,10 @@ final class TrustStoreManager {
      */
     private static final class TrustStoreDescriptor {
         private static final String fileSep = File.separator;
+		/* Check system cacerts DB first; /etc/pki/java/cacerts */
+		private static final String systemCacertsPath =
+				fileSep + "etc" + fileSep + "pki" + fileSep +"java" +
+				fileSep + "cacerts";
         private static final String defaultStorePath =
                 GetPropertyAction.privilegedGetProperty("java.home") +
                 fileSep + "lib" + fileSep + "security";
@@ -129,8 +133,8 @@ final class TrustStoreManager {
                 @Override
                 public TrustStoreDescriptor run() {
                     // Get the system properties for trust store.
-                    String storePropName = System.getProperty(
-                            "javax.net.ssl.trustStore", jsseDefaultStore);
+                    String storePropName1 = System.getProperty(
+                            "javax.net.ssl.trustStore", systemCacertsPath);
                     String storePropType = System.getProperty(
                             "javax.net.ssl.trustStoreType",
                             KeyStore.getDefaultType());
@@ -142,30 +146,36 @@ final class TrustStoreManager {
                     String temporaryName = "";
                     File temporaryFile = null;
                     long temporaryTime = 0L;
-                    if (!"NONE".equals(storePropName)) {
-                        String[] fileNames =
-                                new String[] {storePropName, defaultStore};
-                        for (String fileName : fileNames) {
-                            File f = new File(fileName);
-                            if (f.isFile() && f.canRead()) {
-                                temporaryName = fileName;;
-                                temporaryFile = f;
-                                temporaryTime = f.lastModified();
-
-                                break;
-                            }
-
-                            // Not break, the file is inaccessible.
-                            if (SSLLogger.isOn &&
-                                    SSLLogger.isOn("trustmanager")) {
-                                SSLLogger.fine(
-                                        "Inaccessible trust store: " +
-                                        storePropName);
-                            }
-                        }
-                    } else {
-                        temporaryName = storePropName;
-                    }
+                    if (!"NONE".equals(storePropName1)) {
+                           String storePropName2 = System.getProperty(
+                            "javax.net.ssl.trustStore", jsseDefaultStore);
+                                               if (!"NONE".equals(storePropName2)) {
+                                                               String[] fileNames =
+                                                                               new String[] {storePropName2, defaultStore};
+                                                               for (String fileName : fileNames) {
+                                                                       File f = new File(fileName);
+                                                                       if (f.isFile() && f.canRead()) {
+                                                                               temporaryName = fileName;
+                                                                               temporaryFile = f;
+                                                                               temporaryTime = f.lastModified();
+
+                                                                               break;
+                                                                       }
+
+                                                                       // Not break, the file is inaccessible.
+                                                                       if (SSLLogger.isOn &&
+                                                                                       SSLLogger.isOn("trustmanager")) {
+                                                                               SSLLogger.fine(
+                                                                                       "Inaccessible trust store: " +
+                                                                                       storePropName2);
+                                                                       }
+                                                               }
+                                                       } else {
+                                                               temporaryName = storePropName2;
+                                                       }
+                                       } else {
+                        temporaryName = storePropName1;
+                                       }
 
                     return new TrustStoreDescriptor(
                             temporaryName, storePropType, storePropProvider,
diff --git a/jdk/src/share/classes/sun/security/tools/KeyStoreUtil.java b/jdk/src/share/classes/sun/security/tools/KeyStoreUtil.java
index fcc77786..60dbb2f1 100644
--- a/jdk/src/share/classes/sun/security/tools/KeyStoreUtil.java
+++ b/jdk/src/share/classes/sun/security/tools/KeyStoreUtil.java
@@ -103,9 +103,14 @@ public class KeyStoreUtil {
         throws Exception
     {
         String sep = File.separator;
-        File file = new File(System.getProperty("java.home") + sep
-                             + "lib" + sep + "security" + sep
-                             + "cacerts");
+        /* Check system cacerts DB first; /etc/pki/java/cacerts */
+        File file = new File(sep + "etc" + sep + "pki" + sep
+                             + "java" + sep + "cacerts");
+        if (!file.exists()) {
+            file = new File(System.getProperty("java.home") + sep
+                            + "lib" + sep + "security" + sep
+                            + "cacerts");
+        }
         if (!file.exists()) {
             return null;
         }
