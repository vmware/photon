From e4262558a10e4470dab84d50b5f7d8d4121e8d1d Mon Sep 17 00:00:00 2001
From: Kumar Kaushik <kaushikk@vmware.com>
Date: Mon, 12 Feb 2018 20:03:44 -0800
Subject: [PATCH] Maintaining internal library instanse state for API safety

Change-Id: Icf1d75eaba6d62c3486653ffa1ae7528ced620e3
---
 common/sockinterface.c              |  88 +++++++++++++++--
 include/public/vmrest.h             |   1 +
 include/vmrestcommon.h              |  16 ++-
 include/vmsock.h                    |  39 ++++++--
 server/restengine/defines.h         |  16 ++-
 server/restengine/httpAllocStruct.c |   2 +
 server/restengine/httpMain.c        |  39 +++++---
 server/restengine/libmain.c         | 142 ++++++++++++++++++++-------
 transport/api/api.c                 |  31 +++++-
 transport/posix/libmain.c           |   5 +-
 transport/posix/prototypes.h        |  11 ++-
 transport/posix/socket.c            | 187 +++++++++++++++++++-----------------
 12 files changed, 414 insertions(+), 163 deletions(-)

diff --git a/common/sockinterface.c b/common/sockinterface.c
index 9e7d404..f737f78 100644
--- a/common/sockinterface.c
+++ b/common/sockinterface.c
@@ -71,6 +71,40 @@ VmRESTInitProtocolServer(
     )
 {
     DWORD                            dwError = REST_ENGINE_SUCCESS;
+
+    if (!pRESTHandle)
+    {
+        VMREST_LOG_ERROR(pRESTHandle,"%s","Invalid REST config");
+        dwError = REST_ERROR_INVALID_HANDLER;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
+    /**** Init Logging ****/
+    dwError = VmRESTLogInitialize(
+                  pRESTHandle
+                  );
+    BAIL_ON_VMREST_ERROR(dwError);
+
+    /**** Init Transport ****/
+    dwError = VmwSockInitialize(pRESTHandle);
+    BAIL_ON_VMREST_ERROR(dwError);
+
+cleanup:
+
+    return dwError;
+
+error:
+
+    goto cleanup;
+
+}
+
+DWORD
+VmRESTStartProtocolServer(
+    PVMREST_HANDLE                   pRESTHandle
+    )
+{
+    DWORD                            dwError = REST_ENGINE_SUCCESS;
     PVMREST_SOCK_CONTEXT             pSockContext = NULL;
     DWORD                            dwFlags = VM_SOCK_CREATE_FLAGS_REUSE_ADDR |
                                                VM_SOCK_CREATE_FLAGS_NON_BLOCK;
@@ -92,7 +126,7 @@ VmRESTInitProtocolServer(
 
     /**** Handle IPv4 case ****/
 
-    dwError = VmwSockOpenServer(
+    dwError = VmwSockStartServer(
                          pRESTHandle,
                         dwFlags | VM_SOCK_CREATE_FLAGS_TCP |
                                   VM_SOCK_CREATE_FLAGS_IPV4,
@@ -103,7 +137,7 @@ VmRESTInitProtocolServer(
 #ifdef AF_INET6
     /**** Handle IPv6 case ****/
 
-    dwError = VmwSockOpenServer(
+    dwError = VmwSockStartServer(
                    pRESTHandle,
                    dwFlags | VM_SOCK_CREATE_FLAGS_TCP |
                           VM_SOCK_CREATE_FLAGS_IPV6,
@@ -122,7 +156,7 @@ VmRESTInitProtocolServer(
                   );
     BAIL_ON_VMREST_ERROR(dwError);
 
-    dwError = VmwSockEventQueueAdd(
+    dwError = VmwSockAddEventToQueueInLock(
                   pRESTHandle,
                   pSockContext->pEventQueue,
                   pSockContext->pListenerTCP
@@ -132,7 +166,7 @@ VmRESTInitProtocolServer(
 #ifdef AF_INET6
     if (!bNoIpV6)
     {
-        dwError = VmwSockEventQueueAdd(
+        dwError = VmwSockAddEventToQueueInLock(
                       pRESTHandle,
                       pSockContext->pEventQueue,
                       pSockContext->pListenerTCP6
@@ -194,7 +228,7 @@ VmRESTInitProtocolServer(
 }
 
 uint32_t
-VmRESTShutdownProtocolServer(
+VmRESTStopProtocolServer(
     PVMREST_HANDLE                   pRESTHandle,
     uint32_t                         waitSecond
     )
@@ -221,6 +255,18 @@ VmRESTShutdownProtocolServer(
 
 }
 
+void
+VmRESTShutdownProtocolServer(
+    PVMREST_HANDLE                   pRESTHandle
+    )
+{
+    if (pRESTHandle)
+    {
+        VmwSockShutdown(pRESTHandle);
+        VmRESTLogTerminate(pRESTHandle);
+    }
+}
+
 static
 PVOID
 VmRESTSockWorkerThreadProc(
@@ -569,6 +615,34 @@ VmRESTSockContextFree(
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
+    if (!pRESTHandle || !pSockContext)
+    {
+        dwError = ERROR_INVALID_PARAMETER;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
+
+    if (pSockContext->pListenerTCP)
+    {
+        dwError = VmwSockDeleteEventFromQueue(
+                      pRESTHandle,
+                      pSockContext->pEventQueue,
+                      pSockContext->pListenerTCP
+                      );
+        BAIL_ON_VMREST_ERROR(dwError);
+        VmwSockClose( pRESTHandle, pSockContext->pListenerTCP);
+    }
+    if (pSockContext->pListenerTCP6)
+    {
+        dwError = VmwSockDeleteEventFromQueue(
+                      pRESTHandle,
+                      pSockContext->pEventQueue,
+                      pSockContext->pListenerTCP6
+                      );
+        BAIL_ON_VMREST_ERROR(dwError);
+        VmwSockClose( pRESTHandle, pSockContext->pListenerTCP6);
+    }
+
     if (pSockContext->pEventQueue)
     {
         dwError = VmwSockCloseEventQueue(pRESTHandle, pSockContext->pEventQueue, waitSecond);
@@ -577,14 +651,14 @@ VmRESTSockContextFree(
 
     if (pSockContext->pListenerTCP)
     {
-        VmwSockClose( pRESTHandle, pSockContext->pListenerTCP);
         VmwSockRelease( pRESTHandle, pSockContext->pListenerTCP);
     }
+
     if (pSockContext->pListenerTCP6)
     {
-        VmwSockClose( pRESTHandle, pSockContext->pListenerTCP6);
         VmwSockRelease( pRESTHandle, pSockContext->pListenerTCP6);
     }
+
     if (pSockContext->pWorkerThreads)
     {
         DWORD iThr = 0;
diff --git a/include/public/vmrest.h b/include/public/vmrest.h
index 5219952..6ebe3fd 100644
--- a/include/public/vmrest.h
+++ b/include/public/vmrest.h
@@ -46,6 +46,7 @@
 #define     REST_ERROR_BAD_CONFIG_FILE_PATH                110
 #define     REST_ERROR_PREV_INSTANCE_NOT_CLEAN             111
 #define     REST_ERROR_INVALID_HANDLER                     112
+#define     REST_ENGINE_ERROR_INVALID_PARAM                112
 #define     REST_ENGINE_SSL_CONFIG_FILE                    113
 #define     REST_ENGINE_NO_DEBUG_LOGGING                   114
 #define     REST_ENGINE_BAD_LOG_LEVEL                      115
diff --git a/include/vmrestcommon.h b/include/vmrestcommon.h
index d966f0e..3b7f17c 100644
--- a/include/vmrestcommon.h
+++ b/include/vmrestcommon.h
@@ -260,14 +260,14 @@ typedef struct _REST_ENG_GLOBALS *PREST_ENG_GLOBALS;
 typedef struct _VMREST_HANDLE
 {
     int                              debugLogLevel;
+    int                              instanceState;
     FILE*                            logFile;
     PVM_SOCK_PACKAGE                 pPackage;
     PVM_SOCK_SSL_INFO                pSSLInfo;
     PREST_PROCESSOR                  pHttpHandler;
     PREST_ENG_GLOBALS                pInstanceGlobal;
     PVMREST_SOCK_CONTEXT             pSockContext;
-    PVM_REST_CONFIG                  pRESTConfig;                     
-
+    PVM_REST_CONFIG                  pRESTConfig;
 } VMREST_HANDLE;
 
 typedef struct _VM_WORKER_THREAD_DATA
@@ -296,11 +296,21 @@ VmRESTInitProtocolServer(
     );
 
 DWORD
-VmRESTShutdownProtocolServer(
+VmRESTStartProtocolServer(
+    PVMREST_HANDLE                   pRESTHandle
+    );
+
+DWORD
+VmRESTStopProtocolServer(
     PVMREST_HANDLE                   pRESTHandle,
     uint32_t                         waitSecond
     );
 
+VOID
+VmRESTShutdownProtocolServer(
+    PVMREST_HANDLE                   pRESTHandle
+    );
+
 uint32_t
 VmRESTCommonWriteDataAtOnce(
     PVMREST_HANDLE                   pRESTHandle,
diff --git a/include/vmsock.h b/include/vmsock.h
index 7b60b29..5075aa7 100644
--- a/include/vmsock.h
+++ b/include/vmsock.h
@@ -87,7 +87,7 @@ VmwSockInitialize(
     );
 
 /**
- * @brief Opens a server socket
+ * @brief Starts a server socket
  *
  * @param[in] Handle to library instance.
  * @param[in]  dwFlags 32 bit flags defining socket creation preferences
@@ -96,7 +96,7 @@ VmwSockInitialize(
  * @return 0 on success
  */
 DWORD
-VmwSockOpenServer(
+VmwSockStartServer(
     PVMREST_HANDLE                   pRESTHandle,
     VM_SOCK_CREATE_FLAGS             dwFlags,
     PVM_SOCKET*                      ppSocket
@@ -117,7 +117,7 @@ VmwSockCreateEventQueue(
     );
 
 /**
- * @brief Adds a socket to the event queue
+ * @brief Add a socket to the event queue
  *
  * @param[in] Handle to library instance.
  * @param[in] pQueue  Pointer to Event queue
@@ -126,7 +126,23 @@ VmwSockCreateEventQueue(
  * @return 0 on success
  */
 DWORD
-VmwSockEventQueueAdd(
+VmwSockAddEventToQueueInLock(
+    PVMREST_HANDLE                   pRESTHandle,
+    PVM_SOCK_EVENT_QUEUE             pQueue,
+    PVM_SOCKET                       pSocket
+    );
+
+/**
+ * @brief Deletes a socket from the event queue
+ *
+ * @param[in] Handle to library instance.
+ * @param[in] pQueue  Pointer to Event queue
+ * @param[in] pSocket Pointer to Socket
+ *
+ * @return 0 on success
+ */
+DWORD
+VmwSockDeleteEventFromQueue(
     PVMREST_HANDLE                   pRESTHandle,
     PVM_SOCK_EVENT_QUEUE             pQueue,
     PVM_SOCKET                       pSocket
@@ -280,7 +296,7 @@ typedef enum
     VM_SOCK_TYPE_TCP_V6
 } VM_SOCK_TYPE;
 
-typedef DWORD (*PFN_OPEN_SERVER_SOCKET)(
+typedef DWORD (*PFN_START_SERVER_SOCKET)(
                     PVMREST_HANDLE       pRESTHandle,
                     VM_SOCK_CREATE_FLAGS dwFlags,
                     PVM_SOCKET*          ppSocket
@@ -291,7 +307,13 @@ typedef DWORD (*PFN_CREATE_EVENT_QUEUE)(
                     PVM_SOCK_EVENT_QUEUE* ppQueue
                     );
 
-typedef DWORD (*PFN_ADD_EVENT_QUEUE)(
+typedef DWORD (*PFN_ADD_EVENT_TO_QUEUE)(
+                    PVMREST_HANDLE       pRESTHandle,
+                    PVM_SOCK_EVENT_QUEUE pQueue,
+                    PVM_SOCKET           pSocket
+                    );
+
+typedef DWORD (*PFN_DELETE_EVENT_FROM_QUEUE)(
                     PVMREST_HANDLE       pRESTHandle,
                     PVM_SOCK_EVENT_QUEUE pQueue,
                     PVM_SOCKET           pSocket
@@ -359,9 +381,10 @@ typedef DWORD(*PFN_GET_PEER_INFO)(
 
 typedef struct _VM_SOCK_PACKAGE
 {
-    PFN_OPEN_SERVER_SOCKET              pfnOpenServerSocket;
+    PFN_START_SERVER_SOCKET             pfnStartServerSocket;
     PFN_CREATE_EVENT_QUEUE              pfnCreateEventQueue;
-    PFN_ADD_EVENT_QUEUE                 pfnAddEventQueue;
+    PFN_ADD_EVENT_TO_QUEUE              pfnAddEventToQueue;
+    PFN_DELETE_EVENT_FROM_QUEUE         pfnDeleteEventFromQueue;
     PFN_WAIT_FOR_EVENT                  pfnWaitForEvent;
     PFN_CLOSE_EVENT_QUEUE               pfnCloseEventQueue;
     PFN_READ                            pfnRead;
diff --git a/server/restengine/defines.h b/server/restengine/defines.h
index 380af9c..ec1e542 100644
--- a/server/restengine/defines.h
+++ b/server/restengine/defines.h
@@ -17,11 +17,12 @@ typedef void* (PFN_VMREST_THR_ROUTINE)(void*);
 
 /* HTTP protocol header defines */
 
-#define MAX_METHOD_LEN             10
-#define MAX_URI_LEN                10240
+#define MAX_METHOD_LEN              10
+#define MAX_URI_LEN                 10240
 #define MAX_VERSION_LEN             9
 #define MAX_STATUS_LEN              4
-#define MAX_REA_PHRASE_LEN         32
+#define MAX_REA_PHRASE_LEN          32
+#define MAX_STOP_WAIT_SECONDS       600
 #define HTTP_VER_LEN                8
 #define HTTP_CHUNK_DATA_MIN_LEN     3
 #define HTTP_CHUNKED_DATA_LEN       8
@@ -62,6 +63,15 @@ typedef enum _HTTP_PAYLOAD_TYPE
     HTTP_PAYLOAD_TRANSFER_ENCODING
 }HTTP_PAYLOAD_TYPE;
 
+typedef enum _VM_REST_INSTANCE_STATE
+{
+    VMREST_INSTANCE_UNINITIALIZED      = -1,
+    VMREST_INSTANCE_INITIALIZED        = 1,
+    VMREST_INSTANCE_STARTED            = 2,
+    VMREST_INSTANCE_STOPPED            = 3,
+    VMREST_INSTANCE_SHUTDOWN           = 4
+}VM_REST_INSTANCE_STATE;
+
 typedef enum _VM_REST_PROCESSING_STATE
 {
     PROCESS_INVALID              = -1,
diff --git a/server/restengine/httpAllocStruct.c b/server/restengine/httpAllocStruct.c
index 27aa9ed..18a016e 100644
--- a/server/restengine/httpAllocStruct.c
+++ b/server/restengine/httpAllocStruct.c
@@ -345,6 +345,8 @@ VmRESTAllocateHandle(
 
     pRESTHandle->pHttpHandler = NULL;
 
+    pRESTHandle->instanceState = VMREST_INSTANCE_UNINITIALIZED;
+
     *ppRESTHandle = pRESTHandle;
 
 cleanup:
diff --git a/server/restengine/httpMain.c b/server/restengine/httpMain.c
index 562a555..9f3afcd 100644
--- a/server/restengine/httpMain.c
+++ b/server/restengine/httpMain.c
@@ -23,7 +23,6 @@ VmHTTPInit(
 
     if (!pRESTHandle || !pConfig)
     {
-        VMREST_LOG_DEBUG(pRESTHandle,"%s","Invalid params");
         dwError = REST_ERROR_INVALID_CONFIG;
     }
     BAIL_ON_VMREST_ERROR(dwError);
@@ -41,21 +40,19 @@ VmHTTPInit(
                   );
     BAIL_ON_VMREST_ERROR(dwError);
 
-    pRESTHandle->debugLogLevel = pRESTHandle->pRESTConfig->debugLogLevel;
-
-    /**** Init the debug log ****/
-    dwError = VmRESTLogInitialize(
+    /**** Init logging and transport ****/
+    dwError = VmRESTInitProtocolServer(
                   pRESTHandle
                   );
     BAIL_ON_VMREST_ERROR(dwError);
 
-    /**** Init Transport ****/
-    dwError = VmwSockInitialize(pRESTHandle);
-    BAIL_ON_VMREST_ERROR(dwError);
+    pRESTHandle->debugLogLevel = pRESTHandle->pRESTConfig->debugLogLevel;
 
     /**** Update context Info for this lib instance ****/
     pRESTHandle->pInstanceGlobal->useEndPoint = 0;
 
+    VMREST_LOG_INFO(pRESTHandle,"%s","C-REST_ENGINE: Library initialized ...");
+
 cleanup:
 
     return dwError;
@@ -72,9 +69,13 @@ VmHTTPStart(
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
-    dwError = VmRESTInitProtocolServer(pRESTHandle);
+    dwError = VmRESTStartProtocolServer(
+                  pRESTHandle
+                  );
     BAIL_ON_VMREST_ERROR(dwError);
 
+    VMREST_LOG_INFO(pRESTHandle,"%s","C-REST_ENGINE: Library started ...");
+
 cleanup:
 
     return dwError;
@@ -132,14 +133,22 @@ VmHTTPStop(
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
-    VMREST_LOG_DEBUG(pRESTHandle,"%s","Shutting down rest engine ....");
-    dwError = VmRESTShutdownProtocolServer(pRESTHandle, waitSecond);
+    VMREST_LOG_INFO(pRESTHandle,"%s","C-REST_ENGINE: Stopping library ... No more requests will be accepted");
+
+    dwError = VmRESTStopProtocolServer(
+                  pRESTHandle, 
+                  waitSecond
+                  );
     BAIL_ON_VMREST_ERROR(dwError);
 
+    VMREST_LOG_INFO(pRESTHandle,"%s", "C-REST-ENGINE: Library stopped ...");
+
 cleanup:
-    VMREST_LOG_DEBUG(pRESTHandle,"Stop returning %u", dwError);
+
     return dwError;
 error:
+
+    VMREST_LOG_ERROR(pRESTHandle,"C-REST-ENGINE: Library stop failed ... Do not attempt shutdown, dwError = %u", dwError);
     goto cleanup;
 }
 
@@ -148,11 +157,13 @@ VmHTTPShutdown(
     PVMREST_HANDLE                  pRESTHandle
     )
 {
-    VmwSockShutdown(pRESTHandle);
+    VMREST_LOG_INFO(pRESTHandle,"%s","C-REST-ENGINE: Shutting down Library");
+    VmRESTShutdownProtocolServer(
+        pRESTHandle
+        );
 
     if (pRESTHandle)
     {
-        VmRESTLogTerminate(pRESTHandle);
         VmRESTFreeHandle(pRESTHandle);        
     }
 }
diff --git a/server/restengine/libmain.c b/server/restengine/libmain.c
index a7b85a1..3992b76 100644
--- a/server/restengine/libmain.c
+++ b/server/restengine/libmain.c
@@ -48,9 +48,9 @@ VmRESTInit(
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
     PVMREST_HANDLE                   pRESTHandle = NULL;
 
-    if (!ppRESTHandle)
+    if (!pConfig || !ppRESTHandle)
     {
-        dwError = REST_ERROR_INVALID_HANDLER;
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
     }
     BAIL_ON_VMREST_ERROR(dwError);
 
@@ -69,6 +69,8 @@ VmRESTInit(
                   );
     BAIL_ON_VMREST_ERROR(dwError);
 
+    pRESTHandle->instanceState = VMREST_INSTANCE_INITIALIZED;
+
     *ppRESTHandle = pRESTHandle;
 
 cleanup:
@@ -102,7 +104,7 @@ VmRESTSetSSLInfo(
 
     if (!pRESTHandle || !pDataBuffer || (bufferSize == 0) || (bufferSize > MAX_SSL_DATA_BUF_LEN) || (sslDataType < SSL_DATA_TYPE_KEY) || (sslDataType > SSL_DATA_TYPE_CERT))
     {
-        dwError = REST_ERROR_INVALID_HANDLER;
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
     }
     BAIL_ON_VMREST_ERROR(dwError);
 
@@ -177,9 +179,9 @@ VmRESTStart(
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
     int                              ret = 0;
 
-    if (!pRESTHandle)
+    if (!pRESTHandle || (pRESTHandle->instanceState != VMREST_INSTANCE_INITIALIZED))
     {
-        dwError = REST_ERROR_INVALID_REST_PROCESSER;
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
     }
     BAIL_ON_VMREST_ERROR(dwError);
 
@@ -218,9 +220,14 @@ VmRESTStart(
         BAIL_ON_VMREST_ERROR(dwError);
     }
 
+    pRESTHandle->instanceState = VMREST_INSTANCE_STARTED;
+
 cleanup:
+
     return dwError;
+
 error:
+
     goto cleanup;
 
 }
@@ -236,9 +243,9 @@ VmRESTRegisterHandler(
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
     PREST_PROCESSOR                  pzHandler = NULL;
 
-    if (!pHandler || !pRESTHandle)
+    if (!pHandler || !pRESTHandle || (pRESTHandle->instanceState != VMREST_INSTANCE_INITIALIZED))
     {
-        dwError = REST_ERROR_INVALID_REST_PROCESSER;
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
     }
     BAIL_ON_VMREST_ERROR(dwError);
 
@@ -292,6 +299,12 @@ VmRESTFindEndpoint(
     PREST_ENDPOINT                   temp = NULL;
     PREST_ENDPOINT                   pEndPoint = NULL;
 
+    if (!pRESTHandle || !pszEndpoint || !ppEndpoint || (pRESTHandle->instanceState == VMREST_INSTANCE_UNINITIALIZED) || (pRESTHandle->instanceState == VMREST_INSTANCE_SHUTDOWN))
+    {
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
     dwError = VmRestEngineGetEndPoint(
                   pRESTHandle,
                   (char*)pszEndpoint,
@@ -329,12 +342,18 @@ VmRESTFindEndpoint(
 uint32_t
 VmRESTUnRegisterHandler(
     PVMREST_HANDLE                   pRESTHandle,
-    char const*                      pzEndPointURI
+    char const*                      pcszEndPointURI
     )
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
-    if (!pzEndPointURI)
+    if (!pRESTHandle || !pcszEndPointURI || (pRESTHandle->instanceState != VMREST_INSTANCE_STOPPED))
+    {
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
+    if (!pcszEndPointURI)
     {
         /**** Interacting with HTTP directly ****/
         dwError = VmHTTPUnRegisterHandler(
@@ -346,7 +365,7 @@ VmRESTUnRegisterHandler(
         /**** Endpoint based library instance ****/
         dwError = VmRestEngineRemoveEndpoint(
                       pRESTHandle,
-                      pzEndPointURI
+                      pcszEndPointURI
                       );
     }
     BAIL_ON_VMREST_ERROR(dwError);
@@ -365,12 +384,14 @@ VmRESTStop(
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
-    if (!pRESTHandle)
+    if (!pRESTHandle || (waitSeconds > MAX_STOP_WAIT_SECONDS) || (pRESTHandle->instanceState != VMREST_INSTANCE_STARTED))
     {  
-        dwError = REST_ERROR_INVALID_HANDLER;
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
     }
     BAIL_ON_VMREST_ERROR(dwError);
 
+    pRESTHandle->instanceState = VMREST_INSTANCE_STOPPED;
+
     dwError = VmHTTPStop(
                   pRESTHandle,
                   waitSeconds
@@ -388,14 +409,18 @@ VmRESTShutdown(
     PVMREST_HANDLE                   pRESTHandle
     )
 {
-    if (pRESTHandle->pInstanceGlobal->useEndPoint == 1)
+    if (pRESTHandle && (pRESTHandle->instanceState == VMREST_INSTANCE_STOPPED))
     {
-        VmRestEngineShutdownEndPointRegistration(
-            pRESTHandle
-            );
+        pRESTHandle->instanceState = VMREST_INSTANCE_SHUTDOWN;
+        if (pRESTHandle->pInstanceGlobal->useEndPoint == 1)
+        {
+            VmRestEngineShutdownEndPointRegistration(
+                pRESTHandle
+                );
+        }
+        
+        VmHTTPShutdown(pRESTHandle);
     }
-
-    VmHTTPShutdown(pRESTHandle);
 }
 
 uint32_t
@@ -408,14 +433,28 @@ VmRESTGetData(
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
+    if (!pRESTHandle || (pRESTHandle->instanceState != VMREST_INSTANCE_STARTED))
+    {
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
     dwError = VmRESTGetHttpPayload(
                   pRESTHandle,
                   pRequest,
                   pBuffer,
                   bytesRead
                   );
+    BAIL_ON_VMREST_ERROR(dwError);
                   
+cleanup:
+
     return dwError;
+
+error:
+
+    goto cleanup;
+
 }
 
 /*** GetData Zero copy API ****/
@@ -427,14 +466,12 @@ VmRESTGetDataZC(
     uint32_t*                        nBytes
     )
 {
-
-
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
-    if (!pRESTHandle || !pRequest || !ppBuffer  || !nBytes)
+    if (!pRESTHandle || !pRequest || !ppBuffer  || !nBytes || (pRESTHandle->instanceState != VMREST_INSTANCE_STARTED))
     {
         VMREST_LOG_ERROR(pRESTHandle,"%s","Invalid params");
-        dwError = VMREST_HTTP_INVALID_PARAMS;
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
     }
     BAIL_ON_VMREST_ERROR(dwError);
 
@@ -463,23 +500,38 @@ uint32_t
 VmRESTSetData(
     PVMREST_HANDLE                   pRESTHandle,
     PREST_RESPONSE*                  ppResponse,
-    char const*                      buffer,
+    char const*                      pcszBuffer,
     uint32_t                         dataLen,
     uint32_t*                        bytesWritten
     )
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
+
+    if (!pRESTHandle || !ppResponse || !pcszBuffer || !bytesWritten || (pRESTHandle->instanceState != VMREST_INSTANCE_STARTED))
+    {
+        VMREST_LOG_ERROR(pRESTHandle,"%s","Invalid params");
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
     dwError = VmRESTSetHttpPayload(
                   pRESTHandle,
                   ppResponse,
-                  buffer,
+                  pcszBuffer,
                   dataLen,
                   bytesWritten
                   );
+    BAIL_ON_VMREST_ERROR(dwError);
+
+cleanup:
 
     return dwError;
 
+error:
+
+    goto cleanup;
+
 }
 
 /**** SetData Zero Copy API ****/
@@ -487,21 +539,37 @@ uint32_t
 VmRESTSetDataZC(
     PVMREST_HANDLE                   pRESTHandle,
     PREST_RESPONSE*                  ppResponse,
-    char const*                      pBuffer,
+    char const*                      pcszBuffer,
     uint32_t                         nBytes
     )
 {
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
 
+
+    if (!pRESTHandle || !ppResponse || !pcszBuffer || (pRESTHandle->instanceState != VMREST_INSTANCE_STARTED))
+    {
+        VMREST_LOG_ERROR(pRESTHandle,"%s","Invalid params");
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
+
     dwError = VmRESTSetHttpPayloadZeroCopy(
                   pRESTHandle,
                   ppResponse,
-                  pBuffer,
+                  pcszBuffer,
                   nBytes
                   );
+    BAIL_ON_VMREST_ERROR(dwError);
+
+cleanup:
 
     return dwError;
 
+error:
+
+    goto cleanup;
+
 }
 
 uint32_t
@@ -513,6 +581,12 @@ VmRESTSetSuccessResponse(
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
     char*                            connection = NULL;
 
+    if (!pRequest || !ppResponse)
+    {
+        dwError = REST_ENGINE_ERROR_INVALID_PARAM;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
     dwError = VmRESTSetHttpStatusCode(
                   ppResponse,
                   "200"
@@ -571,8 +645,8 @@ VmRESTSetSuccessResponse(
 uint32_t
 VmRESTSetFailureResponse(
     PREST_RESPONSE*                  ppResponse,
-    char const*                      pErrorCode,
-    char const*                      pErrorMessage
+    char const*                      pcszErrorCode,
+    char const*                      pcszErrorMessage
     )
 {   
     uint32_t                         dwError = REST_ENGINE_SUCCESS;
@@ -584,22 +658,22 @@ VmRESTSetFailureResponse(
 
     /**** If error code and message is not provided, send internal server error ****/
 
-    if (!pErrorCode)
+    if (!pcszErrorCode)
     {
         strcpy(errorCode,"500");
     }
-    else if ((strlen(pErrorCode) > 0) && (strlen(pErrorCode) <= MAX_STATUS_LEN))
+    else if ((strlen(pcszErrorCode) > 0) && (strlen(pcszErrorCode) <= MAX_STATUS_LEN))
     {
-        strcpy(errorCode, pErrorCode);
+        strcpy(errorCode, pcszErrorCode);
     }
 
-    if (!pErrorMessage)
+    if (!pcszErrorMessage)
     {
         strcpy(errorMessage, "Internal Server Error");
     }
-    else if ((strlen(pErrorMessage) > 0) && (strlen(pErrorMessage) <= MAX_REA_PHRASE_LEN))
+    else if ((strlen(pcszErrorMessage) > 0) && (strlen(pcszErrorMessage) <= MAX_REA_PHRASE_LEN))
     {
-        strcpy(errorMessage, pErrorMessage);
+        strcpy(errorMessage, pcszErrorMessage);
     }
 
     dwError = VmRESTSetHttpStatusCode(
diff --git a/transport/api/api.c b/transport/api/api.c
index c48de46..cc2c930 100644
--- a/transport/api/api.c
+++ b/transport/api/api.c
@@ -19,7 +19,7 @@
 #endif
 
 DWORD
-VmwSockOpenServer(
+VmwSockStartServer(
     PVMREST_HANDLE                   pRESTHandle,
     VM_SOCK_CREATE_FLAGS             dwFlags,
     PVM_SOCKET*                      ppSocket
@@ -33,7 +33,7 @@ VmwSockOpenServer(
         BAIL_ON_VMSOCK_ERROR(dwError);
     }
 
-    dwError = pRESTHandle->pPackage->pfnOpenServerSocket(
+    dwError = pRESTHandle->pPackage->pfnStartServerSocket(
                                      pRESTHandle,
                                      dwFlags,
                                      ppSocket);
@@ -64,7 +64,7 @@ VmwSockCreateEventQueue(
 }
 
 DWORD
-VmwSockEventQueueAdd(
+VmwSockAddEventToQueueInLock(
     PVMREST_HANDLE                   pRESTHandle,
     PVM_SOCK_EVENT_QUEUE             pQueue,
     PVM_SOCKET                       pSocket
@@ -78,13 +78,36 @@ VmwSockEventQueueAdd(
         BAIL_ON_VMSOCK_ERROR(dwError);
     }
 
-    dwError = pRESTHandle->pPackage->pfnAddEventQueue(pRESTHandle,pQueue, pSocket);
+    dwError = pRESTHandle->pPackage->pfnAddEventToQueue(pRESTHandle,pQueue, pSocket);
 
 error:
 
     return dwError;
 }
 
+DWORD
+VmwSockDeleteEventFromQueue(
+    PVMREST_HANDLE                   pRESTHandle,
+    PVM_SOCK_EVENT_QUEUE             pQueue,
+    PVM_SOCKET                       pSocket
+    )
+{
+    DWORD                            dwError = REST_ENGINE_SUCCESS;
+
+    if (!pQueue || !pSocket || !pRESTHandle)
+    {
+        dwError = ERROR_INVALID_PARAMETER;
+        BAIL_ON_VMSOCK_ERROR(dwError);
+    }
+
+    dwError = pRESTHandle->pPackage->pfnDeleteEventFromQueue(pRESTHandle,pQueue, pSocket);
+
+error:
+
+    return dwError;
+}
+
+
 DWORD
 VmwSockWaitForEvent(
     PVMREST_HANDLE                   pRESTHandle,
diff --git a/transport/posix/libmain.c b/transport/posix/libmain.c
index e7a5056..67c6023 100644
--- a/transport/posix/libmain.c
+++ b/transport/posix/libmain.c
@@ -47,9 +47,10 @@ VmRESTGetSockPackagePosix(
 
     pSockPackagePosix = *ppSockPackagePosix;
 
-    pSockPackagePosix->pfnOpenServerSocket = &VmSockPosixOpenServer;
+    pSockPackagePosix->pfnStartServerSocket = &VmSockPosixStartServer;
     pSockPackagePosix->pfnCreateEventQueue = &VmSockPosixCreateEventQueue;
-    pSockPackagePosix->pfnAddEventQueue = &VmSockPosixEventQueueAdd;
+    pSockPackagePosix->pfnAddEventToQueue = &VmSockPosixAddEventToQueueInLock;
+    pSockPackagePosix->pfnDeleteEventFromQueue = &VmSockPosixDeleteEventFromQueue;
     pSockPackagePosix->pfnWaitForEvent = &VmSockPosixWaitForEvent;
     pSockPackagePosix->pfnCloseEventQueue = &VmSockPosixCloseEventQueue;
     pSockPackagePosix->pfnRead = &VmSockPosixRead;
diff --git a/transport/posix/prototypes.h b/transport/posix/prototypes.h
index 4fa664c..d60e5e2 100644
--- a/transport/posix/prototypes.h
+++ b/transport/posix/prototypes.h
@@ -12,7 +12,7 @@
 */
 
 DWORD
-VmSockPosixOpenServer(
+VmSockPosixStartServer(
     PVMREST_HANDLE                   pRESTHandle,
     VM_SOCK_CREATE_FLAGS             dwFlags,
     PVM_SOCKET*                      ppSocket
@@ -25,7 +25,14 @@ VmSockPosixCreateEventQueue(
     );
 
 DWORD
-VmSockPosixEventQueueAdd(
+VmSockPosixAddEventToQueueInLock(
+    PVMREST_HANDLE                   pRESTHandle,
+    PVM_SOCK_EVENT_QUEUE             pQueue,
+    PVM_SOCKET                       pSocket
+    );
+
+DWORD
+VmSockPosixDeleteEventFromQueue(
     PVMREST_HANDLE                   pRESTHandle,
     PVM_SOCK_EVENT_QUEUE             pQueue,
     PVM_SOCKET                       pSocket
diff --git a/transport/posix/socket.c b/transport/posix/socket.c
index ec7ed3d..b34ef15 100644
--- a/transport/posix/socket.c
+++ b/transport/posix/socket.c
@@ -22,19 +22,12 @@ VmSockPosixCreateSignalSockets(
 
 static
 DWORD
-VmSockPosixEventQueueAdd_inlock(
+VmSockPosixAddEventToQueue(
     PVM_SOCK_EVENT_QUEUE             pQueue,
     BOOLEAN                          bOneShot,
     PVM_SOCKET                       pSocket
     );
 
-static
-DWORD
-VmSockPosixEventQueueDelete_inlock(
-    PVM_SOCK_EVENT_QUEUE             pQueue,
-    PVM_SOCKET                       pSocket
-    );
-
 static
 DWORD
 VmSockPosixAcceptConnection(
@@ -99,7 +92,7 @@ VmRESTCreateSSLObject(
 
 
 DWORD
-VmSockPosixOpenServer(
+VmSockPosixStartServer(
     PVMREST_HANDLE                   pRESTHandle,
     VM_SOCK_CREATE_FLAGS             dwFlags,
     PVM_SOCKET*                      ppSocket
@@ -388,7 +381,7 @@ VmSockPosixCreateEventQueue(
     pQueue->bShutdown = 0;
     pQueue->thrCnt = pRESTHandle->pRESTConfig->nWorkerThr;
 
-    dwError = VmSockPosixEventQueueAdd_inlock(
+    dwError = VmSockPosixAddEventToQueue(
                   pQueue,
                   FALSE,
                   pQueue->pSignalReader
@@ -420,7 +413,7 @@ VmSockPosixCreateEventQueue(
 }
 
 DWORD
-VmSockPosixEventQueueAdd(
+VmSockPosixAddEventToQueueInLock(
     PVMREST_HANDLE                   pRESTHandle,
     PVM_SOCK_EVENT_QUEUE             pQueue,
     PVM_SOCKET                       pSocket
@@ -441,7 +434,7 @@ VmSockPosixEventQueueAdd(
 
     bLocked = TRUE;
 
-    dwError = VmSockPosixEventQueueAdd_inlock(
+    dwError = VmSockPosixAddEventToQueue(
                   pQueue,
                   FALSE,
                   pSocket
@@ -462,6 +455,39 @@ VmSockPosixEventQueueAdd(
     goto cleanup;
 }
 
+DWORD
+VmSockPosixDeleteEventFromQueue(
+    PVMREST_HANDLE                   pRESTHandle,
+    PVM_SOCK_EVENT_QUEUE             pQueue,
+    PVM_SOCKET                       pSocket
+    )
+{
+    DWORD                            dwError = REST_ENGINE_SUCCESS;
+    struct                           epoll_event event = {0};
+
+    if (!pSocket || !pQueue || !pRESTHandle)
+    {
+        dwError = REST_ERROR_INVALID_HANDLER;
+    }
+    BAIL_ON_VMREST_ERROR(dwError);
+
+    if (epoll_ctl(pQueue->epollFd, EPOLL_CTL_DEL, pSocket->fd, &event) < 0)
+    {
+        dwError = VM_SOCK_POSIX_ERROR_SYS_CALL_FAILED;
+        BAIL_ON_VMREST_ERROR(dwError);
+    }
+
+cleanup:
+
+    return dwError;
+
+error:
+
+    goto cleanup;
+
+}
+
+
 DWORD
 VmSockPosixWaitForEvent(
     PVMREST_HANDLE                   pRESTHandle,
@@ -539,7 +565,8 @@ VmSockPosixWaitForEvent(
             if (pEvent->events & (EPOLLERR | EPOLLHUP))
             {
                 eventType = VM_SOCK_EVENT_TYPE_CONNECTION_CLOSED;
-                dwError = VmSockPosixEventQueueDelete_inlock(
+                dwError = VmSockPosixDeleteEventFromQueue(
+                              pRESTHandle,
                               pQueue,
                               pEventSocket
                               );
@@ -577,7 +604,7 @@ VmSockPosixWaitForEvent(
                 }
 
                 /**** Start watching new connection ****/
-                dwError = VmSockPosixEventQueueAdd_inlock(
+                dwError = VmSockPosixAddEventToQueue(
                               pQueue,
                               TRUE,
                               pSocket
@@ -639,6 +666,7 @@ VmSockPosixWaitForEvent(
                     if (bFound)
                     {
                         VMREST_LOG_DEBUG(pRESTHandle,"Action: DEFERRED, IO sock found in queue(Succeeding),  Io Sock %d, timer %d", pSocket->pIoSocket->fd, pSocket->fd );
+                        pEventSocket->pIoSocket->pTimerSocket = NULL;
                     }
                     else
                     {
@@ -651,17 +679,30 @@ VmSockPosixWaitForEvent(
                         {
                              /**** We are good to close actual IO Socket here ****/
                              VMREST_LOG_INFO(pRESTHandle,"Action: IO DELETION, IoSocket %d, timer %d", pSocket->pIoSocket->fd, pSocket->fd );
-                             eventType = VM_SOCK_EVENT_TYPE_CONNECTION_TIMEOUT;
-                             pSocket = pSocket->pIoSocket;
-                             
+
+                             pSocket = pEventSocket->pIoSocket;
                              /**** Delete IO from queue ****/
-                             VmSockPosixEventQueueDelete_inlock(
+                             VmSockPosixDeleteEventFromQueue(
+                                           pRESTHandle,
                                            pQueue,
                                            pSocket
                                            );
+
+                             if ((pRESTHandle->pSSLInfo->isSecure) && (!(pSocket->bSSLHandShakeCompleted)))
+                             {
+                                 /**** SSL handshake is not completed, no response will be sent, free IoSocket ****/
+                                 pEventSocket->pIoSocket = NULL;
+                                 VmSockPosixCloseSocket(pRESTHandle,pSocket);
+                                 VmSockPosixReleaseSocket(pRESTHandle,pSocket);
+                                 eventType = VM_SOCK_EVENT_TYPE_UNKNOWN;
+                             }
+                             else
+                             {
+                                 eventType = VM_SOCK_EVENT_TYPE_CONNECTION_TIMEOUT;
+                                 pEventSocket->pIoSocket->pTimerSocket = NULL;
+                             }
                         }
                     }
-                    pEventSocket->pIoSocket->pTimerSocket = NULL;
                 }
 
                 /** Close and free the timer socket ****/
@@ -747,7 +788,14 @@ VmSockPosixWaitForEvent(
 
 error:
 
-    VMREST_LOG_ERROR(pRESTHandle,"Error while processing socket event, dwError = %u", dwError);
+    if ((dwError == ERROR_SHUTDOWN_IN_PROGRESS) && pQueue)
+    {
+        VMREST_LOG_INFO(pRESTHandle,"C-REST-ENGINE: Shutting down...Cleaning worker thread %d", (pQueue->thrCnt  + 1));
+    }
+    else
+    {
+        VMREST_LOG_ERROR(pRESTHandle,"Error while processing socket event, dwError = %u", dwError);
+    }
     if (ppSocket)
     {
         *ppSocket = NULL;
@@ -987,10 +1035,11 @@ VmSockPosixRead(
 
 error:
 
-    if (pSocket && pRESTHandle->pSockContext)
+    if (pSocket && pRESTHandle && pRESTHandle->pSockContext)
     {
         /**** Delete the socket from poller ****/
-            VmSockPosixEventQueueDelete_inlock(
+            VmSockPosixDeleteEventFromQueue(
+            pRESTHandle,
             pRESTHandle->pSockContext->pEventQueue,
             pSocket
             );
@@ -1001,15 +1050,12 @@ VmSockPosixRead(
 
         if (pSocket->pTimerSocket)
         {
+            pSocket->pTimerSocket->pIoSocket = NULL;
             VmSockPosixReArmTimer(
                 pRESTHandle,
                 pSocket->pTimerSocket,
-                ((pRESTHandle->pRESTConfig->connTimeoutSec) * 1000)
+                1
                 );
-
-            write(pSocket->pTimerSocket->fd, "NotifyPQ", 8);
-            pSocket->pTimerSocket->pIoSocket = NULL;
-            
         }
 
     }
@@ -1191,7 +1237,7 @@ VmSockPosixCloseSocket(
         if (ret < 0)
         {
             errorCode = SSL_get_error(pSocket->ssl, ret);
-            VMREST_LOG_ERROR(pRESTHandle,"Error on SSL_shutdown on socket %d, return value %d, errorCode %u", pSocket->fd, ret, errorCode);
+            VMREST_LOG_ERROR(pRESTHandle,"Error on SSL_shutdown on socket %d, return value %d, errorCode %u, errno %d", pSocket->fd, ret, errorCode, errno);
         }
         SSL_free(pSocket->ssl);
         pSocket->ssl = NULL;
@@ -1303,7 +1349,7 @@ VmSockPosixCreateSignalSockets(
 
 static
 DWORD
-VmSockPosixEventQueueAdd_inlock(
+VmSockPosixAddEventToQueue(
     PVM_SOCK_EVENT_QUEUE             pQueue,
     BOOLEAN                          bOneShot,
     PVM_SOCKET                       pSocket
@@ -1337,33 +1383,6 @@ VmSockPosixEventQueueAdd_inlock(
     return dwError;
 }
 
-static
-DWORD
-VmSockPosixEventQueueDelete_inlock(
-    PVM_SOCK_EVENT_QUEUE             pQueue,
-    PVM_SOCKET                       pSocket
-    )
-{
-    DWORD                            dwError = REST_ENGINE_SUCCESS;
-    struct                           epoll_event event = {0};
-
-    if (!pSocket || !pQueue)
-    {
-        dwError = REST_ERROR_INVALID_HANDLER;
-    }
-    BAIL_ON_VMREST_ERROR(dwError);
-
-    if (epoll_ctl(pQueue->epollFd, EPOLL_CTL_DEL, pSocket->fd, &event) < 0)
-    {
-        dwError = VM_SOCK_POSIX_ERROR_SYS_CALL_FAILED;
-        BAIL_ON_VMREST_ERROR(dwError);
-    }
-
-error:
-
-    return dwError;
-}
-
 static
 DWORD
 VmSockPosixAcceptConnection(
@@ -1637,7 +1656,8 @@ VmSockPosixSetRequestHandle(
         }
 
         /**** Delete actual IO socket from poller ****/
-        dwError = VmSockPosixEventQueueDelete_inlock(
+        dwError = VmSockPosixDeleteEventFromQueue(
+                      pRESTHandle,
                       pQueue,
                       pSocket
                       );
@@ -1868,7 +1888,7 @@ VmSockPosixCreateTimer(
                   );
     BAIL_ON_VMREST_ERROR(dwError);
     
-    dwError = VmSockPosixEventQueueAdd_inlock(
+    dwError = VmSockPosixAddEventToQueue(
                   pRESTHandle->pSockContext->pEventQueue,
                   TRUE,
                   pTimerSocket
@@ -1923,50 +1943,44 @@ VmRESTAcceptSSLContext(
 
     if (ret == 1)
     {
-        VMREST_LOG_DEBUG(pRESTHandle," SSL accept successful on socket %d, ret %d, errorCode %u", pSocket->fd, ret, errorCode);
+        VMREST_LOG_DEBUG(pRESTHandle,"SSL accept successful on socket %d, ret %d, errorCode %u", pSocket->fd, ret, errorCode);
         pSocket->bSSLHandShakeCompleted = TRUE;
         bReArm = TRUE;
     }
     else if ((ret == -1) && ((errorCode == SSL_ERROR_WANT_READ) || (errorCode == SSL_ERROR_WANT_WRITE)))
     {
-       VMREST_LOG_DEBUG(pRESTHandle," SSL handshake not completed for socket %d, ret %d, errorCode %u", pSocket->fd, ret, errorCode);
+       VMREST_LOG_DEBUG(pRESTHandle,"SSL handshake not completed for socket %d, ret %d, errorCode %u", pSocket->fd, ret, errorCode);
        pSocket->bSSLHandShakeCompleted = FALSE;
        bReArm = TRUE;
     }
-    else if ((ret == 0) && (errorCode == SSL_ERROR_SYSCALL))
+    else
     {
-         VMREST_LOG_ERROR(pRESTHandle," Client closed the connection during SSL handshake, socket fd %d, ret %d, errorCode %u, errno %d", pSocket->fd, ret, errorCode, errno);
+         VMREST_LOG_ERROR(pRESTHandle,"SSL handshake failed on socket fd %d, ret %d, errorCode %u, errno %d", pSocket->fd, ret, errorCode, errno);
          dwError = VMREST_TRANSPORT_SSL_ACCEPT_FAILED;
          BAIL_ON_VMREST_ERROR(dwError);
     }
-    else
+
+    if (bReArm && bWatched)
     {
-        VMREST_LOG_ERROR(pRESTHandle, "SSL handshake failed...connection will be closed for socket with fd %d, ret %d, errorCode %u, errno %d", pSocket->fd, ret, errorCode, errno);
-        dwError = VMREST_TRANSPORT_SSL_ACCEPT_FAILED;
+        /**** Rearm and add the socket ****/
+        dwError = VmSockPosixReArmTimer(
+                      pRESTHandle,
+                      pSocket->pTimerSocket,
+                      ((pRESTHandle->pRESTConfig->connTimeoutSec) * 1000)
+                      );
         BAIL_ON_VMREST_ERROR(dwError);
-    }
 
-     if (bReArm && bWatched)
-     {
-         /**** Rearm and add the socket ****/
-         dwError = VmSockPosixReArmTimer(
-                       pRESTHandle,
-                       pSocket->pTimerSocket,
-                       ((pRESTHandle->pRESTConfig->connTimeoutSec) * 1000)
-                       );
-         BAIL_ON_VMREST_ERROR(dwError);
-
-         event.data.ptr = pSocket;
-         event.events = EPOLLIN;
+        event.data.ptr = pSocket;
+        event.events = EPOLLIN;
 
-         event.events = event.events | EPOLLONESHOT;
+        event.events = event.events | EPOLLONESHOT;
 
-         if (epoll_ctl(pRESTHandle->pSockContext->pEventQueue->epollFd, EPOLL_CTL_MOD, pSocket->fd, &event) < 0)
-         {
-             dwError = VM_SOCK_POSIX_ERROR_SYS_CALL_FAILED;
-             BAIL_ON_VMREST_ERROR(dwError);
-         }
-     }
+        if (epoll_ctl(pRESTHandle->pSockContext->pEventQueue->epollFd, EPOLL_CTL_MOD, pSocket->fd, &event) < 0)
+        {
+            dwError = VM_SOCK_POSIX_ERROR_SYS_CALL_FAILED;
+            BAIL_ON_VMREST_ERROR(dwError);
+        }
+    }
   
 cleanup:
 
@@ -1977,7 +1991,8 @@ VmRESTAcceptSSLContext(
     if (pRESTHandle && pRESTHandle->pSockContext)
     {
         /**** Delete from poller ****/
-        VmSockPosixEventQueueDelete_inlock(
+        VmSockPosixDeleteEventFromQueue(
+            pRESTHandle,
             pRESTHandle->pSockContext->pEventQueue,
             pSocket
             );
