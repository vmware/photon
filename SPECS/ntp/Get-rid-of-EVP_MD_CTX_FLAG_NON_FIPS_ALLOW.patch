From 690c972b61965f2ee823ac00f31c5a138c68a73d Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Fri, 7 Jan 2022 23:50:49 +0530
Subject: [PATCH] Get rid of EVP_MD_CTX_FLAG_NON_FIPS_ALLOW

openssl-3.x provides EVP_MD_fetch() api to make use of non fips
algorithms in user space programs.

EVP_MD_CTX_FLAG_NON_FIPS_ALLOW is obsolete.

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 libntp/a_md5encrypt.c | 98 +++++++++++++++++++++++++++++++++----------
 ntpd/ntp_control.c    | 22 +++++++---
 ntpd/ntp_crypto.c     | 90 +++++++++++++++++++++++----------------
 sntp/crypto.c         | 56 ++++++++++++++++++-------
 4 files changed, 188 insertions(+), 78 deletions(-)

diff --git a/libntp/a_md5encrypt.c b/libntp/a_md5encrypt.c
index 57100de..7dafb76 100644
--- a/libntp/a_md5encrypt.c
+++ b/libntp/a_md5encrypt.c
@@ -12,6 +12,8 @@
 #include "ntp_md5.h"	/* provides OpenSSL digest API */
 #include "isc/string.h"
 
+#include <openssl/core_names.h>
+
 typedef struct {
 	const void *	buf;
 	size_t		len;
@@ -51,9 +53,9 @@ make_mac(
 	 * was created.
 	 */
 	size_t	retlen = 0;
-	
+
 #ifdef OPENSSL
-	
+
 	INIT_SSL();
 
 	/* Check if CMAC key type specific code required */
@@ -70,7 +72,7 @@ make_mac(
 			       (AES_128_KEY_SIZE - key->len));
 			keyptr = keybuf;
 		}
-		
+
 		if (NULL == (ctx = CMAC_CTX_new())) {
 			msyslog(LOG_ERR, "MAC encrypt: CMAC %s CTX new failed.", CMAC);
 			goto cmac_fail;
@@ -100,17 +102,36 @@ make_mac(
 	{	/* generic MAC handling */
 		EVP_MD_CTX *	ctx   = EVP_MD_CTX_new();
 		u_int		uilen = 0;
-		
+
 		if ( ! ctx) {
 			msyslog(LOG_ERR, "MAC encrypt: MAC %s Digest CTX new failed.",
 				OBJ_nid2sn(ktype));
 			goto mac_fail;
 		}
-		
-           #ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
-		/* make sure MD5 is allowd */
-		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-           #endif
+
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+		/* make sure MD5 is allowed */
+        OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+        if (!octx) {
+            msyslog(LOG_ERR, "MAC encrypt: OSSL_LIB_CTX_new failed\n");
+            goto mac_fail;
+        }
+
+        EVP_MD *type = EVP_MD_fetch(octx, OBJ_nid2sn(ktype), "-fips");
+        if (!type) {
+            msyslog(LOG_ERR, "MAC encrypt: EVP_MD_fetch failed\n");
+            goto mac_fail;
+        }
+
+        if (!EVP_DigestInit_ex(ctx, type, NULL)) {
+            msyslog(LOG_ERR, "MAC encrypt: MAC %s Digest Init failed.",
+                    OBJ_nid2sn(ktype));
+            goto mac_fail;
+        }
+#   else
+#       ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+        EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#       endif
 		/* [Bug 3457] DON'T use plain EVP_DigestInit! It would
 		 * kill the flags! */
 		if (!EVP_DigestInit_ex(ctx, EVP_get_digestbynid(ktype), NULL)) {
@@ -118,6 +139,7 @@ make_mac(
 				OBJ_nid2sn(ktype));
 			goto mac_fail;
 		}
+#   endif
 		if ((size_t)EVP_MD_CTX_size(ctx) > digest->len) {
 			msyslog(LOG_ERR, "MAC encrypt: MAC %s buf too small.",
 				OBJ_nid2sn(ktype));
@@ -140,13 +162,19 @@ make_mac(
 		}
 	  mac_fail:
 		retlen = (size_t)uilen;
-		
+
 		if (ctx)
 			EVP_MD_CTX_free(ctx);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+        if (type)
+            EVP_MD_free(type);
+        if (octx)
+            OSSL_LIB_CTX_free(octx);
+#   endif
 	}
 
 #else /* !OPENSSL follows */
-	
+
 	if (ktype == NID_md5)
 	{
 		EVP_MD_CTX *	ctx   = EVP_MD_CTX_new();
@@ -172,7 +200,7 @@ make_mac(
 	{
 		msyslog(LOG_ERR, "MAC encrypt: invalid key type %d"  , ktype);
 	}
-	
+
 #endif /* !OPENSSL */
 
 	return retlen;
@@ -196,7 +224,7 @@ MD5authencrypt(
 	u_char	digest[EVP_MAX_MD_SIZE];
 	rwbuffT digb = { digest, sizeof(digest) };
 	robuffT keyb = { key, klen };
-	robuffT msgb = { pkt, length };	
+	robuffT msgb = { pkt, length };
 	size_t	dlen = 0;
 
 	dlen = make_mac(&digb, type, &keyb, &msgb);
@@ -226,11 +254,11 @@ MD5authdecrypt(
 	u_char	digest[EVP_MAX_MD_SIZE];
 	rwbuffT digb = { digest, sizeof(digest) };
 	robuffT keyb = { key, klen };
-	robuffT msgb = { pkt, length };	
+	robuffT msgb = { pkt, length };
 	size_t	dlen = 0;
 
 	dlen = make_mac(&digb, type, &keyb, &msgb);
-	
+
 	/* If the MAC is longer than the MAX then truncate it. */
 	if (dlen > MAX_MDG_LEN)
 		dlen = MAX_MDG_LEN;
@@ -263,23 +291,51 @@ addr2refid(sockaddr_u *addr)
 	INIT_SSL();
 
 	ctx = EVP_MD_CTX_new();
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+    /* MD5 is not used as a crypto hash here. */
+    OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+    if (!octx) {
+        msyslog(LOG_ERR, "addr2refid: OSSL_LIB_CTX_new failed\n");
+        exit(1);
+    }
+
+    EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+    if (!type) {
+        msyslog(LOG_ERR, "addr2refid: EVP_MD_fetch failed\n");
+        exit(1);
+    }
+
+    if (!EVP_DigestInit_ex(ctx, type, NULL)) {
+        msyslog(LOG_ERR, "MD5 init failed");
+        EVP_MD_CTX_free(ctx);	/* pedantic... but safe */
+        exit(1);
+    }
+#   else
 #   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
-	/* MD5 is not used as a crypto hash here. */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+    EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 #   endif
 	/* [Bug 3457] DON'T use plain EVP_DigestInit! It would kill the
 	 * flags! */
 	if (!EVP_DigestInit_ex(ctx, EVP_md5(), NULL)) {
-		msyslog(LOG_ERR,
-		    "MD5 init failed");
+		msyslog(LOG_ERR, "MD5 init failed");
 		EVP_MD_CTX_free(ctx);	/* pedantic... but safe */
 		exit(1);
 	}
+#   endif
 
 	EVP_DigestUpdate(ctx, (u_char *)PSOCK_ADDR6(addr),
 	    sizeof(struct in6_addr));
 	EVP_DigestFinal(ctx, digest, &len);
 	EVP_MD_CTX_free(ctx);
-	memcpy(&addr_refid, digest, sizeof(addr_refid));
-	return (addr_refid);
+
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+    if (type)
+        EVP_MD_free(type);
+    if (octx)
+        OSSL_LIB_CTX_free(octx);
+#   endif
+
+    memcpy(&addr_refid, digest, sizeof(addr_refid));
+
+    return (addr_refid);
 }
diff --git a/ntpd/ntp_control.c b/ntpd/ntp_control.c
index 9c40803..3e69d34 100644
--- a/ntpd/ntp_control.c
+++ b/ntpd/ntp_control.c
@@ -30,6 +30,8 @@
 #include "lib_strbuf.h"
 #include "timexsup.h"
 
+#include <openssl/core_names.h>
+
 #include <rc_cmdlength.h>
 #ifdef KERNEL_PLL
 # include "ntp_syscall.h"
@@ -3045,7 +3047,7 @@ ctl_putclock(
 		*s = '\0';
 		ctl_putdata(buf, (unsigned)(s - buf), 0);
 		break;
-		
+
 	case CC_FUDGEMINJIT:
 		if (mustput || (pcs->haveflags & CLK_HAVEMINJIT))
 			ctl_putdbl(clock_var[id].text,
@@ -3493,7 +3495,7 @@ write_variables(
 				return;
 			}
 		}
-		
+
 		if (ext_var) {
 			octets = strlen(v->text) + strlen(valuep) + 2;
 			vareqv = emalloc(octets);
@@ -3666,11 +3668,15 @@ static u_int32 derive_nonce(
 	}
 
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
-	/* [Bug 3457] set flags and don't kill them again */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	EVP_DigestInit_ex(ctx, EVP_get_digestbynid(NID_md5), NULL);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+    /* [Bug 3457] set flags and don't kill them again */
+    OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+    EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+    EVP_DigestInit_ex(ctx, type, NULL);
 #   else
+#   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+    EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#   endif
 	EVP_DigestInit(ctx, EVP_get_digestbynid(NID_md5));
 #   endif
 	EVP_DigestUpdate(ctx, salt, sizeof(salt));
@@ -3686,6 +3692,10 @@ static u_int32 derive_nonce(
 	EVP_DigestUpdate(ctx, salt, sizeof(salt));
 	EVP_DigestFinal(ctx, d.digest, &len);
 	EVP_MD_CTX_free(ctx);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+    EVP_MD_free(type);
+    OSSL_LIB_CTX_free(octx);
+#   endif
 
 	return d.extract;
 }
diff --git a/ntpd/ntp_crypto.c b/ntpd/ntp_crypto.c
index 2f82c4c..5ca9528 100644
--- a/ntpd/ntp_crypto.c
+++ b/ntpd/ntp_crypto.c
@@ -34,6 +34,8 @@
 #include "openssl/x509v3.h"
 #include "libssl_compat.h"
 
+#include <openssl/core_names.h>
+
 #ifdef KERNEL_PLL
 #include "ntp_syscall.h"
 #endif /* KERNEL_PLL */
@@ -242,7 +244,7 @@ session_key(
 
 	if (!dstadr)
 		return 0;
-	
+
 	/*
 	 * Generate the session key and key ID. If the lifetime is
 	 * greater than zero, install the key and call it trusted.
@@ -268,16 +270,24 @@ session_key(
 		break;
 	}
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
-	/* [Bug 3457] set flags and don't kill them again */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	EVP_DigestInit_ex(ctx, EVP_get_digestbynid(crypto_nid), NULL);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+    /* [Bug 3457] set flags and don't kill them again */
+    OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+    EVP_MD *type = EVP_MD_fetch(octx, OBJ_nid2sn(crypto_nid), "-fips");
+    EVP_DigestInit_ex(ctx, type, NULL);
 #   else
+#   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+    EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#   endif
 	EVP_DigestInit(ctx, EVP_get_digestbynid(crypto_nid));
 #   endif
 	EVP_DigestUpdate(ctx, (u_char *)header, hdlen);
 	EVP_DigestFinal(ctx, dgst, &len);
 	EVP_MD_CTX_free(ctx);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+    EVP_MD_free(type);
+    OSSL_LIB_CTX_free(octx);
+#   endif
 	memcpy(&keyid, dgst, 4);
 	keyid = ntohl(keyid);
 	if (lifetime != 0) {
@@ -323,7 +333,7 @@ make_keylist(
 
 	if (!dstadr)
 		return XEVNT_ERR;
-	
+
 	/*
 	 * Allocate the key list if necessary.
 	 */
@@ -374,7 +384,7 @@ make_keylist(
 	 * Save the last session key ID, sequence number and timestamp,
 	 * then sign these values for later retrieval by the clients. Be
 	 * careful not to use invalid key media. Use the public values
-	 * timestamp as filestamp. 
+	 * timestamp as filestamp.
 	 */
 	vp = &peer->sndval;
 	if (vp->ptr == NULL)
@@ -896,7 +906,7 @@ crypto_recv(
 			 * autokey values.
 			 */
 			if ((rval = crypto_verify(ep, &peer->recval,
-			    peer)) != XEVNT_OK) 
+			    peer)) != XEVNT_OK)
 				break;
 
 			/*
@@ -929,14 +939,14 @@ crypto_recv(
 			peer->pkeyid = bp->key;
 			peer->crypto |= CRYPTO_FLAG_AUTO;
 			peer->flash &= ~TEST8;
-			snprintf(statstr, sizeof(statstr), 
+			snprintf(statstr, sizeof(statstr),
 			    "auto seq %d key %x ts %u fs %u", bp->seq,
 			    bp->key, ntohl(ep->tstamp),
 			    ntohl(ep->fstamp));
 			record_crypto_stats(&peer->srcadr, statstr);
 			DPRINTF(1, ("crypto_recv: %s\n", statstr));
 			break;
-	
+
 		/*
 		 * X509 certificate sign response. Validate the
 		 * certificate signed by the server and install. Later
@@ -1182,7 +1192,7 @@ crypto_xmit(
 	 * There may be several certificates matching the request. First
 	 * choice is a self-signed trusted certificate; second choice is
 	 * any certificate signed by another host. There is no third
-	 * choice. 
+	 * choice.
 	 */
 	case CRYPTO_CERT | CRYPTO_RESP:
 		vallen = exten_payload_size(ep); /* Must be <64k */
@@ -1772,9 +1782,9 @@ crypto_send(
 	len = 16;				/* XXX Document! */
 	vallen = ntohl(vp->vallen);
 	INSIST(vallen <= MAX_VALLEN);
-	len += ((vallen + 3) / 4 + 1) * 4; 
+	len += ((vallen + 3) / 4 + 1) * 4;
 	siglen = ntohl(vp->siglen);
-	len += ((siglen + 3) / 4 + 1) * 4; 
+	len += ((siglen + 3) / 4 + 1) * 4;
 	if (start + len > sizeof(struct pkt) - MAX_MAC_LEN)
 		return (0);
 
@@ -1811,7 +1821,7 @@ crypto_send(
 		/* i += j; */	/* We don't use i after this */
 	}
 	opcode = ntohl(ep->opcode);
-	ep->opcode = htonl((opcode & 0xffff0000) | len); 
+	ep->opcode = htonl((opcode & 0xffff0000) | len);
 	ENSURE(len <= MAX_VALLEN);
 	return (len);
 }
@@ -1854,7 +1864,7 @@ crypto_update(void)
 	/*
 	 * Sign public key and timestamps. The filestamp is derived from
 	 * the host key file extension from wherever the file was
-	 * generated. 
+	 * generated.
 	 */
 	if (pubkey.vallen != 0) {
 		pubkey.tstamp = hostval.tstamp;
@@ -1942,7 +1952,7 @@ crypto_update(void)
 	crypto_flags |= CRYPTO_FLAG_TAI;
 
 	snprintf(statstr, sizeof(statstr), "signature update ts %u",
-	    ntohl(hostval.tstamp)); 
+	    ntohl(hostval.tstamp));
 	record_crypto_stats(NULL, statstr);
 	DPRINTF(1, ("crypto_update: %s\n", statstr));
 	EVP_MD_CTX_free(ctx);
@@ -2094,16 +2104,24 @@ bighash(
 	ptr = emalloc(len);
 	BN_bn2bin(bn, ptr);
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
-	/* [Bug 3457] set flags and don't kill them again */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	EVP_DigestInit_ex(ctx, EVP_md5(), NULL);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+    /* [Bug 3457] set flags and don't kill them again */
+    OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+    EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+    EVP_DigestInit_ex(ctx, type, NULL);
 #   else
+#   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+    EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#   endif
 	EVP_DigestInit(ctx, EVP_md5());
 #   endif
 	EVP_DigestUpdate(ctx, ptr, len);
 	EVP_DigestFinal(ctx, dgst, &len);
 	EVP_MD_CTX_free(ctx);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+    EVP_MD_free(type);
+    OSSL_LIB_CTX_free(octx);
+#   endif
 	BN_bin2bn(dgst, len, bk);
 	free(ptr);
 }
@@ -2149,7 +2167,7 @@ bighash(
  * to Alice in the response message. Besides making the response
  * shorter, the hash makes it effectivey impossible for an intruder to
  * solve for b by observing a number of these messages.
- * 
+ *
  * Alice receives the response and computes g^y v^r mod p. After a bit
  * of algebra, this simplifies to g^k. If the hash of this result
  * matches hash(x), Alice knows that Bob has the group key b. The signed
@@ -2481,7 +2499,7 @@ crypto_iff(
  * message. Besides making the response shorter, the hash makes it
  * effectivey impossible for an intruder to solve for b by observing
  * a number of these messages.
- * 
+ *
  * Alice receives the response and computes y^b v^r mod n. After a bit
  * of algebra, this simplifies to k^b. If the hash of this result
  * matches hash(x), Alice knows that Bob has the group key b. The signed
@@ -2609,7 +2627,7 @@ crypto_bob2(
 
 	/*
 	 * Bob rolls random k (0 < k < n), computes y = k u^r mod n and
-	 * x = k^b mod n, then sends (y, hash(x)) to Alice. 
+	 * x = k^b mod n, then sends (y, hash(x)) to Alice.
 	 */
 	bctx = BN_CTX_new(); k = BN_new(); g = BN_new(); y = BN_new();
 	sdsa = DSA_SIG_new();
@@ -2626,7 +2644,7 @@ crypto_bob2(
 	if (debug > 1)
 		RSA_print_fp(stdout, rsa, 0);
 #endif
- 
+
 	/*
 	 * Encode the values in ASN.1 and sign. The filestamp is from
 	 * the local file.
@@ -2825,7 +2843,7 @@ crypto_gq(
  * Alice rolls new random nonce r mod p and sends to Bob in the MV
  * request message. Bob rolls random nonce k mod q, encrypts y = r E^k
  * mod p and sends (y, gbar^k, ghat^k) to Alice.
- * 
+ *
  * Alice receives the response and computes the inverse (E^k)^-1 from
  * the partial decryption keys gbar^k, ghat^k, xbar and xhat. She then
  * decrypts y and verifies it matches the original r. The signed
@@ -3136,7 +3154,7 @@ crypto_mv(
  * intermediate servers to the trusted server. Each signature on the
  * trail must be valid at the time of signature, but it could happen
  * that a signer certificate expire before the signed certificate, which
- * remains valid until its expiration. 
+ * remains valid until its expiration.
  *
  * Returns
  * XEVNT_OK	success
@@ -3310,7 +3328,7 @@ cert_install(
 	 * with a long lifetime might be overtaken by a later
 	 * certificate with a short lifetime, thus invalidating the
 	 * earlier signature. However, we gotta find a way to leak old
-	 * stuff from the cache, so we do it anyway. 
+	 * stuff from the cache, so we do it anyway.
 	 */
 	zp = &cinfo;
 	for (xp = cinfo; xp != NULL; xp = xp->link) {
@@ -3414,7 +3432,7 @@ cert_hike(
 
 	/*
 	 * Signature X is valid only if it begins during the
-	 * lifetime of Y. 
+	 * lifetime of Y.
 	 */
 	if ((calcomp(&(xp->first), &(yp->first)) < 0)
 	|| (calcomp(&(xp->first), &(yp->last)) > 0)) {
@@ -3635,7 +3653,7 @@ cert_parse(
  */
 void
 cert_free(
-	struct cert_info *cinf	/* certificate info/value structure */ 
+	struct cert_info *cinf	/* certificate info/value structure */
 	)
 {
 	if (cinf->pkey != NULL)
@@ -3683,7 +3701,7 @@ crypto_key(
 	for (pkp = pkinfo; pkp != NULL; pkp = pkp->link) {
 		if (strcmp(cp, pkp->name) == 0)
 			return (pkp);
-	}  
+	}
 
 	/*
 	 * Open the key file. If the first character of the file name is
@@ -3747,11 +3765,11 @@ crypto_key(
 	 * Leave tracks in the cryptostats.
 	 */
 	if ((ptr = strrchr(linkname, '\n')) != NULL)
-		*ptr = '\0'; 
+		*ptr = '\0';
 	snprintf(statstr, sizeof(statstr), "%s mod %d", &linkname[2],
 	    EVP_PKEY_size(pkey) * 8);
 	record_crypto_stats(addr, statstr);
-	
+
 	DPRINTF(1, ("crypto_key: %s\n", statstr));
 #ifdef DEBUG
 	if (debug > 1) {
@@ -3864,7 +3882,7 @@ crypto_cert(
 		return (NULL);
 
 	if ((ptr = strrchr(linkname, '\n')) != NULL)
-		*ptr = '\0'; 
+		*ptr = '\0';
 	snprintf(statstr, sizeof(statstr), "%s 0x%x len %lu",
 	    &linkname[2], ret->flags, len);
 	record_crypto_stats(NULL, statstr);
@@ -3959,7 +3977,7 @@ crypto_setup(void)
 	 * Load required host key from file "ntpkey_host_<hostname>". If
 	 * no host key file is not found or has invalid password, life
 	 * as we know it ends. The host key also becomes the default
-	 * sign key. 
+	 * sign key.
 	 */
 	snprintf(filename, sizeof(filename), "ntpkey_host_%s", hostname);
 	pinfo = crypto_key(filename, passwd, NULL);
@@ -3977,7 +3995,7 @@ crypto_setup(void)
 	host_pkey = pinfo->pkey;
 	sign_pkey = host_pkey;
 	hostval.fstamp = htonl(pinfo->fstamp);
-	
+
 	/*
 	 * Construct public key extension field for agreement scheme.
 	 */
@@ -4150,7 +4168,7 @@ exten_payload_size(
 	const struct exten * ep)
 {
 	typedef const u_char *BPTR;
-	
+
 	size_t extn_size;
 	size_t data_size;
 	size_t head_size;
diff --git a/sntp/crypto.c b/sntp/crypto.c
index 8a47ede..e0ae091 100644
--- a/sntp/crypto.c
+++ b/sntp/crypto.c
@@ -36,7 +36,7 @@ compute_mac(
 	size_t		slen = 0;
 #endif
 	int		key_type;
-	
+
 	INIT_SSL();
 	key_type = keytype_from_text(macname, NULL);
 
@@ -69,32 +69,52 @@ compute_mac(
 			slen = 0;
 		}
 		len = (u_int)slen;
-		
+
 		if (ctx)
 			CMAC_CTX_free(ctx);
 		/* Test our AES-128-CMAC implementation */
-		
+
 	} else	/* MD5 MAC handling */
 #endif
 	{
 		EVP_MD_CTX *	ctx;
-		
+
 		if (!(ctx = EVP_MD_CTX_new())) {
 			msyslog(LOG_ERR, "make_mac: MAC %s Digest CTX new failed.",
 				macname);
 			goto mac_fail;
 		}
 #ifdef OPENSSL	/* OpenSSL 1 supports return codes 0 fail, 1 okay */
-#	    ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
-		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-#	    endif
-		/* [Bug 3457] DON'T use plain EVP_DigestInit! It would
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+        OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+        if (!octx) {
+            msyslog(LOG_ERR, "make_mac: OSSL_LIB_CTX_new failed");
+            goto mac_fail;
+        }
+
+        EVP_MD *type = EVP_MD_fetch(octx, OBJ_nid2sn(key_type), "-fips");
+        if (!type) {
+            msyslog(LOG_ERR, "make_mac: EVP_MD_fetch failed");
+            goto mac_fail;
+        }
+
+        /* [Bug 3457] DON'T use plain EVP_DigestInit! It would
 		 *  kill the flags! */
-		if (!EVP_DigestInit_ex(ctx, EVP_get_digestbynid(key_type), NULL)) {
+        if (!EVP_DigestInit_ex(ctx, type, NULL)) {
 			msyslog(LOG_ERR, "make_mac: MAC %s Digest Init failed.",
 				macname);
 			goto mac_fail;
 		}
+#   else
+#       ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+        EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#       endif
+        if (!EVP_DigestInit_ex(ctx, EVP_get_digestbynid(key_type), NULL)) {
+            msyslog(LOG_ERR, "make_mac: MAC %s Digest Init failed.",
+                    macname);
+            goto mac_fail;
+        }
+#   endif
 		if (!EVP_DigestUpdate(ctx, key_data, key_size)) {
 			msyslog(LOG_ERR, "make_mac: MAC %s Digest Update key failed.",
 				macname);
@@ -118,6 +138,12 @@ compute_mac(
 #endif
 	  mac_fail:
 		EVP_MD_CTX_free(ctx);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+        if (type)
+            EVP_MD_free(type);
+        if (octx)
+            OSSL_LIB_CTX_free(octx);
+#   endif
 	}
 
 	return len;
@@ -134,7 +160,7 @@ make_mac(
 {
 	u_int		len;
 	u_char		dbuf[EVP_MAX_MD_SIZE];
-	
+
 	if (cmp_key->key_len > 64 || mac_size <= 0)
 		return 0;
 	if (pkt_size % 4 != 0)
@@ -143,7 +169,7 @@ make_mac(
 	len = compute_mac(dbuf, cmp_key->typen,
 			  pkt_data, (u_int)pkt_size,
 			  cmp_key->key_seq, (u_int)cmp_key->key_len);
-			  
+
 
 	if (len) {
 		if (len > (u_int)mac_size)
@@ -170,10 +196,10 @@ auth_md5(
 	u_int		len       = 0;
 	u_char const *	pkt_ptr   = pkt_data;
 	u_char		dbuf[EVP_MAX_MD_SIZE];
-	
+
 	if (mac_size <= 0 || (size_t)mac_size > sizeof(dbuf))
 		return FALSE;
-	
+
 	len = compute_mac(dbuf, cmp_key->typen,
 			  pkt_ptr, (u_int)pkt_size,
 			  cmp_key->key_seq, (u_int)cmp_key->key_len);
@@ -181,7 +207,7 @@ auth_md5(
 	pkt_ptr += pkt_size + 4;
 	if (len > (u_int)mac_size)
 		len = (u_int)mac_size;
-	
+
 	/* isc_tsmemcmp will be better when its easy to link with.  sntp
 	 * is a 1-shot program, so snooping for timing attacks is
 	 * Harder.
@@ -226,7 +252,7 @@ auth_init(
 
 	/* HMS: Is it OK to do this later, after we know we have a key file? */
 	INIT_SSL();
-	
+
 	if (keyf == NULL) {
 		if (debug)
 			printf("sntp auth_init: Couldn't open key file %s for reading!\n", keyfile);
-- 
2.33.1

