From a2bd30f3479886808b57d20cefe325cb80f770cd Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Sat, 13 Nov 2021 23:31:23 +0530
Subject: [PATCH] Add PhotonOS support

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 azurelinuxagent/common/osutil/factory.py  |  4 ++
 azurelinuxagent/common/osutil/photonos.py | 88 +++++++++++++++++++++++
 azurelinuxagent/common/version.py         |  7 +-
 config/photonos/waagent.conf              | 80 +++++++++++++++++++++
 init/photonos/waagent.service             | 16 +++++
 setup.py                                  |  8 ++-
 6 files changed, 201 insertions(+), 2 deletions(-)
 create mode 100644 azurelinuxagent/common/osutil/photonos.py
 create mode 100644 config/photonos/waagent.conf
 create mode 100644 init/photonos/waagent.service

diff --git a/azurelinuxagent/common/osutil/factory.py b/azurelinuxagent/common/osutil/factory.py
index b212c382..be6e6052 100644
--- a/azurelinuxagent/common/osutil/factory.py
+++ b/azurelinuxagent/common/osutil/factory.py
@@ -24,6 +24,7 @@ from .alpine import AlpineOSUtil
 from .arch import ArchUtil
 from .bigip import BigIpOSUtil
 from .clearlinux import ClearLinuxUtil
+from .photonos import PhotonOSUtil
 from .coreos import CoreOSUtil
 from .debian import DebianOSBaseUtil, DebianOSModernUtil
 from .default import DefaultOSUtil
@@ -53,6 +54,9 @@ def get_osutil(distro_name=DISTRO_NAME,
 
 def _get_osutil(distro_name, distro_code_name, distro_version, distro_full_name):
 
+    if distro_name == "photonos":
+        return PhotonOSUtil()
+
     if distro_name == "arch":
         return ArchUtil()
 
diff --git a/azurelinuxagent/common/osutil/photonos.py b/azurelinuxagent/common/osutil/photonos.py
new file mode 100644
index 00000000..3ee76144
--- /dev/null
+++ b/azurelinuxagent/common/osutil/photonos.py
@@ -0,0 +1,88 @@
+#
+# Copyright 2017 Microsoft Corporation
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.4+ and Openssl 1.0+
+#
+
+import os
+import re
+import pwd
+import shutil
+import socket
+import array
+import struct
+import fcntl
+import time
+import base64
+import azurelinuxagent.common.conf as conf
+import azurelinuxagent.common.logger as logger
+import azurelinuxagent.common.utils.fileutil as fileutil
+import azurelinuxagent.common.utils.shellutil as shellutil
+import azurelinuxagent.common.utils.textutil as textutil
+from azurelinuxagent.common.osutil.default import DefaultOSUtil
+
+class PhotonOSUtil(DefaultOSUtil):
+    def __init__(self):
+        super(PhotonOSUtil, self).__init__()
+        self.agent_conf_file_path = '/etc/waagent.conf'
+
+    def is_dhcp_enabled(self):
+        return True
+
+    def start_network(self) :
+        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
+
+    def restart_if(self, iface):
+        shellutil.run("systemctl restart systemd-networkd")
+
+    def restart_ssh_service(self):
+        shellutil.run("systemctl restart sshd")
+
+    def stop_dhcp_service(self):
+        return shellutil.run("systemctl stop systemd-networkd", chk_err=False)
+
+    def start_dhcp_service(self):
+        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
+
+    def start_agent_service(self):
+        return shellutil.run("systemctl start waagent", chk_err=False)
+
+    def stop_agent_service(self):
+        return shellutil.run("systemctl stop waagent", chk_err=False)
+
+    def get_dhcp_pid(self):
+        ret= shellutil.run_get_output("pidof systemd-networkd")
+        return ret[1] if ret[0] == 0 else None
+
+    def conf_sshd(self, disable_password):
+        pass
+
+    def del_root_password(self):
+        try:
+            passwd_file_path = conf.get_passwd_file_path()
+            try:
+                passwd_content = fileutil.read_file(passwd_file_path)
+                if not passwd_content:
+                    raise FileNotFoundError
+            except FileNotFoundError:
+                new_passwd = ["root:*LOCK*:14600::::::"]
+            else:
+                passwd = passwd_content.split('\n')
+                new_passwd = [x for x in passwd if not x.startswith("root:")]
+                new_passwd.insert(0, "root:*LOCK*:14600::::::")
+            fileutil.write_file(passwd_file_path, "\n".join(new_passwd))
+        except IOError as e:
+            raise OSUtilError("Failed to delete root password:{0}".format(e))
+        pass
diff --git a/azurelinuxagent/common/version.py b/azurelinuxagent/common/version.py
index b686b866..854b36f8 100644
--- a/azurelinuxagent/common/version.py
+++ b/azurelinuxagent/common/version.py
@@ -103,6 +103,11 @@ def get_checkpoint_platform():
 
 
 def get_distro():
+
+    if os.path.exists("/etc/photon-release"):
+        osinfo = "photonos"
+        return osinfo
+
     if 'FreeBSD' in platform.system():
         release = re.sub('\-.*\Z', '', ustr(platform.release()))  # pylint: disable=W1401
         osinfo = ['freebsd', release, '', 'freebsd']
@@ -187,7 +192,7 @@ def has_logrotate():
         logrotate_version = shellutil.run_command(["logrotate", "--version"]).split("\n")[0]
         return logrotate_version
     except shellutil.CommandError:
-        # A non-zero return code means that logrotate isn't present on 
+        # A non-zero return code means that logrotate isn't present on
         # the system; --version shouldn't fail otherwise.
         return COMMAND_ABSENT
     except Exception:
diff --git a/config/photonos/waagent.conf b/config/photonos/waagent.conf
new file mode 100644
index 00000000..65da1313
--- /dev/null
+++ b/config/photonos/waagent.conf
@@ -0,0 +1,80 @@
+# Microsoft Azure Linux Agent Configuration
+#
+
+# Specified program is invoked with the argument "Ready" when we report ready status
+# to the endpoint server.
+Role.StateConsumer=None
+
+# Specified program is invoked with XML file argument specifying role
+#  configuration.
+Role.ConfigurationConsumer=None
+
+# Specified program is invoked with XML file argument specifying role topology.
+Role.TopologyConsumer=None
+
+# Enable instance creation
+Provisioning.Enabled=n
+
+# Rely on cloud-init to provision
+Provisioning.UseCloudInit=y
+
+# Password authentication for root account will be unavailable.
+Provisioning.DeleteRootPassword=y
+
+# Generate fresh host key pair.
+Provisioning.RegenerateSshHostKeyPair=y
+
+# Supported values are "rsa", "dsa" and "ecdsa".
+Provisioning.SshHostKeyPairType=rsa
+
+# Monitor host name changes and publish changes via DHCP requests.
+Provisioning.MonitorHostName=y
+
+# Decode CustomData from Base64.
+Provisioning.DecodeCustomData=y
+
+# Execute CustomData after provisioning.
+Provisioning.ExecuteCustomData=n
+
+# Allow reset password of sys user
+Provisioning.AllowResetSysUser=n
+
+# Format if unformatted. If 'n', resource disk will not be mounted.
+ResourceDisk.Format=n
+
+# File system on the resource disk
+# Typically ext3 or ext4. FreeBSD images should use 'ufs2' here.
+ResourceDisk.Filesystem=ext4
+
+# Mount point for the resource disk
+ResourceDisk.MountPoint=/mnt/resource
+
+# Create and use swapfile on resource disk.
+ResourceDisk.EnableSwap=n
+
+# Size of the swapfile.
+ResourceDisk.SwapSizeMB=0
+
+# Enable verbose logging (y|n)
+Logs.Verbose=n
+
+# Is FIPS enabled
+OS.EnableFIPS=n
+
+# Root device timeout in seconds.
+OS.RootDeviceScsiTimeout=300
+
+# If "None", the system default version is used.
+OS.OpensslPath=None
+
+# Set the path to SSH keys and configuration files
+OS.SshDir=/etc/ssh
+
+# Enable or disable self-update, default is enabled
+AutoUpdate.Enabled=y
+AutoUpdate.GAFamily=Prod
+
+# Determine if the overprovisioning feature is enabled. If yes, hold extension
+# handling until inVMArtifactsProfile.OnHold is false.
+# Default is disabled
+# EnableOverProvisioning=n
diff --git a/init/photonos/waagent.service b/init/photonos/waagent.service
new file mode 100644
index 00000000..6d17facc
--- /dev/null
+++ b/init/photonos/waagent.service
@@ -0,0 +1,16 @@
+[Unit]
+Description=Azure Linux Agent
+Wants=systemd-networkd-wait-online.service sshd.service sshd-keygen.service
+After=systemd-networkd-wait-online.service cloud-init.service
+
+ConditionFileIsExecutable=/usr/bin/waagent
+ConditionPathExists=/etc/waagent.conf
+
+[Service]
+Type=simple
+ExecStart=/usr/bin/python -u /usr/bin/waagent -daemon
+Restart=always
+RestartSec=5
+
+[Install]
+WantedBy=multi-user.target
diff --git a/setup.py b/setup.py
index 23680ed8..79a6da44 100755
--- a/setup.py
+++ b/setup.py
@@ -95,7 +95,13 @@ def get_data_files(name, version, fullname):  # pylint: disable=R0912
     systemd_dir_path = osutil.get_systemd_unit_file_install_path()
     agent_bin_path = osutil.get_agent_bin_path()
 
-    if name == 'redhat' or name == 'centos':  # pylint: disable=R1714
+    if name == 'photonos':
+        set_bin_files(data_files, dest="/usr/bin")
+        set_conf_files(data_files, dest="/etc",
+                       src=["config/photonos/waagent.conf"])
+        set_systemd_files(data_files, dest='/usr/lib/systemd/system',
+                          src=["init/photonos/waagent.service"])
+    elif name == 'redhat' or name == 'centos':  # pylint: disable=R1714
         set_bin_files(data_files, dest=agent_bin_path)
         set_conf_files(data_files)
         set_logrotate_files(data_files)
-- 
2.25.1

