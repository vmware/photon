From 487081b495fa67432b5100aaf8eac698caef9cac Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Thu, 17 Feb 2022 11:47:22 +0530
Subject: [PATCH] Patch VMware DS to handle network settings from vmtoolsd

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 cloudinit/sources/DataSourceVMware.py | 128 +++++++++++++++++++++++++-
 1 file changed, 125 insertions(+), 3 deletions(-)

diff --git a/cloudinit/sources/DataSourceVMware.py b/cloudinit/sources/DataSourceVMware.py
index 6ef7c9d5..e886ea1e 100644
--- a/cloudinit/sources/DataSourceVMware.py
+++ b/cloudinit/sources/DataSourceVMware.py
@@ -73,6 +73,7 @@ import netifaces
 
 from cloudinit import dmi
 from cloudinit import log as logging
+from cloudinit.net import network_state
 from cloudinit import sources, util
 from cloudinit.subp import ProcessExecutionError, subp, which
 
@@ -83,6 +84,7 @@ NOVAL = "No value found"
 
 DATA_ACCESS_METHOD_ENVVAR = "envvar"
 DATA_ACCESS_METHOD_GUESTINFO = "guestinfo"
+DATA_ACCESS_METHOD_VMTOOLSD = "vmtoolsd-guestinfo"
 
 VMWARE_RPCTOOL = which("vmware-rpctool")
 REDACT = "redact"
@@ -134,6 +136,106 @@ class DataSourceVMware(sources.DataSource):
         self.data_access_method = None
         self.vmware_rpctool = VMWARE_RPCTOOL
 
+    def get_nwk_cfgs_from_guestinfo(self):
+        net_cfg = {'version': 2, 'ethernets': {}}
+        eth_cfg = net_cfg['ethernets']
+
+        dev_index = 0
+        while True:
+            key_prefix = 'interface.' + str(dev_index)
+
+            iface_name = guestinfo(key_prefix + '.name')
+            if not iface_name:
+                break
+
+            eth_cfg[iface_name] = {'match': {}}
+            iface_cfg = eth_cfg[iface_name]
+            iface_cfg['match'].update({'name': iface_name})
+
+            mac = guestinfo(key_prefix + '.mac')
+            if mac:
+                iface_cfg['match'].update({'macaddress': mac})
+
+            key_proto = key_prefix + '.dhcp'
+            dhcp_val = guestinfo(key_proto)
+
+            dhcp_cfg_map = {
+                'yes': {'dhcp4': True, 'dhcp6': True},
+                'ipv4': {'dhcp4': True, 'dhcp6': False},
+                'ipv6': {'dhcp4': False, 'dhcp6': True},
+                'no': {'dhcp4': False, 'dhcp6': False},
+            }
+
+            address = guestinfo(key_prefix + '.address')
+            if dhcp_val and dhcp_val in {'yes', 'ipv4', 'ipv6', 'no'}:
+                iface_cfg.update(dhcp_cfg_map[dhcp_val])
+
+            if (dhcp_val and dhcp_val == 'no') or address:
+                if address:
+                    netmask = guestinfo(key_prefix + '.netmask')
+                    if netmask:
+                        netmask = network_state.mask_to_net_prefix(netmask)
+                        address += '/' + netmask
+
+                    iface_cfg['addresses'] = [address]
+                    iface_cfg.update(dhcp_cfg_map['no'])
+
+            if (not dhcp_val and not address) or \
+                    (dhcp_val == 'no' and not address):
+                LOG.warning("No static IP/DHCP given, using DHCP as default")
+                iface_cfg.update(dhcp_cfg_map['yes'])
+
+            dnsserver = guestinfo('dns.servers')
+            if dnsserver:
+                iface_cfg['nameservers'] = {'addresses': []}
+                dnsdomain = [x.strip() for x in dnsserver.split(',')]
+                for d in dnsdomain:
+                    iface_cfg['nameservers']['addresses'].append(d)
+
+            dnsdomain = guestinfo('dns.domains')
+            if dnsdomain:
+                if 'nameservers' in iface_cfg:
+                    iface_cfg['nameservers'].update({'search': []})
+                else:
+                    iface_cfg['nameservers'] = {'search': []}
+                dnsdomain = [x.strip() for x in dnsdomain.split(',')]
+                for d in dnsdomain:
+                    iface_cfg['nameservers']['search'].append(d)
+
+            route_index = 0
+            default_destination_set = False
+            while True:
+                key_route = key_prefix + '.route.' + str(route_index)
+                route = guestinfo(key_route)
+                if not route:
+                    break
+                if 'routes' not in iface_cfg:
+                    iface_cfg['routes'] = []
+                route = [x.strip() for x in route.split(',')]
+                len_route = len(route)
+                if len_route > 2:
+                    LOG.debug("Route information for %s route in %s device \
+                              incorrect - expected 2 values",
+                              route_index, dev_index)
+                    continue
+
+                if len_route == 2:
+                    # Gateway Destination
+                    d = {'via': route[0], 'to': route[1]}
+                    iface_cfg['routes'].append(d)
+                else:
+                    # length = 1
+                    if not default_destination_set:
+                        d = {'via': route[0], 'to': '0.0.0.0'}
+                        default_destination_set = True
+                    else:
+                        LOG.debug("Default destination set previously, not \
+                                  setting route %s", route_index)
+                route_index += 1
+            dev_index += 1
+
+        return net_cfg if eth_cfg else None
+
     def _get_data(self):
         """
         _get_data loads the metadata, userdata, and vendordata from one of
@@ -182,6 +284,24 @@ class DataSourceVMware(sources.DataSource):
                 if md or ud or vd:
                     self.data_access_method = DATA_ACCESS_METHOD_GUESTINFO
 
+        if not self.data_access_method:
+            md = {}
+            key = 'local-hostname'
+            hostname = guestinfo('hostname')
+            if hostname:
+                LOG.info('Setting local-hostname: %s', hostname)
+                md[key] = hostname
+
+            key = 'network'
+            net_cfg = self.get_nwk_cfgs_from_guestinfo()
+            if net_cfg:
+                LOG.info('Setting network cfg: %s', net_cfg)
+                md[key] = {'config': copy.deepcopy(net_cfg)}
+
+            if md:
+                self.metadata = md
+                self.data_access_method = DATA_ACCESS_METHOD_VMTOOLSD
+
         if not self.data_access_method:
             LOG.error("failed to find a valid data access method")
             return False
@@ -189,7 +309,8 @@ class DataSourceVMware(sources.DataSource):
         LOG.info("using data access method %s", self._get_subplatform())
 
         # Get the metadata.
-        self.metadata = process_metadata(load_json_or_yaml(md))
+        if not self.metadata:
+            self.metadata = process_metadata(load_json_or_yaml(md))
 
         # Get the user data.
         self.userdata_raw = ud
@@ -204,8 +325,7 @@ class DataSourceVMware(sources.DataSource):
         # userdata, or vendordata.
         if self.metadata or self.userdata_raw or self.vendordata_raw:
             return True
-        else:
-            return False
+        return False
 
     def setup(self, is_new_instance):
         """setup(is_new_instance)
@@ -241,6 +361,8 @@ class DataSourceVMware(sources.DataSource):
             get_key_name_fn = get_guestinfo_envvar_key_name
         elif self.data_access_method == DATA_ACCESS_METHOD_GUESTINFO:
             get_key_name_fn = get_guestinfo_key_name
+        elif self.data_access_method == DATA_ACCESS_METHOD_VMTOOLSD:
+            get_key_name_fn = get_guestinfo_key_name
         else:
             return sources.METADATA_UNKNOWN
 
-- 
2.35.1

