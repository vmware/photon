diff --git a/cloudinit/sources/helpers/azure.py b/cloudinit/sources/helpers/azure.py
index d07dc3c0..c5d93a7d 100755
--- a/cloudinit/sources/helpers/azure.py
+++ b/cloudinit/sources/helpers/azure.py
@@ -1,5 +1,6 @@
 # This file is part of cloud-init. See LICENSE file for license information.
 import base64
+import configobj
 import json
 import logging
 import os
@@ -19,6 +20,7 @@ from cloudinit import (
 from cloudinit import distros, subp, temp_utils, url_helper, util, version
 from cloudinit.reporting import events
 from cloudinit.settings import CFG_BUILTIN
+from io import StringIO
 
 LOG = logging.getLogger(__name__)
 
@@ -59,6 +61,8 @@ DEFAULT_REPORT_FAILURE_USER_VISIBLE_MESSAGE = (
     "for more information on remediation."
 )
 
+NETWORKD_LEASES_DIR = '/run/systemd/netif/leases'
+

 def azure_ds_telemetry_reporter(func):
     def impl(*args, **kwargs):
@@ -942,6 +945,32 @@ class WALinuxAgentShim:
         report_diagnostic_event(msg, logger_func=LOG.debug)
         return goal_state
 
+    @staticmethod
+    def networkd_parse_lease(content):
+        """Parse a systemd lease file content as in /run/systemd/netif/leases/
+        Parse this (almost) ini style file even though it says:
+          # This is private data. Do not parse.
+        Simply return a dictionary of key/values."""
+
+        return dict(configobj.ConfigObj(StringIO(content), list_values=False))
+
+    @staticmethod
+    def networkd_load_leases(leases_d=None):
+        """Return a dictionary of dictionaries representing each lease
+        found in lease_d.i
+        The top level key will be the filename, which is typically the ifindex."""
+
+        if leases_d is None:
+            leases_d = NETWORKD_LEASES_DIR
+
+        ret = {}
+        if not os.path.isdir(leases_d):
+            return ret
+        for lfile in os.listdir(leases_d):
+            ret[lfile] = WALinuxAgentShim.networkd_parse_lease(
+                util.load_file(os.path.join(leases_d, lfile)))
+        return ret
+
     @azure_ds_telemetry_reporter
     def _get_user_pubkeys(
         self, goal_state: GoalState, pubkey_info: list
