From ba9aa8c477ac3ae0afd75ac860b675c03189c03f Mon Sep 17 00:00:00 2001
From: Vamsi Krishna Brahmajosyula <vamsi-krishna.brahmajosyula@broadcom.com>
Date: Fri, 2 May 2025 00:27:56 -0500
Subject: [PATCH] crypto: Introduce rsa-pkcs1pad_crypt to host encrypt/decrypt
 methods

FIPS 186-5 does not allow rsa pkcs1pad encrypt/decrypt, therefore
move the methods out of canister and fail when fips is enabled.

Signed-off-by: Vamsi Krishna Brahmajosyula <vamsi-krishna.brahmajosyula@broadcom.com>
---
 crypto/rsa-pkcs1pad_crypt.c            | 253 +++++++++++++++++++++++++
 include/crypto/internal/rsa_pkcs1pad.h |  12 ++
 2 files changed, 265 insertions(+)
 create mode 100644 crypto/rsa-pkcs1pad_crypt.c
 create mode 100644 include/crypto/internal/rsa_pkcs1pad.h

diff --git a/crypto/rsa-pkcs1pad_crypt.c b/crypto/rsa-pkcs1pad_crypt.c
new file mode 100644
index 000000000..a8568fe0a
--- /dev/null
+++ b/crypto/rsa-pkcs1pad_crypt.c
@@ -0,0 +1,253 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * RSA padding templates.
+ *
+ * Copyright (c) 2015  Intel Corporation
+ */
+
+#include <crypto/algapi.h>
+#include <crypto/akcipher.h>
+#include <crypto/internal/akcipher.h>
+#include <crypto/internal/rsa.h>
+#include <crypto/internal/rsa_pkcs1pad.h>
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/printk.h>
+#include <linux/module.h>
+#include <linux/random.h>
+#include <linux/scatterlist.h>
+#include <linux/fips.h>
+
+struct pkcs1pad_ctx {
+	struct crypto_akcipher *child;
+	unsigned int key_size;
+};
+
+struct pkcs1pad_request {
+	struct scatterlist in_sg[2], out_sg[1];
+	uint8_t *in_buf, *out_buf;
+	struct akcipher_request child_req;
+};
+
+static void pkcs1pad_sg_set_buf(struct scatterlist *sg, void *buf, size_t len,
+		struct scatterlist *next)
+{
+	int nsegs = next ? 2 : 1;
+
+	sg_init_table(sg, nsegs);
+	sg_set_buf(sg, buf, len);
+
+	if (next)
+		sg_chain(sg, nsegs, next);
+}
+
+static int pkcs1pad_encrypt_complete(struct akcipher_request *req, int err)
+{
+	struct crypto_akcipher *tfm = crypto_akcipher_reqtfm(req);
+	struct pkcs1pad_ctx *ctx = akcipher_tfm_ctx(tfm);
+	struct pkcs1pad_request *req_ctx = akcipher_request_ctx(req);
+	unsigned int pad_len;
+	unsigned int len;
+	u8 *out_buf;
+
+	if (err)
+		goto out;
+
+	len = req_ctx->child_req.dst_len;
+	pad_len = ctx->key_size - len;
+
+	/* Four billion to one */
+	if (likely(!pad_len))
+		goto out;
+
+	out_buf = kzalloc(ctx->key_size, GFP_ATOMIC);
+	err = -ENOMEM;
+	if (!out_buf)
+		goto out;
+
+	sg_copy_to_buffer(req->dst, sg_nents_for_len(req->dst, len),
+			  out_buf + pad_len, len);
+	sg_copy_from_buffer(req->dst,
+			    sg_nents_for_len(req->dst, ctx->key_size),
+			    out_buf, ctx->key_size);
+	kfree_sensitive(out_buf);
+
+out:
+	req->dst_len = ctx->key_size;
+
+	kfree(req_ctx->in_buf);
+
+	return err;
+}
+
+static void pkcs1pad_encrypt_complete_cb(void *data, int err)
+{
+	struct akcipher_request *req = data;
+
+	if (err == -EINPROGRESS)
+		goto out;
+
+	err = pkcs1pad_encrypt_complete(req, err);
+
+out:
+	akcipher_request_complete(req, err);
+}
+
+int pkcs1pad_encrypt(struct akcipher_request *req)
+{
+	struct crypto_akcipher *tfm = crypto_akcipher_reqtfm(req);
+	struct pkcs1pad_ctx *ctx = akcipher_tfm_ctx(tfm);
+	struct pkcs1pad_request *req_ctx = akcipher_request_ctx(req);
+	int err;
+	unsigned int i, ps_end;
+
+	if (fips_enabled) {
+		pr_warn_once("rsa pkcs1pad encrypt is not allowed in fips mode.\n");
+		return -EINVAL;
+	}
+
+	if (!ctx->key_size)
+		return -EINVAL;
+
+	if (req->src_len > ctx->key_size - 11)
+		return -EOVERFLOW;
+
+	if (req->dst_len < ctx->key_size) {
+		req->dst_len = ctx->key_size;
+		return -EOVERFLOW;
+	}
+
+	req_ctx->in_buf = kmalloc(ctx->key_size - 1 - req->src_len,
+				  GFP_KERNEL);
+	if (!req_ctx->in_buf)
+		return -ENOMEM;
+
+	ps_end = ctx->key_size - req->src_len - 2;
+	req_ctx->in_buf[0] = 0x02;
+	for (i = 1; i < ps_end; i++)
+		req_ctx->in_buf[i] = get_random_u32_inclusive(1, 255);
+	req_ctx->in_buf[ps_end] = 0x00;
+
+	pkcs1pad_sg_set_buf(req_ctx->in_sg, req_ctx->in_buf,
+			ctx->key_size - 1 - req->src_len, req->src);
+
+	akcipher_request_set_tfm(&req_ctx->child_req, ctx->child);
+	akcipher_request_set_callback(&req_ctx->child_req, req->base.flags,
+			pkcs1pad_encrypt_complete_cb, req);
+
+	/* Reuse output buffer */
+	akcipher_request_set_crypt(&req_ctx->child_req, req_ctx->in_sg,
+				   req->dst, ctx->key_size - 1, req->dst_len);
+
+	err = crypto_akcipher_encrypt(&req_ctx->child_req);
+	if (err != -EINPROGRESS && err != -EBUSY)
+		return pkcs1pad_encrypt_complete(req, err);
+
+	return err;
+}
+
+static int pkcs1pad_decrypt_complete(struct akcipher_request *req, int err)
+{
+	struct crypto_akcipher *tfm = crypto_akcipher_reqtfm(req);
+	struct pkcs1pad_ctx *ctx = akcipher_tfm_ctx(tfm);
+	struct pkcs1pad_request *req_ctx = akcipher_request_ctx(req);
+	unsigned int dst_len;
+	unsigned int pos;
+	u8 *out_buf;
+
+	if (err)
+		goto done;
+
+	err = -EINVAL;
+	dst_len = req_ctx->child_req.dst_len;
+	if (dst_len < ctx->key_size - 1)
+		goto done;
+
+	out_buf = req_ctx->out_buf;
+	if (dst_len == ctx->key_size) {
+		if (out_buf[0] != 0x00)
+			/* Decrypted value had no leading 0 byte */
+			goto done;
+
+		dst_len--;
+		out_buf++;
+	}
+
+	if (out_buf[0] != 0x02)
+		goto done;
+
+	for (pos = 1; pos < dst_len; pos++)
+		if (out_buf[pos] == 0x00)
+			break;
+	if (pos < 9 || pos == dst_len)
+		goto done;
+	pos++;
+
+	err = 0;
+
+	if (req->dst_len < dst_len - pos)
+		err = -EOVERFLOW;
+	req->dst_len = dst_len - pos;
+
+	if (!err)
+		sg_copy_from_buffer(req->dst,
+				sg_nents_for_len(req->dst, req->dst_len),
+				out_buf + pos, req->dst_len);
+
+done:
+	kfree_sensitive(req_ctx->out_buf);
+
+	return err;
+}
+
+static void pkcs1pad_decrypt_complete_cb(void *data, int err)
+{
+	struct akcipher_request *req = data;
+
+	if (err == -EINPROGRESS)
+		goto out;
+
+	err = pkcs1pad_decrypt_complete(req, err);
+
+out:
+	akcipher_request_complete(req, err);
+}
+
+int pkcs1pad_decrypt(struct akcipher_request *req)
+{
+	struct crypto_akcipher *tfm = crypto_akcipher_reqtfm(req);
+	struct pkcs1pad_ctx *ctx = akcipher_tfm_ctx(tfm);
+	struct pkcs1pad_request *req_ctx = akcipher_request_ctx(req);
+	int err;
+
+	if (fips_enabled) {
+		pr_warn_once("rsa pkcs1pad decrypt is not allowed in fips mode.\n");
+		return -EINVAL;
+	}
+
+	if (!ctx->key_size || req->src_len != ctx->key_size)
+		return -EINVAL;
+
+	req_ctx->out_buf = kmalloc(ctx->key_size, GFP_KERNEL);
+	if (!req_ctx->out_buf)
+		return -ENOMEM;
+
+	pkcs1pad_sg_set_buf(req_ctx->out_sg, req_ctx->out_buf,
+			    ctx->key_size, NULL);
+
+	akcipher_request_set_tfm(&req_ctx->child_req, ctx->child);
+	akcipher_request_set_callback(&req_ctx->child_req, req->base.flags,
+			pkcs1pad_decrypt_complete_cb, req);
+
+	/* Reuse input buffer, output to a new buffer */
+	akcipher_request_set_crypt(&req_ctx->child_req, req->src,
+				   req_ctx->out_sg, req->src_len,
+				   ctx->key_size);
+
+	err = crypto_akcipher_decrypt(&req_ctx->child_req);
+	if (err != -EINPROGRESS && err != -EBUSY)
+		return pkcs1pad_decrypt_complete(req, err);
+
+	return err;
+}
diff --git a/include/crypto/internal/rsa_pkcs1pad.h b/include/crypto/internal/rsa_pkcs1pad.h
new file mode 100644
index 000000000..ad2390366
--- /dev/null
+++ b/include/crypto/internal/rsa_pkcs1pad.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * RSA PKCS1PAD internal helpers
+ *
+ * Copyright (c) 2025, Broadcom, Inc
+ */
+#ifndef _RSA_PKCS1PAD_HELPER_
+#define _RSA_PKCS1PAD_HELPER_
+#include <crypto/akcipher.h>
+int pkcs1pad_encrypt(struct akcipher_request *req);
+int pkcs1pad_decrypt(struct akcipher_request *req);
+#endif
-- 
2.49.0

