From 5b11e5961b3bf0e0e79c22c8899425a06e7d5e62 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthana.kalyanasundaram@broadcom.com>
Date: Mon, 2 Dec 2024 06:58:48 +0000
Subject: [PATCH 07/12] crypto: Remove EXPORT_SYMBOL, EXPORT_SYMBOL_GPL from
 canister

Signed-off-by: Vamsi Krishna Brahmajosyula <vamsi-krishna.brahmajosyula@broadcom.com>
Signed-off-by: Keerthana K <keerthana.kalyanasundaram@broadcom.com>
---
 crypto/aes_generic.c    |  5 -----
 crypto/ecc.c            | 21 ---------------------
 crypto/ecdh_helper.c    |  5 +----
 crypto/geniv.c          |  3 ---
 crypto/rsa_helper.c     |  2 --
 crypto/sha1_generic.c   |  3 ---
 crypto/sha256_generic.c |  4 ----
 crypto/sha3_generic.c   |  3 ---
 crypto/sha512_generic.c |  4 ----
 crypto/testmgr.c        |  2 --
 lib/crypto/aes.c        |  6 ------
 lib/crypto/sha1.c       |  2 --
 lib/crypto/sha256.c     |  4 ----
 13 files changed, 1 insertion(+), 63 deletions(-)

diff --git a/crypto/aes_generic.c b/crypto/aes_generic.c
index 3c66d425c..c5bf42c63 100644
--- a/crypto/aes_generic.c
+++ b/crypto/aes_generic.c
@@ -1118,9 +1118,6 @@ static const u32 crypto_il_tab[4][256] ____cacheline_aligned = {
 	}
 };
 
-EXPORT_SYMBOL_GPL(crypto_ft_tab);
-EXPORT_SYMBOL_GPL(crypto_it_tab);
-
 /**
  * crypto_aes_set_key - Set the AES key.
  * @tfm:	The %crypto_tfm that is used in the context.
@@ -1140,8 +1137,6 @@ int crypto_aes_set_key(struct crypto_tfm *tfm, const u8 *in_key,
 
 	return aes_expandkey(ctx, in_key, key_len);
 }
-EXPORT_SYMBOL_GPL(crypto_aes_set_key);
-
 /* encrypt a block of text */
 
 #define f_rn(bo, bi, n, k)	do {				\
diff --git a/crypto/ecc.c b/crypto/ecc.c
index 7aa54bb27..e0cc81ec9 100644
--- a/crypto/ecc.c
+++ b/crypto/ecc.c
@@ -50,7 +50,6 @@ const struct ecc_curve *ecc_get_curve25519(void)
 {
 	return &ecc_25519;
 }
-EXPORT_SYMBOL(ecc_get_curve25519);
 
 const struct ecc_curve *ecc_get_curve(unsigned int curve_id)
 {
@@ -68,7 +67,6 @@ const struct ecc_curve *ecc_get_curve(unsigned int curve_id)
 		return NULL;
 	}
 }
-EXPORT_SYMBOL(ecc_get_curve);
 
 void ecc_digits_from_bytes(const u8 *in, unsigned int nbytes,
 			   u64 *out, unsigned int ndigits)
@@ -90,7 +88,6 @@ void ecc_digits_from_bytes(const u8 *in, unsigned int nbytes,
 	}
 	ecc_swap_digits(in, out, ndigits);
 }
-EXPORT_SYMBOL(ecc_digits_from_bytes);
 
 static u64 *ecc_alloc_digits_space(unsigned int ndigits)
 {
@@ -132,7 +129,6 @@ struct ecc_point *ecc_alloc_point(unsigned int ndigits)
 	kfree(p);
 	return NULL;
 }
-EXPORT_SYMBOL(ecc_alloc_point);
 
 void ecc_free_point(struct ecc_point *p)
 {
@@ -143,7 +139,6 @@ void ecc_free_point(struct ecc_point *p)
 	kfree_sensitive(p->y);
 	kfree_sensitive(p);
 }
-EXPORT_SYMBOL(ecc_free_point);
 
 static void vli_clear(u64 *vli, unsigned int ndigits)
 {
@@ -165,7 +160,6 @@ bool vli_is_zero(const u64 *vli, unsigned int ndigits)
 
 	return true;
 }
-EXPORT_SYMBOL(vli_is_zero);
 
 /* Returns nonzero if bit of vli is set. */
 static u64 vli_test_bit(const u64 *vli, unsigned int bit)
@@ -208,7 +202,6 @@ unsigned int vli_num_bits(const u64 *vli, unsigned int ndigits)
 
 	return ((num_digits - 1) * 64 + i);
 }
-EXPORT_SYMBOL(vli_num_bits);
 
 /* Set dest from unaligned bit string src. */
 void vli_from_be64(u64 *dest, const void *src, unsigned int ndigits)
@@ -219,7 +212,6 @@ void vli_from_be64(u64 *dest, const void *src, unsigned int ndigits)
 	for (i = 0; i < ndigits; i++)
 		dest[i] = get_unaligned_be64(&from[ndigits - 1 - i]);
 }
-EXPORT_SYMBOL(vli_from_be64);
 
 void vli_from_le64(u64 *dest, const void *src, unsigned int ndigits)
 {
@@ -229,7 +221,6 @@ void vli_from_le64(u64 *dest, const void *src, unsigned int ndigits)
 	for (i = 0; i < ndigits; i++)
 		dest[i] = get_unaligned_le64(&from[i]);
 }
-EXPORT_SYMBOL(vli_from_le64);
 
 /* Sets dest = src. */
 static void vli_set(u64 *dest, const u64 *src, unsigned int ndigits)
@@ -251,7 +242,6 @@ int vli_cmp(const u64 *left, const u64 *right, unsigned int ndigits)
 
 	return 0;
 }
-EXPORT_SYMBOL(vli_cmp);
 
 /* Computes result = in << c, returning carry. Can modify in place
  * (if result == in). 0 < shift < 64.
@@ -348,7 +338,6 @@ u64 vli_sub(u64 *result, const u64 *left, const u64 *right,
 
 	return borrow;
 }
-EXPORT_SYMBOL(vli_sub);
 
 /* Computes result = left - right, returning borrow. Can modify in place. */
 static u64 vli_usub(u64 *result, const u64 *left, u64 right,
@@ -1008,7 +997,6 @@ void vli_mod_mult_slow(u64 *result, const u64 *left, const u64 *right,
 	vli_mult(product, left, right, ndigits);
 	vli_mmod_slow(result, product, mod, ndigits);
 }
-EXPORT_SYMBOL(vli_mod_mult_slow);
 
 /* Computes result = (left * right) % curve_prime. */
 static void vli_mod_mult_fast(u64 *result, const u64 *left, const u64 *right,
@@ -1108,7 +1096,6 @@ void vli_mod_inv(u64 *result, const u64 *input, const u64 *mod,
 
 	vli_set(result, u, ndigits);
 }
-EXPORT_SYMBOL(vli_mod_inv);
 
 /* ------ Point operations ------ */
 
@@ -1118,7 +1105,6 @@ bool ecc_point_is_zero(const struct ecc_point *point)
 	return (vli_is_zero(point->x, point->ndigits) &&
 		vli_is_zero(point->y, point->ndigits));
 }
-EXPORT_SYMBOL(ecc_point_is_zero);
 
 /* Point multiplication algorithm using Montgomery's ladder with co-Z
  * coordinates. From https://eprint.iacr.org/2011/338.pdf
@@ -1465,7 +1451,6 @@ void ecc_point_mult_shamir(const struct ecc_point *result,
 	vli_mod_inv(z, z, curve->p, ndigits);
 	apply_z(rx, ry, z, curve);
 }
-EXPORT_SYMBOL(ecc_point_mult_shamir);
 
 /*
  * This function performs checks equivalent to Appendix A.4.2 of FIPS 186-5.
@@ -1509,7 +1494,6 @@ int ecc_is_key_valid(unsigned int curve_id, unsigned int ndigits,
 
 	return __ecc_is_key_valid(curve, private_key, ndigits);
 }
-EXPORT_SYMBOL(ecc_is_key_valid);
 
 /*
  * ECC private keys are generated using the method of rejection sampling,
@@ -1560,7 +1544,6 @@ int ecc_gen_privkey(unsigned int curve_id, unsigned int ndigits,
 
 	return 0;
 }
-EXPORT_SYMBOL(ecc_gen_privkey);
 
 int ecc_make_pub_key(unsigned int curve_id, unsigned int ndigits,
 		     const u64 *private_key, u64 *public_key)
@@ -1596,7 +1579,6 @@ int ecc_make_pub_key(unsigned int curve_id, unsigned int ndigits,
 out:
 	return ret;
 }
-EXPORT_SYMBOL(ecc_make_pub_key);
 
 /* SP800-56A section 5.6.2.3.4 partial verification: ephemeral keys only */
 int ecc_is_pubkey_valid_partial(const struct ecc_curve *curve,
@@ -1629,7 +1611,6 @@ int ecc_is_pubkey_valid_partial(const struct ecc_curve *curve,
 
 	return 0;
 }
-EXPORT_SYMBOL(ecc_is_pubkey_valid_partial);
 
 /* SP800-56A section 5.6.2.3.3 full verification */
 int ecc_is_pubkey_valid_full(const struct ecc_curve *curve,
@@ -1656,7 +1637,6 @@ int ecc_is_pubkey_valid_full(const struct ecc_curve *curve,
 
 	return ret;
 }
-EXPORT_SYMBOL(ecc_is_pubkey_valid_full);
 
 static int get_jitter_ent_random_bytes(u64 *buf, unsigned int len)
 {
@@ -1735,7 +1715,6 @@ int crypto_ecdh_shared_secret(unsigned int curve_id, unsigned int ndigits,
 out:
 	return ret;
 }
-EXPORT_SYMBOL(crypto_ecdh_shared_secret);
 
 MODULE_DESCRIPTION("core elliptic curve module");
 MODULE_LICENSE("Dual BSD/GPL");
diff --git a/crypto/ecdh_helper.c b/crypto/ecdh_helper.c
index 5dac6b348..78cd5252f 100644
--- a/crypto/ecdh_helper.c
+++ b/crypto/ecdh_helper.c
@@ -29,7 +29,6 @@ unsigned int crypto_ecdh_key_len(const struct ecdh *params)
 {
 	return ECDH_KPP_SECRET_MIN_SIZE + params->key_size;
 }
-EXPORT_SYMBOL_GPL(crypto_ecdh_key_len);
 
 int crypto_ecdh_encode_key(char *buf, unsigned int len,
 			   const struct ecdh *params)
@@ -52,7 +51,6 @@ int crypto_ecdh_encode_key(char *buf, unsigned int len,
 
 	return 0;
 }
-EXPORT_SYMBOL_GPL(crypto_ecdh_encode_key);
 
 int crypto_ecdh_decode_key(const char *buf, unsigned int len,
 			   struct ecdh *params)
@@ -80,5 +78,4 @@ int crypto_ecdh_decode_key(const char *buf, unsigned int len,
 	params->key = (void *)ptr;
 
 	return 0;
-}
-EXPORT_SYMBOL_GPL(crypto_ecdh_decode_key);
+}
\ No newline at end of file
diff --git a/crypto/geniv.c b/crypto/geniv.c
index bee4621b4..2ac9bc761 100644
--- a/crypto/geniv.c
+++ b/crypto/geniv.c
@@ -104,7 +104,6 @@ struct aead_instance *aead_geniv_alloc(struct crypto_template *tmpl,
 	inst = ERR_PTR(err);
 	goto out;
 }
-EXPORT_SYMBOL_GPL(aead_geniv_alloc);
 
 int aead_init_geniv(struct crypto_aead *aead)
 {
@@ -148,7 +147,6 @@ int aead_init_geniv(struct crypto_aead *aead)
 	crypto_put_default_null_skcipher();
 	goto out;
 }
-EXPORT_SYMBOL_GPL(aead_init_geniv);
 
 void aead_exit_geniv(struct crypto_aead *tfm)
 {
@@ -157,7 +155,6 @@ void aead_exit_geniv(struct crypto_aead *tfm)
 	crypto_free_aead(ctx->child);
 	crypto_put_default_null_skcipher();
 }
-EXPORT_SYMBOL_GPL(aead_exit_geniv);
 
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("Shared IV generator code");
diff --git a/crypto/rsa_helper.c b/crypto/rsa_helper.c
index 94266f290..9deb71e13 100644
--- a/crypto/rsa_helper.c
+++ b/crypto/rsa_helper.c
@@ -164,7 +164,6 @@ int rsa_parse_pub_key(struct rsa_key *rsa_key, const void *key,
 {
 	return asn1_ber_decoder(&rsapubkey_decoder, rsa_key, key, key_len);
 }
-EXPORT_SYMBOL_GPL(rsa_parse_pub_key);
 
 /**
  * rsa_parse_priv_key() - decodes the BER encoded buffer and stores in the
@@ -183,4 +182,3 @@ int rsa_parse_priv_key(struct rsa_key *rsa_key, const void *key,
 {
 	return asn1_ber_decoder(&rsaprivkey_decoder, rsa_key, key, key_len);
 }
-EXPORT_SYMBOL_GPL(rsa_parse_priv_key);
diff --git a/crypto/sha1_generic.c b/crypto/sha1_generic.c
index 193345133..c5efc0a3a 100644
--- a/crypto/sha1_generic.c
+++ b/crypto/sha1_generic.c
@@ -26,7 +26,6 @@ const u8 sha1_zero_message_hash[SHA1_DIGEST_SIZE] = {
 	0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90,
 	0xaf, 0xd8, 0x07, 0x09
 };
-EXPORT_SYMBOL_GPL(sha1_zero_message_hash);
 
 static void sha1_generic_block_fn(struct sha1_state *sst, u8 const *src,
 				  int blocks)
@@ -45,7 +44,6 @@ int crypto_sha1_update(struct shash_desc *desc, const u8 *data,
 {
 	return fcw_sha1_base_do_update(desc, data, len, sha1_generic_block_fn);
 }
-EXPORT_SYMBOL(crypto_sha1_update);
 
 static int sha1_final(struct shash_desc *desc, u8 *out)
 {
@@ -59,7 +57,6 @@ int crypto_sha1_finup(struct shash_desc *desc, const u8 *data,
 	fcw_sha1_base_do_update(desc, data, len, sha1_generic_block_fn);
 	return sha1_final(desc, out);
 }
-EXPORT_SYMBOL(crypto_sha1_finup);
 
 static struct shash_alg alg = {
 	.digestsize	=	SHA1_DIGEST_SIZE,
diff --git a/crypto/sha256_generic.c b/crypto/sha256_generic.c
index b00521f1a..c5c12378b 100644
--- a/crypto/sha256_generic.c
+++ b/crypto/sha256_generic.c
@@ -23,7 +23,6 @@ const u8 sha224_zero_message_hash[SHA224_DIGEST_SIZE] = {
 	0xb0, 0x1f, 0x82, 0x8e, 0xa6, 0x2a, 0xc5, 0xb3, 0xe4,
 	0x2f
 };
-EXPORT_SYMBOL_GPL(sha224_zero_message_hash);
 
 const u8 sha256_zero_message_hash[SHA256_DIGEST_SIZE] = {
 	0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
@@ -31,7 +30,6 @@ const u8 sha256_zero_message_hash[SHA256_DIGEST_SIZE] = {
 	0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
 	0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
 };
-EXPORT_SYMBOL_GPL(sha256_zero_message_hash);
 
 int crypto_sha256_update(struct shash_desc *desc, const u8 *data,
 			  unsigned int len)
@@ -39,7 +37,6 @@ int crypto_sha256_update(struct shash_desc *desc, const u8 *data,
 	sha256_update(shash_desc_ctx(desc), data, len);
 	return 0;
 }
-EXPORT_SYMBOL(crypto_sha256_update);
 
 static int crypto_sha256_final(struct shash_desc *desc, u8 *out)
 {
@@ -56,7 +53,6 @@ int crypto_sha256_finup(struct shash_desc *desc, const u8 *data,
 	sha256_update(shash_desc_ctx(desc), data, len);
 	return crypto_sha256_final(desc, hash);
 }
-EXPORT_SYMBOL(crypto_sha256_finup);
 
 static struct shash_alg sha256_algs[2] = { {
 	.digestsize	=	SHA256_DIGEST_SIZE,
diff --git a/crypto/sha3_generic.c b/crypto/sha3_generic.c
index 0e36ce003..3aee57c30 100644
--- a/crypto/sha3_generic.c
+++ b/crypto/sha3_generic.c
@@ -171,7 +171,6 @@ int crypto_sha3_init(struct shash_desc *desc)
 	memset(sctx->st, 0, sizeof(sctx->st));
 	return 0;
 }
-EXPORT_SYMBOL(crypto_sha3_init);
 
 int crypto_sha3_update(struct shash_desc *desc, const u8 *data,
 		       unsigned int len)
@@ -209,7 +208,6 @@ int crypto_sha3_update(struct shash_desc *desc, const u8 *data,
 
 	return 0;
 }
-EXPORT_SYMBOL(crypto_sha3_update);
 
 int crypto_sha3_final(struct shash_desc *desc, u8 *out)
 {
@@ -236,7 +234,6 @@ int crypto_sha3_final(struct shash_desc *desc, u8 *out)
 	memset(sctx, 0, sizeof(*sctx));
 	return 0;
 }
-EXPORT_SYMBOL(crypto_sha3_final);
 
 static struct shash_alg algs[] = { {
 	.digestsize		= SHA3_224_DIGEST_SIZE,
diff --git a/crypto/sha512_generic.c b/crypto/sha512_generic.c
index dbdabde87..7920da6f9 100644
--- a/crypto/sha512_generic.c
+++ b/crypto/sha512_generic.c
@@ -27,7 +27,6 @@ const u8 sha384_zero_message_hash[SHA384_DIGEST_SIZE] = {
 	0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb,
 	0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b
 };
-EXPORT_SYMBOL_GPL(sha384_zero_message_hash);
 
 const u8 sha512_zero_message_hash[SHA512_DIGEST_SIZE] = {
 	0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
@@ -39,7 +38,6 @@ const u8 sha512_zero_message_hash[SHA512_DIGEST_SIZE] = {
 	0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
 	0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e
 };
-EXPORT_SYMBOL_GPL(sha512_zero_message_hash);
 
 static inline u64 Ch(u64 x, u64 y, u64 z)
 {
@@ -160,7 +158,6 @@ int crypto_sha512_update(struct shash_desc *desc, const u8 *data,
 {
 	return fcw_sha512_base_do_update(desc, data, len, sha512_generic_block_fn);
 }
-EXPORT_SYMBOL(crypto_sha512_update);
 
 static int sha512_final(struct shash_desc *desc, u8 *hash)
 {
@@ -174,7 +171,6 @@ int crypto_sha512_finup(struct shash_desc *desc, const u8 *data,
 	fcw_sha512_base_do_update(desc, data, len, sha512_generic_block_fn);
 	return sha512_final(desc, hash);
 }
-EXPORT_SYMBOL(crypto_sha512_finup);
 
 static struct shash_alg sha512_algs[2] = { {
 	.digestsize	=	SHA512_DIGEST_SIZE,
diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index 510ef0138..b5e29b2ad 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -6024,5 +6024,3 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 }
 
 #endif /* CONFIG_CRYPTO_MANAGER_DISABLE_TESTS */
-
-EXPORT_SYMBOL_GPL(alg_test);
diff --git a/lib/crypto/aes.c b/lib/crypto/aes.c
index eafe14d02..d6876f690 100644
--- a/lib/crypto/aes.c
+++ b/lib/crypto/aes.c
@@ -85,9 +85,6 @@ static volatile const u8 __cacheline_aligned aes_inv_sbox[] = {
 extern const u8 crypto_aes_sbox[256] __alias(aes_sbox);
 extern const u8 crypto_aes_inv_sbox[256] __alias(aes_inv_sbox);
 
-EXPORT_SYMBOL(crypto_aes_sbox);
-EXPORT_SYMBOL(crypto_aes_inv_sbox);
-
 static u32 mul_by_x(u32 w)
 {
 	u32 x = w & 0x7f7f7f7f;
@@ -247,7 +244,6 @@ int aes_expandkey(struct crypto_aes_ctx *ctx, const u8 *in_key,
 
 	return 0;
 }
-EXPORT_SYMBOL(aes_expandkey);
 
 /**
  * aes_encrypt - Encrypt a single AES block
@@ -298,7 +294,6 @@ void aes_encrypt(const struct crypto_aes_ctx *ctx, u8 *out, const u8 *in)
 	put_unaligned_le32(subshift(st1, 2) ^ rkp[6], out + 8);
 	put_unaligned_le32(subshift(st1, 3) ^ rkp[7], out + 12);
 }
-EXPORT_SYMBOL(aes_encrypt);
 
 /**
  * aes_decrypt - Decrypt a single AES block
@@ -349,7 +344,6 @@ void aes_decrypt(const struct crypto_aes_ctx *ctx, u8 *out, const u8 *in)
 	put_unaligned_le32(inv_subshift(st1, 2) ^ rkp[6], out + 8);
 	put_unaligned_le32(inv_subshift(st1, 3) ^ rkp[7], out + 12);
 }
-EXPORT_SYMBOL(aes_decrypt);
 
 MODULE_DESCRIPTION("Generic AES library");
 MODULE_AUTHOR("Ard Biesheuvel <ard.biesheuvel@linaro.org>");
diff --git a/lib/crypto/sha1.c b/lib/crypto/sha1.c
index ebb60519a..3c3b03b81 100644
--- a/lib/crypto/sha1.c
+++ b/lib/crypto/sha1.c
@@ -121,7 +121,6 @@ void sha1_transform(__u32 *digest, const char *data, __u32 *array)
 	digest[3] += D;
 	digest[4] += E;
 }
-EXPORT_SYMBOL(sha1_transform);
 
 /**
  * sha1_init - initialize the vectors for a SHA1 digest
@@ -135,7 +134,6 @@ void sha1_init(__u32 *buf)
 	buf[3] = 0x10325476;
 	buf[4] = 0xc3d2e1f0;
 }
-EXPORT_SYMBOL(sha1_init);
 
 MODULE_DESCRIPTION("SHA-1 Algorithm");
 MODULE_LICENSE("GPL");
diff --git a/lib/crypto/sha256.c b/lib/crypto/sha256.c
index ca5cd6492..285384817 100644
--- a/lib/crypto/sha256.c
+++ b/lib/crypto/sha256.c
@@ -146,7 +146,6 @@ void sha256_update(struct sha256_state *sctx, const u8 *data, unsigned int len)
 	lib_sha256_base_do_update(sctx, data, len, sha256_transform_blocks);
 #endif
 }
-EXPORT_SYMBOL(sha256_update);
 
 static void __sha256_final(struct sha256_state *sctx, u8 *out, int digest_size)
 {
@@ -158,13 +157,11 @@ void sha256_final(struct sha256_state *sctx, u8 *out)
 {
 	__sha256_final(sctx, out, 32);
 }
-EXPORT_SYMBOL(sha256_final);
 
 void sha224_final(struct sha256_state *sctx, u8 *out)
 {
 	__sha256_final(sctx, out, 28);
 }
-EXPORT_SYMBOL(sha224_final);
 
 void sha256(const u8 *data, unsigned int len, u8 *out)
 {
@@ -174,7 +171,6 @@ void sha256(const u8 *data, unsigned int len, u8 *out)
 	sha256_update(&sctx, data, len);
 	sha256_final(&sctx, out);
 }
-EXPORT_SYMBOL(sha256);
 
 MODULE_DESCRIPTION("SHA-256 Algorithm");
 MODULE_LICENSE("GPL");
-- 
2.39.4

