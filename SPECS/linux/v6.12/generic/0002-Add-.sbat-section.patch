From: Kuntal Nayak <kuntal.nayak@broadcom.com>
Date: Thu, 23 Jan 2025 03:04:48 +0000
Subject: [PATCH 2/3] Add .sbat section

To be able to revoke previously shipped signed kernel images by SBAT
generation. See https://github.com/rhboot/shim/blob/main/SBAT.md

Upstream kernel v6.1.90 modified the build-tool to generate bzImage and section alignments.
- We are injecting .sbat section in between setup and compressed vmlinux sections.
- Adhering to new alignment requirements, we shift vmlinux's sections by one page.
- Include sbat in setup sectors' info because bootloader offsets kernel image using this bootparams.

Signed-off-by: Alexey Makhalov <amakhalov@vmware.com>
Signed-off-by: Kuntal Nayak <kuntal.nayak@broadom.com>
---
 arch/x86/boot/Makefile      |  6 +++--
 arch/x86/boot/header.S      | 47 +++++++++++++++++++++++++++++--------
 arch/x86/boot/tools/build.c | 28 ++++++++++++++++++++--
 security/Kconfig            | 12 ++++++++++
 4 files changed, 79 insertions(+), 14 deletions(-)

diff --git a/arch/x86/boot/Makefile b/arch/x86/boot/Makefile
index 9cc0ff6e9..9d48dbd16 100644
--- a/arch/x86/boot/Makefile
+++ b/arch/x86/boot/Makefile
@@ -63,7 +63,7 @@ $(obj)/bzImage: asflags-y  := $(SVGA_MODE)
 quiet_cmd_image = BUILD   $@
 silent_redirect_image = >/dev/null
 cmd_image = $(obj)/tools/build $(obj)/setup.bin $(obj)/vmlinux.bin \
-			       $(obj)/zoffset.h $@ $($(quiet)redirect_image)
+			       $(obj)/zoffset.h $@ $(CONFIG_SECURITY_SBAT) $($(quiet)redirect_image)
 
 $(obj)/bzImage: $(obj)/setup.bin $(obj)/vmlinux.bin $(obj)/tools/build FORCE
 	$(call if_changed,image)
@@ -84,9 +84,11 @@ targets += zoffset.h
 $(obj)/zoffset.h: $(obj)/compressed/vmlinux FORCE
 	$(call if_changed,zoffset)
 
+$(obj)/sbat_info.h: $(CONFIG_SECURITY_SBAT)
+	@echo "#define sbat_section_len $$(wc -c < $< )" > $@
 
 AFLAGS_header.o += -I$(objtree)/$(obj)
-$(obj)/header.o: $(obj)/zoffset.h
+$(obj)/header.o: $(obj)/zoffset.h $(obj)/sbat_info.h
 
 LDFLAGS_setup.elf	:= -m elf_i386 -z noexecstack -T
 $(obj)/setup.elf: $(src)/setup.ld $(SETUP_OBJS) FORCE
diff --git a/arch/x86/boot/header.S b/arch/x86/boot/header.S
index b5c79f433..35bfde424 100644
--- a/arch/x86/boot/header.S
+++ b/arch/x86/boot/header.S
@@ -38,6 +38,12 @@ SYSSEG		= 0x1000		/* historical load address >> 4 */
 
 	.set	salign, 0x1000
 	.set	falign, 0x200
+	.set    sbat_sz, 0x0
+
+#ifdef CONFIG_SECURITY_SBAT
+	#include "sbat_info.h"
+	.set    sbat_sz, salign
+#endif
 
 	.code16
 	.section ".bstext", "ax"
@@ -83,9 +89,9 @@ optional_header:
 	.long	ZO__end - ZO__data		# SizeOfInitializedData
 	.long	0				# SizeOfUninitializedData
 
-	.long	setup_size + ZO_efi_pe_entry	# AddressOfEntryPoint
-
-	.long	setup_size			# BaseOfCode
+	.long	setup_size + ZO_efi_pe_entry + sbat_sz
+						# AddressOfEntryPoint
+	.long	setup_size + sbat_sz		# BaseOfCode
 #ifdef CONFIG_X86_32
 	.long	0				# data
 #endif
@@ -106,7 +112,7 @@ extra_header_fields:
 	.word	0				# MinorSubsystemVersion
 	.long	0				# Win32VersionValue
 
-	.long	setup_size + ZO__end		# SizeOfImage
+	.long	setup_size + ZO__end + sbat_sz	# SizeOfImage
 
 	.long	salign				# SizeOfHeaders
 	.long	0				# CheckSum
@@ -173,21 +179,41 @@ pecompat_fstart:
 	.byte	0x1				# Version
 	.byte	8				# Size
 	.word	IMAGE_FILE_MACHINE_I386		# PE machine type
-	.long	setup_size + ZO_efi32_pe_entry	# Entrypoint
+	.long	setup_size + ZO_efi32_pe_entry + sbat_sz
+						# Entrypoint
 	.byte	0x0				# Sentinel
 	.popsection
 #else
 	.set	pecompat_fstart, setup_size
 #endif
+
+#ifdef CONFIG_SECURITY_SBAT
+	.ascii	".sbat"
+	.byte	0
+	.byte	0
+	.byte	0
+	.long	sbat_section_len		# VirtualSize
+	.long	setup_size			# VirtualAddress
+	.long	sbat_sz				# SizeOfRawData
+	.long	setup_size			# PointerToRawData
+	.long	0				# PointerToRelocations
+	.long	0				# PointerToLineNumbers
+	.word	0				# NumberOfRelocations
+	.word	0				# NumberOfLineNumbers
+	.long	IMAGE_SCN_CNT_INITIALIZED_DATA	| \
+		IMAGE_SCN_MEM_READ		| \
+		IMAGE_SCN_MEM_DISCARDABLE	# Characteristics
+#endif
+
 	.ascii	".text"
 	.byte	0
 	.byte	0
 	.byte	0
 	.long	ZO__data
-	.long	setup_size
+	.long	setup_size + sbat_sz
 	.long	ZO__data			# Size of initialized data
 						# on disk
-	.long	setup_size
+	.long	setup_size + sbat_sz
 	.long	0				# PointerToRelocations
 	.long	0				# PointerToLineNumbers
 	.word	0				# NumberOfRelocations
@@ -198,15 +224,16 @@ pecompat_fstart:
 
 	.ascii	".data\0\0\0"
 	.long	ZO__end - ZO__data		# VirtualSize
-	.long	setup_size + ZO__data		# VirtualAddress
+	.long	setup_size + ZO__data + sbat_sz	# VirtualAddress
 	.long	ZO__edata - ZO__data		# SizeOfRawData
-	.long	setup_size + ZO__data		# PointerToRawData
+	.long	setup_size + ZO__data + sbat_sz	# PointerToRawData
 
 	.long	0, 0, 0
 	.long	IMAGE_SCN_CNT_INITIALIZED_DATA	| \
 		IMAGE_SCN_MEM_READ		| \
 		IMAGE_SCN_MEM_WRITE		# Characteristics
 
+
 	.set	section_count, (. - section_table) / 40
 #endif /* CONFIG_EFI_STUB */
 
@@ -219,7 +246,7 @@ sentinel:	.byte 0xff, 0xff        /* Used to detect broken loaders */
 
 	.globl	hdr
 hdr:
-		.byte setup_sects - 1
+		.byte setup_sects - 1 + sbat_sz / 0x200
 root_flags:	.word ROOT_RDONLY
 syssize:	.long ZO__edata / 16
 ram_size:	.word 0			/* Obsolete */
diff --git a/arch/x86/boot/tools/build.c b/arch/x86/boot/tools/build.c
index 10311d77c..500e8701c 100644
--- a/arch/x86/boot/tools/build.c
+++ b/arch/x86/boot/tools/build.c
@@ -48,6 +48,7 @@ typedef unsigned int   u32;
 u8 buf[SETUP_SECT_MAX*512];
 
 static unsigned long _edata;
+#define SBAT_SZ 0x1000
 
 /*----------------------------------------------------------------------*/
 
@@ -171,15 +172,16 @@ static void parse_zoffset(char *fname)
 
 int main(int argc, char ** argv)
 {
-	unsigned int i, sz, setup_sectors;
+	unsigned int i, sz, setup_sectors, sbat_section_len = 0;
 	int c;
 	struct stat sb;
 	FILE *file, *dest;
 	int fd;
 	void *kernel;
 	u32 crc = 0xffffffffUL;
+	u8 sbat_buf[SBAT_SZ];
 
-	if (argc != 5)
+	if (argc != 5 && argc != 6)
 		usage();
 	parse_zoffset(argv[3]);
 
@@ -208,6 +210,21 @@ int main(int argc, char ** argv)
 	i = setup_sectors*512;
 	memset(buf+c, 0, i-c);
 
+	if (argc == 6) {
+		if (stat(argv[5], &sb))
+			die("Unable to stat '%s': %m", argv[5]);
+		sbat_section_len = sb.st_size;
+		memset(sbat_buf, 0, SBAT_SZ);
+		if (sbat_section_len) {
+			file = fopen(argv[5], "r");
+			if (!file)
+				die("Unable to open '%s': %m", argv[5]);
+			if (fread(sbat_buf, 1, sizeof(sbat_buf), file) != sbat_section_len)
+				die("Reading sbat failed");
+			fclose(file);
+		}
+	}
+
 	/* Open and stat the kernel file */
 	fd = open(argv[2], O_RDONLY);
 	if (fd < 0)
@@ -226,6 +243,13 @@ int main(int argc, char ** argv)
 	if (fwrite(buf, 1, i, dest) != i)
 		die("Writing setup failed");
 
+	/* Copy the SBAT section data */
+	if (argc == 6 ) {
+		crc = partial_crc32(sbat_buf, SBAT_SZ, crc);
+		if (fwrite(sbat_buf, 1, SBAT_SZ, dest) != SBAT_SZ)
+			die("Writing sbat failed");
+	}
+
 	/* Copy the kernel code */
 	crc = partial_crc32(kernel, sz, crc);
 	if (fwrite(kernel, 1, sz, dest) != sz)
diff --git a/security/Kconfig b/security/Kconfig
index 28e685f53..318d41cc1 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -223,6 +223,18 @@ source "security/loadpin/Kconfig"
 source "security/yama/Kconfig"
 source "security/safesetid/Kconfig"
 source "security/lockdown/Kconfig"
+
+config SECURITY_SBAT
+	string "Add .sbat section to kernel PE image"
+	depends on SECURITY
+	help
+	  If set, this option should be the filename of a CSV-formatted file
+	  containing SBAT data to be included as a .sbat section in PE kernel
+	  image (bzImage).
+
+	  See <https://github.com/rhboot/shim/blob/main/SBAT.md> for more information
+	  about SBAT.
+
 source "security/landlock/Kconfig"
 source "security/ipe/Kconfig"
 
-- 
2.39.4

