From afd3e0dc775a61dc220bdbe91312fdf7e2d68a45 Mon Sep 17 00:00:00 2001
From: Kuntal Nayak <kuntal.nayak@broadcom.com>
Date: Sat, 22 Feb 2025 01:06:00 +0000
Subject: [PATCH 1/3] kernel: lockdown when UEFI secure boot enabled

Implemented a Kernel config that determines whether to lockdown
the kernel at boot time. During LSM initialization, UEFI Secure
Boot status is checked and kernel is locked down.
[AM: updated lockdown_lsm_init() logic to only go with secure boot
lockdown if force (unconditional) config options are not set.]

Signed-off-by: Alexey Makhalov <amakhalov@vmware.com>
Signed-off-by: Kuntal Nayak <kuntal.nayak@broadcom.com>
---
 arch/x86/kernel/Makefile     |  2 ++
 arch/x86/kernel/lockdown.c   | 28 ++++++++++++++++++++++++++++
 include/linux/lockdown.h     |  7 +++++++
 security/lockdown/Kconfig    |  8 ++++++++
 security/lockdown/lockdown.c |  8 ++++++++
 5 files changed, 53 insertions(+)
 create mode 100644 arch/x86/kernel/lockdown.c
 create mode 100644 include/linux/lockdown.h

diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile
index f79189806..855a3698c 100644
--- a/arch/x86/kernel/Makefile
+++ b/arch/x86/kernel/Makefile
@@ -154,6 +154,8 @@ obj-$(CONFIG_X86_CET)			+= cet.o
 
 obj-$(CONFIG_X86_USER_SHADOW_STACK)	+= shstk.o
 
+obj-$(CONFIG_LOCK_DOWN_KERNEL_IN_SECUREBOOT) += lockdown.o
+
 ###
 # 64 bit specific files
 ifeq ($(CONFIG_X86_64),y)
diff --git a/arch/x86/kernel/lockdown.c b/arch/x86/kernel/lockdown.c
new file mode 100644
index 000000000..0904e6326
--- /dev/null
+++ b/arch/x86/kernel/lockdown.c
@@ -0,0 +1,28 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/efi.h>
+#include <uapi/asm/bootparam.h>
+#include <asm/setup.h>
+#include <linux/lockdown.h>
+
+#include <asm/efi.h>
+
+extern struct boot_params boot_params;
+
+static bool is_efi_system(void) {
+	return efi_enabled(EFI_BOOT) ||
+		!strncmp((char *)&boot_params.efi_info.efi_loader_signature, EFI64_LOADER_SIGNATURE, 4) ||
+		!strncmp((char *)&boot_params.efi_info.efi_loader_signature, EFI32_LOADER_SIGNATURE, 4);
+}
+
+/*
+ * Determine whether UEFI Secure Boot is enabled
+ */
+bool secureboot_enabled(void) {
+        if (is_efi_system()) {
+		if (boot_params.secure_boot == efi_secureboot_mode_enabled)
+			return true;
+	}
+	return false;
+}
+
diff --git a/include/linux/lockdown.h b/include/linux/lockdown.h
new file mode 100644
index 000000000..04817eefd
--- /dev/null
+++ b/include/linux/lockdown.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _LINUX_LOCKDOWN_H
+#define _LINUX_LOCKDOWN_H
+
+extern bool secureboot_enabled(void);
+
+#endif
diff --git a/security/lockdown/Kconfig b/security/lockdown/Kconfig
index e84ddf484..f2fa07773 100644
--- a/security/lockdown/Kconfig
+++ b/security/lockdown/Kconfig
@@ -16,6 +16,14 @@ config SECURITY_LOCKDOWN_LSM_EARLY
 	  subsystem is fully initialised. If enabled, lockdown will
 	  unconditionally be called before any other LSMs.
 
+config LOCK_DOWN_KERNEL_IN_SECUREBOOT
+       bool "Enforce kernel lockdown when secure boot enabled"
+       depends on SECURITY_LOCKDOWN_LSM
+       default n
+       help
+         Option to enforce kernel lockdown in UEFI Secure Boot mode. Its
+         functioning depends on architecture specific implementation.
+
 choice
 	prompt "Kernel default lockdown mode"
 	default LOCK_DOWN_KERNEL_FORCE_NONE
diff --git a/security/lockdown/lockdown.c b/security/lockdown/lockdown.c
index f2bdbd55a..646d6ef09 100644
--- a/security/lockdown/lockdown.c
+++ b/security/lockdown/lockdown.c
@@ -13,6 +13,7 @@
 #include <linux/security.h>
 #include <linux/export.h>
 #include <linux/lsm_hooks.h>
+#include <linux/lockdown.h>
 #include <uapi/linux/lsm.h>
 
 static enum lockdown_reason kernel_locked_down;
@@ -21,6 +22,8 @@ static const enum lockdown_reason lockdown_levels[] = {LOCKDOWN_NONE,
 						 LOCKDOWN_INTEGRITY_MAX,
 						 LOCKDOWN_CONFIDENTIALITY_MAX};
 
+bool __weak secureboot_enabled(void) { return false; }
+
 /*
  * Put the kernel into lock-down mode.
  */
@@ -87,6 +90,11 @@ static int __init lockdown_lsm_init(void)
 	lock_kernel_down("Kernel configuration", LOCKDOWN_INTEGRITY_MAX);
 #elif defined(CONFIG_LOCK_DOWN_KERNEL_FORCE_CONFIDENTIALITY)
 	lock_kernel_down("Kernel configuration", LOCKDOWN_CONFIDENTIALITY_MAX);
+#elif defined(CONFIG_LOCK_DOWN_KERNEL_IN_SECUREBOOT)
+        if (secureboot_enabled())
+		lock_kernel_down("EFI Secure Boot mode", LOCKDOWN_INTEGRITY_MAX);
+	else
+		pr_notice("Kernel not locked down\n");
 #endif
 	security_add_hooks(lockdown_hooks, ARRAY_SIZE(lockdown_hooks),
 			   &lockdown_lsmid);
-- 
2.39.4

