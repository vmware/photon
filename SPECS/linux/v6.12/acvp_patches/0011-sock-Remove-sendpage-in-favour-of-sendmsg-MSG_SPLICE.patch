From 06e5acb5d0880fa2b4026f709a9c41990d3a392c Mon Sep 17 00:00:00 2001
From: Shivani Agarwal <shivani.agarwal@broadcom.com>
Date: Wed, 18 Dec 2024 13:26:58 +0000
Subject: [PATCH] sock: Remove ->sendpage*() in favour of
 sendmsg(MSG_SPLICE_PAGES)

sendpage*() API support is removed from upstream as part of commit
https://github.com/gregkh/linux/commit/dc97391e661009eab46783030d2404c9b6e6f2e7

Signed-off-by: Shivani Agarwal <shivani.agarwal@broadcom.com>
---
 crypto/algif_akcipher.c | 16 +---------------
 crypto/algif_ecc.c      |  3 +--
 crypto/algif_kpp.c      | 16 +---------------
 3 files changed, 3 insertions(+), 32 deletions(-)

diff --git a/crypto/algif_akcipher.c b/crypto/algif_akcipher.c
index 8ed305ecc..a838d265c 100644
--- a/crypto/algif_akcipher.c
+++ b/crypto/algif_akcipher.c
@@ -13,7 +13,7 @@
  * The following concept of the memory management is used:
  *
  * The kernel maintains two SGLs, the TX SGL and the RX SGL. The TX SGL is
- * filled by user space with the data submitted via sendpage/sendmsg. Filling
+ * filled by user space with the data submitted via sendmsg. Filling
  * up the TX SGL does not cause a crypto operation -- the data will only be
  * tracked by the kernel. Upon receipt of one recvmsg call, the caller must
  * provide a buffer which is tracked with the RX SGL.
@@ -232,7 +232,6 @@ static struct proto_ops algif_akcipher_ops = {
 
 	.release	=	af_alg_release,
 	.sendmsg	=	akcipher_sendmsg,
-	.sendpage	=	af_alg_sendpage,
 	.recvmsg	=	akcipher_recvmsg,
 	.poll		=	af_alg_poll,
 };
@@ -284,18 +283,6 @@ static int akcipher_sendmsg_nokey(struct socket *sock, struct msghdr *msg,
 	return akcipher_sendmsg(sock, msg, size);
 }
 
-static ssize_t akcipher_sendpage_nokey(struct socket *sock, struct page *page,
-				       int offset, size_t size, int flags)
-{
-	int err;
-
-	err = akcipher_check_key(sock);
-	if (err)
-		return err;
-
-	return af_alg_sendpage(sock, page, offset, size, flags);
-}
-
 static int akcipher_recvmsg_nokey(struct socket *sock, struct msghdr *msg,
 				  size_t ignored, int flags)
 {
@@ -325,7 +312,6 @@ static struct proto_ops algif_akcipher_ops_nokey = {
 
 	.release	=	af_alg_release,
 	.sendmsg	=	akcipher_sendmsg_nokey,
-	.sendpage	=	akcipher_sendpage_nokey,
 	.recvmsg	=	akcipher_recvmsg_nokey,
 	.poll		=	af_alg_poll,
 };
diff --git a/crypto/algif_ecc.c b/crypto/algif_ecc.c
index 6cd495584..ef85503c7 100644
--- a/crypto/algif_ecc.c
+++ b/crypto/algif_ecc.c
@@ -15,7 +15,7 @@
  * The following concept of the memory management is used:
  *
  * The kernel maintains two SGLs, the TX SGL and the RX SGL. The TX SGL is
- * filled by user space with the data submitted via sendpage/sendmsg. Filling
+ * filled by user space with the data submitted via sendmsg. Filling
  * up the TX SGL does not cause a crypto operation -- the data will only be
  * tracked by the kernel. Upon receipt of one recvmsg call, the caller must
  * provide a buffer which is tracked with the RX SGL.
@@ -241,7 +241,6 @@ static struct proto_ops algif_ecc_ops = {
 
 	.release	=	af_alg_release,
 	.sendmsg	=	ecc_sendmsg,
-	.sendpage	=	af_alg_sendpage,
 	.recvmsg	=	ecc_recvmsg,
 	.poll		=	af_alg_poll,
 };
diff --git a/crypto/algif_kpp.c b/crypto/algif_kpp.c
index 581eb232d..b4b1cd841 100644
--- a/crypto/algif_kpp.c
+++ b/crypto/algif_kpp.c
@@ -13,7 +13,7 @@
  * The following concept of the memory management is used:
  *
  * The kernel maintains two SGLs, the TX SGL and the RX SGL. The TX SGL is
- * filled by user space with the data submitted via sendpage/sendmsg. Filling
+ * filled by user space with the data submitted via sendmsg. Filling
  * up the TX SGL does not cause a crypto operation -- the data will only be
  * tracked by the kernel. Upon receipt of one recvmsg call, the caller must
  * provide a buffer which is tracked with the RX SGL.
@@ -237,7 +237,6 @@ static struct proto_ops algif_kpp_ops = {
 
 	.release	=	af_alg_release,
 	.sendmsg	=	kpp_sendmsg,
-	.sendpage	=	af_alg_sendpage,
 	.recvmsg	=	kpp_recvmsg,
 	.poll		=	af_alg_poll,
 };
@@ -290,18 +289,6 @@ static int kpp_sendmsg_nokey(struct socket *sock, struct msghdr *msg,
 	return kpp_sendmsg(sock, msg, size);
 }
 
-static ssize_t kpp_sendpage_nokey(struct socket *sock, struct page *page,
-				       int offset, size_t size, int flags)
-{
-	int err;
-
-	err = kpp_check_key(sock);
-	if (err)
-		return err;
-
-	return af_alg_sendpage(sock, page, offset, size, flags);
-}
-
 static int kpp_recvmsg_nokey(struct socket *sock, struct msghdr *msg,
 				  size_t ignored, int flags)
 {
@@ -331,7 +318,6 @@ static struct proto_ops algif_kpp_ops_nokey = {
 
 	.release	=	af_alg_release,
 	.sendmsg	=	kpp_sendmsg_nokey,
-	.sendpage	=	kpp_sendpage_nokey,
 	.recvmsg	=	kpp_recvmsg_nokey,
 	.poll		=	af_alg_poll,
 };
-- 
2.39.4

