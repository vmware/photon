From 32f90ed75b2fcec94f457bb448f928159c27db60 Mon Sep 17 00:00:00 2001
From: Alexey Makhalov <amakhalov@vmware.com>
Date: Wed, 13 Nov 2024 11:54:05 +0000
Subject: [PATCH] initramfs: support for page aligned format "newca"

   NEWCA format

"newca" archive format (header 0707ca) is similar to "newc"
format (header 070701) but with page aligned regular files
data.

Generated "newca" file is bigger than "newc", but advantage
is that pages with files content can be used by page cache
as is without copying. It allows 1) to speed up the boot
process (zero copy), and 2) to share initrd memory provided
by hypervisor between VMs to get better memory density.

Introduces new function: xadd_pages to put file content
pages to its page cache mapping. Initramfs extraction
logic will use xadd_pages instead of xwrite for "newca"
archive format.

In addition, initrd memory will not be freed for "newca" as
it is used by page caches.

   Page sharing

"newca" format actively used by CRX. For shared images it may
map initrds from host visorfs to the guest physical address space
to avoid copying (known as a page sharing). In this case guest
should not free and reuse those pages.

   Multi image

CRX often use concatenation of initrds, so introduce support
of multiple image extraction support

If there is a mix of newc and newca images in initramfs,
we blindly retain the entire initramfs.
We track the start and end offsets of each individual newc image,
while combining adjacent images into larger blobs.
We can then free these newc encoded sections of the initramfs

   Large files

ASCII cpio format (070701/070702) header uses 32bit field to store the
size of the file. It limits maximum file size incide cpio to 4GB.
NEWCA format (0707ca) inherited the same limitation.

There is a last field in ascii cpio header - checksum. It is used
only in 070702 (newc with checksum). This field is not used and always
zero in 070701 and 0707ca.

Checksum field can be used in NEWCA format to store high 4 bytes of the
filesize. No header change required. This will support previously
created images.

    New cmdline parameters

* mlock_initrd - lock zero copied newca pages. It must be set if these
pages are mapped by the host.
* panic_on_initramfs_error - panic one initrd layer overwrites file(s) of
previous layer(s).

Signed-off-by: Alexey Makhalov <amakhalov@vmware.com>
Signed-off-by: Bo Gan <ganb@vmware.com>
Signed-off-by: Him Kalyan Bordoloi <bordoloih@vmware.com>
---
 init/initramfs.c | 193 ++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 183 insertions(+), 10 deletions(-)

diff --git a/init/initramfs.c b/init/initramfs.c
index bc911e466..600228d6d 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -20,6 +20,79 @@
 #include <linux/security.h>
 
 #include "do_mounts.h"
+#include <linux/initrd.h>
+#include <linux/pagemap.h>
+
+static bool page_aligned_fmt __initdata;
+
+static int __initdata do_retain_initrd;
+
+static __initdata bool mlock_initrd = false;
+
+static __initdata bool panic_on_initramfs_error = false;
+
+static __initdata bool end_of_image = false;
+
+static __initdata LIST_HEAD(initramfs_image_list);
+
+struct initramfs_image {
+	struct list_head list;
+	loff_t start_offset;
+	loff_t end_offset;
+};
+
+/*
+ * NEWCA pages must be mlocked if they were shared by the host.
+ * As we do not want them to be swapped or moved.
+ */
+static int __init mlock_initrd_setup(char *__unused)
+{
+	mlock_initrd = true;
+	return 1;
+}
+__setup("mlock_initrd", mlock_initrd_setup);
+
+static int __init panic_on_initramfs_error_setup(char *__unused)
+{
+	panic_on_initramfs_error = true;
+	return 1;
+}
+__setup("panic_on_initramfs_error", panic_on_initramfs_error_setup);
+
+/*
+ * Add file pages directly to fd's page cache.
+ */
+static int __init xadd_pages(struct file *file, const char *p, size_t count,
+			     loff_t *pos)
+{
+	struct page *page;
+	size_t pages = (count + PAGE_SIZE - 1) >> PAGE_SHIFT;
+	struct address_space *mapping = file->f_mapping;
+	gfp_t gfp_mask = mapping->gfp_mask | __GFP_WRITE;
+	pgoff_t pgoff = *pos >> PAGE_SHIFT;
+	struct folio *folio;
+	int err = 0;
+
+	for (; pages--; ++pgoff, p += PAGE_SIZE) {
+		page = virt_to_page(p);
+
+
+		err = add_to_page_cache_lru(page, mapping, pgoff, gfp_mask);
+		if (err)
+			goto out;
+
+		folio = page_folio(page);
+		folio_mark_uptodate(folio);
+		folio_mark_dirty(folio);
+		if (mlock_initrd)
+			folio_set_mlocked(folio);
+		folio_unlock(folio);
+		*pos += PAGE_SIZE;
+	}
+	err = count;
+out:
+	return err;
+}
 
 static __initdata bool csum_present;
 static __initdata u32 io_csum;
@@ -29,6 +102,15 @@ static ssize_t __init xwrite(struct file *file, const unsigned char *p,
 {
 	ssize_t out = 0;
 
+	/* Do zero copy for not compressed NEWCA */
+	if (page_aligned_fmt && p >= (unsigned char *)initrd_start &&
+				p < (unsigned char *)initrd_end) {
+		BUG_ON(*pos & ~PAGE_MASK);
+		BUG_ON((uintptr_t)p & ~PAGE_MASK);
+
+		return xadd_pages(file, p, count, pos);
+	}
+
 	/* sys_write only can write MAX_RW_COUNT aka 2G-4K bytes at most */
 	while (count) {
 		ssize_t rv = kernel_write(file, p, count, pos);
@@ -208,6 +290,8 @@ static void __init parse_header(char *s)
 	rdev = new_encode_dev(MKDEV(parsed[9], parsed[10]));
 	name_len = parsed[11];
 	hdr_csum = parsed[12];
+	if (page_aligned_fmt)
+		body_len |= parsed[12] << 32;
 }
 
 /* FSM */
@@ -227,7 +311,7 @@ static __initdata char *victim;
 static unsigned long byte_count __initdata;
 static __initdata loff_t this_header, next_header;
 
-static inline void __init eat(unsigned n)
+static inline void __init eat(unsigned long n)
 {
 	victim += n;
 	this_header += n;
@@ -276,10 +360,20 @@ static int __init do_collect(void)
 
 static int __init do_header(void)
 {
+	static bool newca_found = 0;
 	if (!memcmp(collected, "070701", 6)) {
 		csum_present = false;
+		page_aligned_fmt = false;
 	} else if (!memcmp(collected, "070702", 6)) {
 		csum_present = true;
+		page_aligned_fmt = false;
+	} else if (!memcmp(collected, "0707ca", 6)) {
+		if (!newca_found) {
+			printk(KERN_INFO "Page aligned format detected\n");
+			newca_found = 1;
+		}
+		csum_present = false;
+		page_aligned_fmt = true;
 	} else {
 		if (memcmp(collected, "070707", 6) == 0)
 			error("incorrect cpio method used: use -H newc option");
@@ -288,7 +382,17 @@ static int __init do_header(void)
 		return 1;
 	}
 	parse_header(collected);
-	next_header = this_header + N_ALIGN(name_len) + body_len;
+	next_header = this_header + N_ALIGN(name_len);
+	/*
+	 * If regular file has 0 size, old cpio tool will include empty
+	 * alignment page but new cpio tool does not do that and puts
+	 * next header right after. Handle both cases here. */
+	if (page_aligned_fmt && S_ISREG(mode))
+		if (body_len || (body_len == 0 &&
+		    memcmp(collected + 110 + N_ALIGN(name_len),
+			   "\0\0\0\0", 4) == 0))
+			next_header = PAGE_ALIGN(next_header);
+	next_header += body_len;
 	next_header = (next_header + 3) & ~3;
 	state = SkipIt;
 	if (name_len <= 0 || name_len > PATH_MAX)
@@ -353,6 +457,16 @@ static int __init maybe_link(void)
 	return 0;
 }
 
+static int __init is_overwrite(char *path)
+{
+	struct kstat st;
+
+	if (!init_stat(path, &st, AT_SYMLINK_NOFOLLOW) && S_ISREG(st.mode)) {
+		return 1;
+	}
+	return 0;
+}
+
 static __initdata struct file *wfile;
 static __initdata loff_t wfile_pos;
 
@@ -361,6 +475,7 @@ static int __init do_name(void)
 	state = SkipIt;
 	next_state = Reset;
 	if (strcmp(collected, "TRAILER!!!") == 0) {
+		end_of_image = true;
 		free_hash();
 		return 0;
 	}
@@ -369,8 +484,13 @@ static int __init do_name(void)
 		int ml = maybe_link();
 		if (ml >= 0) {
 			int openflags = O_WRONLY|O_CREAT|O_LARGEFILE;
-			if (ml != 1)
+			if (ml != 1) {
+				if (panic_on_initramfs_error &&
+				    is_overwrite(collected))
+					panic("initramfs: file already "
+					      "exists %s", collected);
 				openflags |= O_TRUNC;
+			}
 			wfile = filp_open(collected, openflags, mode);
 			if (IS_ERR(wfile))
 				return 0;
@@ -402,6 +522,10 @@ static int __init do_name(void)
 
 static int __init do_copy(void)
 {
+	if (page_aligned_fmt && !PAGE_ALIGNED(victim))
+		/* Align file start to the next page boundary  */
+		eat(PAGE_ALIGN((loff_t)victim) - (loff_t)victim);
+
 	if (byte_count >= body_len) {
 		if (xwrite(wfile, victim, body_len, &wfile_pos) != body_len)
 			error("write error");
@@ -488,6 +612,8 @@ static char * __init unpack_to_rootfs(char *buf, unsigned long len)
 	decompress_fn decompress;
 	const char *compress_name;
 	static __initdata char msg_buf[64];
+	char *buf_start = buf;
+	static loff_t current_image_offset = 0;
 
 	header_buf = kmalloc(110, GFP_KERNEL);
 	symlink_buf = kmalloc(PATH_MAX + N_ALIGN(PATH_MAX) + 1, GFP_KERNEL);
@@ -500,19 +626,20 @@ static char * __init unpack_to_rootfs(char *buf, unsigned long len)
 	this_header = 0;
 	message = NULL;
 	while (!message && len) {
+		struct initramfs_image *image = NULL;
 		loff_t saved_offset = this_header;
 		if (*buf == '0' && !(this_header & 3)) {
 			state = Start;
 			written = write_buffer(buf, len);
 			buf += written;
 			len -= written;
-			continue;
+			goto loopend;
 		}
 		if (!*buf) {
 			buf++;
 			len--;
 			this_header++;
-			continue;
+			goto loopend;
 		}
 		this_header = 0;
 		decompress = decompress_method(buf, len, &compress_name);
@@ -536,6 +663,46 @@ static char * __init unpack_to_rootfs(char *buf, unsigned long len)
 		this_header = saved_offset + my_inptr;
 		buf += my_inptr;
 		len -= my_inptr;
+	loopend:
+		if (!end_of_image)
+			continue;
+
+		end_of_image = false;
+
+		/* We don't need to track this image if:
+		 * it's not a bootloader supplied initramfs
+		 * retain_initrd parameter is set in cmdline
+		 * the image is in page aligned format
+		 */
+		if ((char *)initrd_start !=  buf_start)
+			continue;
+		if (do_retain_initrd)
+			continue;
+		if (page_aligned_fmt) {
+			current_image_offset = this_header;
+			continue;
+		}
+
+		/* Get last added image */
+		if (!list_empty(&initramfs_image_list))
+			image = list_last_entry(&initramfs_image_list,
+						struct initramfs_image, list);
+
+		/*
+		 * Check if we can avoid creating a new element by extending
+		 * adjacent one
+		 */
+		if (!image || image->end_offset + 1 != current_image_offset) {
+			image = kmalloc(sizeof(struct initramfs_image),
+					GFP_KERNEL);
+			if (!image)
+				panic("Can't allocate memory to track "
+				      "initramfs image");
+			image->start_offset = current_image_offset;
+			list_add_tail(&image->list, &initramfs_image_list);
+		}
+		image->end_offset = this_header - 1;
+		current_image_offset = this_header;
 	}
 	dir_utime();
 	kfree(name_buf);
@@ -544,8 +711,6 @@ static char * __init unpack_to_rootfs(char *buf, unsigned long len)
 	return message;
 }
 
-static int __initdata do_retain_initrd;
-
 static int __init retain_initrd_param(char *str)
 {
 	if (*str)
@@ -573,7 +738,6 @@ __setup("initramfs_async=", initramfs_async_setup);
 
 extern char __initramfs_start[];
 extern unsigned long __initramfs_size;
-#include <linux/initrd.h>
 #include <linux/kexec.h>
 
 static BIN_ATTR(initrd, 0440, sysfs_bin_attr_simple_read, NULL, 0);
@@ -708,6 +872,8 @@ static void __init do_populate_rootfs(void *unused, async_cookie_t cookie)
 #ifdef CONFIG_BLK_DEV_RAM
 		populate_initrd_image(err);
 #else
+		if (panic_on_initramfs_error)
+			panic("Initramfs unpacking failed: %s", err);
 		printk(KERN_EMERG "Initramfs unpacking failed: %s\n", err);
 #endif
 	}
@@ -720,8 +886,15 @@ static void __init do_populate_rootfs(void *unused, async_cookie_t cookie)
 	 * free only memory that is not part of crashkernel region.
 	 */
 	if (!do_retain_initrd && initrd_start && !kexec_free_initrd()) {
-		free_initrd_mem(initrd_start, initrd_end);
-	} else if (do_retain_initrd && initrd_start) {
+		struct initramfs_image *image, *tmp;
+		list_for_each_entry_safe(image, tmp, &initramfs_image_list,
+					 list) {
+			 free_initrd_mem(initrd_start + image->start_offset,
+					 initrd_start + image->end_offset);
+			 list_del(&image->list);
+			 kfree(image);
+		}	
+        } else if (do_retain_initrd && initrd_start) {
 		bin_attr_initrd.size = initrd_end - initrd_start;
 		bin_attr_initrd.private = (void *)initrd_start;
 		if (sysfs_create_bin_file(firmware_kobj, &bin_attr_initrd))
-- 
2.39.4

