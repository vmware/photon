From 3440e3fbd8d1e83c59338864ed56d24aa77e9c5d Mon Sep 17 00:00:00 2001
From: Ankit Jain <ankitja@vmware.com>
Date: Wed, 13 Nov 2024 08:19:20 +0000
Subject: [PATCH] fs: VTAR archive to TPMFS extractor

- GNU TAR Archieve consists of header with information of the
files and directories. This GNU TAR format can be extended to VTAR
format by ensuring that each file contenet data starts from a
PAGE ALIGNED address. This start address of the file can be stored
in a field in the header itself which will help to navigate to the
file content.

- Such an archive image (VTAR) when stored in RAMFS can be easily
mounted using VTAR. VTAR only creates and maintains metadata,
inodes and dentries of files & directries, But for a file,
the entry for that particular file will point to the start
address offset of the VTAR archive image whenever the file is read
or executed.

- Mounting operation is very quick and avoids additional memory
allocation for file content data.

Signed-off-by: Ankit Jain <ankitja@vmware.com>
Signed-off-by: srinidhira0 <srinidhi.rao@broadcom.com>
---
 fs/Kconfig        |   1 +
 fs/Makefile       |   1 +
 fs/vtar/Kconfig   |  21 ++
 fs/vtar/Makefile  |   7 +
 fs/vtar/README.md |  33 +++
 fs/vtar/vtar.h    |  80 +++++++
 fs/vtar/vtarfs.c  | 536 ++++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 679 insertions(+)
 create mode 100644 fs/vtar/Kconfig
 create mode 100644 fs/vtar/Makefile
 create mode 100644 fs/vtar/README.md
 create mode 100644 fs/vtar/vtar.h
 create mode 100644 fs/vtar/vtarfs.c

diff --git a/fs/Kconfig b/fs/Kconfig
index aae170fc2..570f8f00c 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -341,6 +341,7 @@ source "fs/sysv/Kconfig"
 source "fs/ufs/Kconfig"
 source "fs/erofs/Kconfig"
 source "fs/vboxsf/Kconfig"
+source "fs/vtar/Kconfig"
 
 endif # MISC_FILESYSTEMS
 
diff --git a/fs/Makefile b/fs/Makefile
index 61679fd58..a0f4c8544 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -129,4 +129,5 @@ obj-$(CONFIG_EFIVAR_FS)		+= efivarfs/
 obj-$(CONFIG_EROFS_FS)		+= erofs/
 obj-$(CONFIG_VBOXSF_FS)		+= vboxsf/
 obj-$(CONFIG_ZONEFS_FS)		+= zonefs/
+obj-$(CONFIG_VTAR)		+= vtar/
 obj-$(CONFIG_BPF_LSM)		+= bpf_fs_kfuncs.o
diff --git a/fs/vtar/Kconfig b/fs/vtar/Kconfig
new file mode 100644
index 000000000..e9628c8c8
--- /dev/null
+++ b/fs/vtar/Kconfig
@@ -0,0 +1,21 @@
+config VTAR
+      tristate "Virtual TAR file system support"
+      depends on TMPFS
+      help
+        The GNU TAR archive format can be modified into Virtual TAR archive
+        format by ensuring that each file starts from a PAGE ALIGNED address.
+        This start address of each file is stored as an offset in the VTAR
+        Header itself which helps to navigate to the start of file content.
+        VTAR will mount such an archive and extracting such archive will
+        no longer be necessary. The files will appear virtually in the mounted
+        directory path. The actual file inode mapping will point to the file
+        offset of the VTAR archive image.
+
+        This file system will mount the VTAR archive as READ ONLY.
+
+        Usually container base images are stored as VTAR archive.
+
+        Say Y or M if you want to read files from VTAR archive image.
+
+        To compile this file system support as a module, choose M here: the
+        module will be called vtarfs. If unsure, say N.
diff --git a/fs/vtar/Makefile b/fs/vtar/Makefile
new file mode 100644
index 000000000..1a81f51c1
--- /dev/null
+++ b/fs/vtar/Makefile
@@ -0,0 +1,7 @@
+#
+# Makefile for the vtar routines.
+#
+
+obj-$(CONFIG_VTAR) += vtar.o
+
+vtar-objs := vtarfs.o
diff --git a/fs/vtar/README.md b/fs/vtar/README.md
new file mode 100644
index 000000000..5b3b8b6a0
--- /dev/null
+++ b/fs/vtar/README.md
@@ -0,0 +1,33 @@
+# vtar
+
+Summary:
+--------
+vTar Un-Compresser, mounts the vmtar into the tmpfs with zero copy.
+
+Prerequisite:
+------------
+Following are the prerequisite:
+1) Input vmtar format tar file should be present in tmpfs
+2) -o option should be used to provide tmpfs-mountpath directory
+
+Description:
+-----------
+a) vTar first creates the tmpfs of size of tar ball in the
+   tmpfs-mountpath given by user using -o option.
+b) It extract all the files in the tmpfs-mountpath provided by user.
+c) It creates the symlink named "vtarfslink" in mountpoint provided by user.
+d) "vtarfslink" points to tmpfs-mountpath.
+
+Usage:
+-----
+Mount:
+$ mount /tmp/vmtar.tar -t vtar -o /path/to/tmpfs-mountpath /path/to/mountpoint
+
+This creates two mount entry:
+1) /path/to/tmpfs-mountpath as tmpfs which has all the files
+2) /path/to/mountpoint as vtar which has "vtarfslink" symlink to tmpfs-mountpath
+
+Umount:
+$ umount /path/to/mountpoint
+
+This will unmount both the mount entry.
diff --git a/fs/vtar/vtar.h b/fs/vtar/vtar.h
new file mode 100644
index 000000000..c7d06b56b
--- /dev/null
+++ b/fs/vtar/vtar.h
@@ -0,0 +1,80 @@
+/*
+ * Filesystem to directly mount tar archive.
+ *
+ * Copyright 2020 VMware, Inc. All Rights Reserved.
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Licensed under the GNU Lesser General Public License version 2 (the "License");
+ * you may not use this file except in compliance with the License. The terms
+ * of the License are located in the LICENSE file of this distribution.
+ *
+ */
+
+#ifndef VTAR
+#define VTAR
+
+#include<linux/fs.h>
+
+struct vtar_img_map_t {
+	struct file *fp;
+	struct address_space *tarfs_img_map;
+	void *data;
+};
+
+/* Values used in typeflag field.  */
+#define REGTYPE  '0'            /* regular file */
+#define AREGTYPE '\0'           /* regular file */
+#define LNKTYPE  '1'            /* link */
+#define SYMTYPE  '2'            /* reserved */
+#define CHRTYPE  '3'            /* character special */
+#define BLKTYPE  '4'            /* block special */
+#define DIRTYPE  '5'            /* directory */
+#define FIFOTYPE '6'            /* FIFO special */
+#define CONTTYPE '7'            /* reserved */
+
+#define VTAR_MAGIC "visor  " /* 8 chars and NULL */
+
+#define MAX_PAGES_PER_FILE (MAX_LFS_FILESIZE/PAGE_SIZE)
+
+struct vtar_header_type
+{                              /* byte offset */
+	char name[100];               /*   0 */
+	char mode[8];                 /* 100 */
+	char uid[8];                  /* 108 */
+	char gid[8];                  /* 116 */
+	char size[12];                /* 124 */
+	char mtime[12];               /* 136 */
+	char chksum[8];               /* 148 */
+	char typeflag;                /* 156 */
+	char linkname[100];           /* 157 */
+	char magic[6];                /* 257 */
+	char version[2];              /* 263 */
+	char uname[32];               /* 265 */
+	char gname[32];               /* 297 */
+	char devmajor[8];             /* 329 */
+	char devminor[8];             /* 337 */
+	char prefix[151];             /* 345 */
+	unsigned int offset;          /* 496 */ // Offset of the file in the archive
+	unsigned int textOffset;      /* 500 */ // Offset of the text section in the file
+	unsigned int textSize;        /* 504 */ // Size of text section
+	unsigned int numFixupPgs;     /* 508 */ // Number of pages affected by relocation
+	/* 512 */
+};
+
+static const struct inode_operations vtar_dir_inode_operations = {
+	.lookup         = simple_lookup,
+};
+
+static struct super_operations vtar_super_ops = {
+	.statfs         = simple_statfs,
+};
+
+struct vtar_mount_opts {
+	umode_t mode;
+};
+
+struct vtar_fs_info {
+	struct vtar_mount_opts mount_opts;
+};
+
+#endif
diff --git a/fs/vtar/vtarfs.c b/fs/vtar/vtarfs.c
new file mode 100644
index 000000000..40b27bf25
--- /dev/null
+++ b/fs/vtar/vtarfs.c
@@ -0,0 +1,536 @@
+/*
+ * Filesystem to directly mount tar archive.
+ *
+ * Copyright 2020 VMware, Inc. All Rights Reserved.
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Licensed under the GNU Lesser General Public License version 2 (the "License");
+ * you may not use this file except in compliance with the License. The terms
+ * of the License are located in the LICENSE file of this distribution.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/pagemap.h>
+#include <linux/slab.h>
+#include <linux/syscalls.h>
+#include <linux/file.h>
+#include <linux/fs_struct.h>
+#include <linux/namei.h>
+#include <linux/mount.h>
+#include <uapi/linux/mount.h>
+
+#include "vtar.h"
+#include "../internal.h"
+
+static struct vtar_img_map_t vtar_img_map;
+
+static int vtar_do_mount(const char *dev_name, const char *dir_name,
+		const char *type_page, unsigned long flags, void *data_page)
+{
+	struct path path;
+	int ret;
+
+	ret = kern_path(dir_name, LOOKUP_FOLLOW, &path);
+	if (ret)
+		return ret;
+	ret = path_mount(dev_name, &path, type_page, flags, data_page);
+	path_put(&path);
+	return ret;
+}
+
+static int vtar_umount(const char *name, int flags)
+{
+	int lookup_flags = LOOKUP_MOUNTPOINT;
+	struct path path;
+	int ret;
+
+	if (!(flags & UMOUNT_NOFOLLOW))
+		lookup_flags |= LOOKUP_FOLLOW;
+	ret = kern_path(name, lookup_flags, &path);
+	if (ret)
+		return ret;
+	return path_umount(&path, flags);
+}
+
+static int vtar_chdir(const char *filename)
+{
+	struct path path;
+	int error;
+
+	error = kern_path(filename, LOOKUP_FOLLOW | LOOKUP_DIRECTORY, &path);
+	if (error)
+		return error;
+	error = inode_permission(&nop_mnt_idmap, path.dentry->d_inode,
+						MAY_EXEC | MAY_CHDIR);
+	if (!error)
+		set_fs_pwd(current->fs, &path);
+	path_put(&path);
+	return error;
+}
+
+static int vtar_chown(const char *filename, uid_t user, gid_t group, int flags)
+{
+	int lookup_flags = (flags & AT_SYMLINK_NOFOLLOW) ? 0 : LOOKUP_FOLLOW;
+	struct path path;
+	int error;
+
+	error = kern_path(filename, lookup_flags, &path);
+	if (error)
+		return error;
+	error = mnt_want_write(path.mnt);
+	if (!error) {
+		error = chown_common(&path, user, group);
+		mnt_drop_write(path.mnt);
+	}
+	path_put(&path);
+	return error;
+}
+
+static int vtar_chmod(const char *filename, umode_t mode)
+{
+	struct path path;
+	int error;
+
+	error = kern_path(filename, LOOKUP_FOLLOW, &path);
+	if (error)
+		return error;
+	error = chmod_common(&path, mode);
+	path_put(&path);
+	return error;
+}
+
+static int vtar_symlink(const char *oldname, const char *newname)
+{
+	struct dentry *dentry;
+	struct path path;
+	int error;
+
+	dentry = kern_path_create(AT_FDCWD, newname, &path, 0);
+	if (IS_ERR(dentry))
+		return PTR_ERR(dentry);
+	error = security_path_symlink(&path, dentry, oldname);
+	if (!error)
+		error = vfs_symlink(&nop_mnt_idmap, path.dentry->d_inode,
+							dentry, oldname);
+	done_path_create(&path, dentry);
+	return error;
+}
+
+static int vtar_mkdir(const char *pathname, umode_t mode)
+{
+	struct dentry *dentry;
+	struct path path;
+	int error;
+
+	dentry = kern_path_create(AT_FDCWD, pathname, &path, LOOKUP_DIRECTORY);
+	if (IS_ERR(dentry))
+		return PTR_ERR(dentry);
+	if (!IS_POSIXACL(path.dentry->d_inode))
+		mode &= ~current_umask();
+	error = security_path_mkdir(&path, dentry, mode);
+	if (!error)
+		error = vfs_mkdir(&nop_mnt_idmap,path.dentry->d_inode,
+							dentry, mode);
+	done_path_create(&path, dentry);
+	return error;
+}
+
+
+static char *build_name(struct vtar_header_type *header)
+{
+	char *name;
+	size_t prefix_len = 0;
+	size_t name_len = 0;
+	char *prefix_end = memchr(header->prefix, '\0', sizeof(header->prefix));
+	char *name_end = memchr(header->name, '\0', sizeof(header->name));
+
+	if (!prefix_end || !name_end) {
+		pr_err("%s : Header name is not proper!!", __func__);
+		return NULL;
+	}
+	prefix_len = prefix_end - header->prefix;
+	name_len = name_end - header->name;
+
+	name = kzalloc(prefix_len + name_len + 1, GFP_KERNEL);
+	if (!name) {
+		pr_err("%s: Unable to allocate memory for full name!!, error=%ld ", __func__, PTR_ERR(name));
+		return NULL;
+	}
+
+	memcpy(name, header->prefix, prefix_len);
+	memcpy(name + prefix_len, header->name, name_len);
+	name[prefix_len + name_len] = 0x0;
+
+	/*
+	 * the entry is a directory, if path name ends with '/'
+	 */
+	if (name[prefix_len + name_len - 1] == '/')
+		name[prefix_len + name_len - 1] = 0x0;
+
+	return name;
+
+}
+
+static ssize_t xadd_pages(struct file *wfile, struct vtar_header_type *header)
+{
+	ssize_t ret = 0;
+	struct page *page;
+	size_t count = 0;
+	int pn;
+	int pages;
+	struct address_space *mapping;
+	gfp_t gfp_mask;
+
+	if (kstrtouint(header->size, 8, (unsigned int *)&count) != 0) {
+		pr_err("%s: failed to read size", __func__);
+		return ret;
+	}
+	pages = (count + PAGE_SIZE - 1) >> PAGE_SHIFT;
+	mapping = wfile->f_mapping;
+	gfp_mask = mapping->gfp_mask | __GFP_WRITE;
+
+	for (pn = 0; pn < pages; pn++) {
+		page = read_mapping_page(vtar_img_map.tarfs_img_map, (header->offset >> PAGE_SHIFT) + pn, NULL);
+		if (IS_ERR(page)) {
+			pr_err("%s: read_mapping_page failed  ret=%lu", __func__, PTR_ERR(page));
+			return PTR_ERR(page);
+		}
+		ret = add_to_page_cache_lru(page, mapping, pn, gfp_mask);
+		if (ret) {
+			pr_err("%s: failed add_to_page_cache_lru ret=%lu", __func__, ret);
+			put_page(page);
+			goto out;
+		}
+		SetPageUptodate(page);
+		set_page_dirty(page);
+		unlock_page(page);
+		put_page(page);
+	}
+	ret = count;
+	mapping->host->i_size = count;
+out:
+	return ret;
+}
+
+static int vtar_read_entry(off_t offset)
+{
+	struct vtar_header_type header;
+	struct page *page = NULL;
+	void *k_mapped_page = NULL;
+	int openflags;
+	struct file *wfile;
+	char *dir_name;
+	char *base_name = NULL;
+	char *full_name = NULL;
+	umode_t mode;
+	uid_t uid;
+	gid_t gid;
+
+	page = read_mapping_page(vtar_img_map.tarfs_img_map, offset >> PAGE_SHIFT, NULL);
+	if (IS_ERR(page)) {
+		pr_err("%s: page map failure %ld",__func__, PTR_ERR(page));
+		return -EINVAL;
+	}
+	k_mapped_page = kmap(page);
+	if (!k_mapped_page) {
+		pr_err("%s: kmap failure %ld",__func__, PTR_ERR(k_mapped_page));
+		return -EINVAL;
+	}
+	memcpy(&header, k_mapped_page + (offset % PAGE_SIZE), sizeof(struct vtar_header_type));
+	kunmap(k_mapped_page);
+
+	/* Check for the header magic value */
+	if (memcmp(header.magic, VTAR_MAGIC, sizeof(header.magic)) != 0) {
+		pr_debug("%s: magic=%s",__func__,header.magic);
+		return -EINVAL;
+	}
+
+	/* Parse the data length from the header */
+	if (kstrtouint(header.mode, 8, (unsigned int *)&mode) != 0) {
+		pr_err("%s: failed to read mode",__func__);
+		return -EINVAL;
+	}
+	if (kstrtouint(header.uid, 8, (unsigned int *)&uid) != 0) {
+		pr_err("%s: failed to read uid",__func__);
+		return -EINVAL;
+	}
+	if (kstrtouint(header.gid, 8, (unsigned int *)&gid) !=0) {
+		pr_err("%s: failed to read gid",__func__);
+		return -EINVAL;
+	}
+	full_name = build_name(&header);
+	if (!full_name) {
+		pr_err("%s: name allocation error",__func__);
+		return -EINVAL;
+	}
+	base_name = strrchr(full_name, '/');
+	if (base_name) {
+		*base_name = 0x0;
+		base_name++;
+	} else {
+		base_name = full_name;
+		full_name = base_name + strlen(base_name);
+	}
+	dir_name = full_name;
+	if (header.typeflag  == DIRTYPE) {
+		vtar_mkdir(base_name, mode);
+		vtar_chown(base_name, uid, gid, 0);
+		vtar_chmod(base_name, mode);
+	} else if (header.typeflag  == SYMTYPE) {
+		if (strlen(dir_name) != 0) {
+			vtar_chdir(dir_name);
+		}
+		vtar_symlink(header.linkname, base_name);
+		vtar_chown(base_name, uid, gid, 0);
+		vtar_chmod(base_name, mode);
+	} else {
+		openflags = O_WRONLY|O_CREAT;
+		if (strlen(dir_name) != 0) {
+			vtar_chdir(dir_name);
+		}
+		wfile = filp_open(base_name, openflags, mode);
+		if (IS_ERR(wfile))
+			goto out;
+		vfs_fchown(wfile, uid, gid);
+		vfs_fchmod(wfile, mode);
+		xadd_pages(wfile, &header);
+		fput(wfile);
+	}
+
+out:
+	if (dir_name < base_name)
+		kfree(dir_name);
+	else
+		kfree(base_name);
+
+	return 0;
+}
+
+static int vtar_parse_mount_ops(char *data, struct vtar_mount_opts *opts)
+{
+
+	/*TODO: Hardcode it to Read Only mode */
+	opts->mode = S_IRUGO | S_IXUGO;
+
+	return 0;
+}
+
+static int vtar_open(void)
+{
+	unsigned int offset = 0;
+	int ret=0, first=0;
+
+	ret = vtar_read_entry(offset);
+	first = ret;
+
+	while (!ret) {
+		/* Read next header */
+		offset += sizeof(struct vtar_header_type);
+		ret = vtar_read_entry(offset);
+	}
+	return first;
+}
+
+struct inode *vtar_create_inode(struct super_block *sb, umode_t mode)
+{
+	struct timespec64 ts;
+	struct inode * inode = new_inode(sb);
+
+	if ( !inode ) {
+		pr_err("%s: Failed to allocate new inode %ld", __func__, PTR_ERR(inode));
+		return NULL;
+	}
+
+	ts = current_time(inode);
+	inode->i_ino = get_next_ino();
+	inode->i_mode = mode;
+	inode->i_uid = current_fsuid();
+	inode->i_gid = current_fsgid();
+	inode_set_atime_to_ts(inode, ts);
+	inode_set_mtime_to_ts(inode, ts);
+	inode_set_ctime_to_ts(inode, ts);
+	inode->i_sb = sb;
+	inode->i_fop = &simple_dir_operations;
+
+	return inode;
+}
+
+static int vtar_fill_super(struct super_block *sb, void *data, int silent)
+{
+	struct vtar_fs_info * info = NULL;
+	struct inode *inode = NULL;
+	struct dentry *dentry = NULL;
+	int err = -EINVAL;
+
+	info = kzalloc(sizeof(struct vtar_fs_info), GFP_KERNEL);
+	if ( IS_ERR(info) ) {
+		pr_err("%s: Error in allocating memore for vtar_fs_info %ld", __func__, PTR_ERR(info));
+		return PTR_ERR(info);
+	}
+	sb->s_fs_info = info;
+	/* TODO : Hard code the mount ops to read only mode */
+	err = vtar_parse_mount_ops( data, &info->mount_opts);
+	if ( err ) {
+		pr_err("%s: Error in reading mount options for vmware tarfs! error:%d", __func__, err);
+		goto err_fill_super;
+	}
+	sb->s_maxbytes	=	MAX_LFS_FILESIZE;
+	sb->s_blocksize	=	PAGE_SIZE;
+	sb->s_blocksize_bits =	PAGE_SHIFT;
+	if (kstrtoul(VTAR_MAGIC,8,&sb->s_magic) != 0) {
+		pr_debug("%s: failed to read magic number %s",__func__,VTAR_MAGIC);
+	}
+	sb->s_op	=	&vtar_super_ops;
+	sb->s_time_gran	=	1;
+	sb->s_flags	|=	MS_RDONLY | MS_NOATIME; /* Read only file system */
+
+	vtar_chdir(data);
+	if ((err = vtar_open()) < 0) {
+		pr_err("%s:failed to read tar index, error:%d", __func__, err);
+		goto err_fill_super;
+	}
+	inode = new_inode(sb);
+	if (!inode) {
+		pr_err("%s: Failed to allocate new inode!", __func__);
+		err = PTR_ERR(inode);
+		goto err_fill_super;
+	}
+	inode = vtar_create_inode(sb, S_IFDIR | info->mount_opts.mode);
+	inode->i_mapping->a_ops = &ram_aops;
+	mapping_set_gfp_mask(inode->i_mapping, GFP_HIGHUSER);
+	mapping_set_unevictable(inode->i_mapping);
+	inode->i_op = &vtar_dir_inode_operations;
+	inode_init_owner(&nop_mnt_idmap, inode, NULL,
+			(S_IFDIR | info->mount_opts.mode));
+	inc_nlink(inode);
+	sb->s_root = d_make_root(inode);
+	if ( !sb->s_root ) {
+		pr_err("%s: Error in creating root point for vmware tarfs!", __func__);
+		iput(inode);
+		err = PTR_ERR(sb->s_root);
+		goto err_fill_super;
+	}
+	dentry = d_alloc_name(sb->s_root, "vtarfslink");
+	if (!dentry) {
+		pr_err("%s: Error in creating symlink dentry %ld!", __func__,  PTR_ERR(dentry));
+		dput(sb->s_root);
+		err = PTR_ERR(dentry);
+		goto err_fill_super;
+	}
+	inode = vtar_create_inode(sb, S_IFLNK | MS_RDONLY | MS_NOATIME);
+	if (IS_ERR(inode)) {
+		pr_err("%s: Error in creating symlink inode %ld!", __func__,  PTR_ERR(inode));
+		dput(sb->s_root);
+		dput(dentry);
+		err = PTR_ERR(inode);
+		goto err_fill_super;
+	}
+	inode->i_op = &page_symlink_inode_operations;
+	inode->i_link = data;
+	d_add(dentry, inode);
+	return 0;
+
+err_fill_super:
+	kfree(info);
+	return err;
+}
+
+static struct dentry *vtar_mount(struct file_system_type *fs_type, int flags,
+		const char *dev_name, void *data)
+{
+	struct file *fp = NULL;
+	int ret = 0;
+
+	pr_debug("%s: dev_name = %s, data=%s",__func__, dev_name, (char *)data);
+	fp = filp_open(dev_name, O_RDONLY, 0);
+	if (IS_ERR(fp)) {
+		pr_err("\n Failed to open the file %s for mount %ld\n",
+				dev_name, PTR_ERR(fp));
+		return NULL;
+	}
+	vtar_img_map.tarfs_img_map = (void *)fp->f_mapping;
+	vtar_img_map.fp = fp;
+
+	pr_debug("%s: Size of mapping img file is %lld , map_ptr = %p", __func__, vtar_img_map.tarfs_img_map->host->i_size, vtar_img_map.tarfs_img_map);
+	if (memcmp(vtar_img_map.tarfs_img_map->host->i_sb->s_type->name, "tmpfs", 5) != 0) {
+		pr_err("%s: Error: Input tar file = %s not found in 'tmpfs'",__func__, dev_name);
+		filp_close(fp, NULL);
+		return NULL;
+	}
+	vtar_img_map.data = kstrdup(data, GFP_KERNEL);
+	vtar_mkdir(vtar_img_map.data, 0755);
+	ret = vtar_do_mount("tmpfs", vtar_img_map.data, "tmpfs", MS_SILENT, NULL);
+	if (ret) {
+		pr_err("%s: Failed to mount %s as tmpfs! Error:%d",__func__, (char *)vtar_img_map.data, ret);
+		do_rmdir(AT_FDCWD, getname_kernel(vtar_img_map.data));
+		kfree(vtar_img_map.data);
+		filp_close(fp, NULL);
+		return NULL;
+	}
+	return mount_nodev(fs_type, flags, vtar_img_map.data, &vtar_fill_super);
+}
+
+static void vtar_kill_super(struct super_block *sb)
+{
+	pr_info("%s: Kill super", __func__);
+
+	evict_inodes(sb);
+	kfree(sb->s_fs_info);
+	sb->s_fs_info = NULL;
+	kill_litter_super(sb);
+	vtar_chdir("/");
+	vtar_umount(vtar_img_map.data, MNT_FORCE);
+	do_rmdir(AT_FDCWD, getname_kernel(vtar_img_map.data));
+	kfree(vtar_img_map.data);
+	filp_close(vtar_img_map.fp, NULL);
+}
+
+static struct file_system_type vtar_type = {
+
+	.owner = THIS_MODULE,
+
+	.name = "vtar",
+
+	.mount = vtar_mount,
+
+	.kill_sb = vtar_kill_super,
+
+	.fs_flags = FS_USERNS_MOUNT | FS_BINARY_MOUNTDATA,
+
+};
+
+static int __init vtar_init(void)
+{
+	int err = 0;
+
+	pr_info("%s: filesystem module load start", __func__);
+	err = register_filesystem(&vtar_type);
+	if (unlikely(err)) {
+		pr_err("%s: Failed to register vmware tarfs type %d. Exiting\n", __func__, err);
+		goto err;
+	}
+	pr_debug("%s: filesystem module registered", __func__);
+	return 0;
+err:
+	return err;
+}
+
+static void __exit vtar_exit(void)
+{
+	int err = 0;
+
+	pr_info("%s: filesystem module unload", __func__);
+	err = unregister_filesystem(&vtar_type);
+
+	if (unlikely(err))
+		pr_err("%s: Failed to unregister vmware tarfs filesystem %d", __func__, err);
+}
+
+module_init(vtar_init);
+module_exit(vtar_exit);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("VMware Photon OS : Srinidhi Rao <srinidhir@vmware.com>");
+MODULE_AUTHOR("VMware Photon OS : Ankit Jain <ankitja@vmware.com>");
-- 
2.39.4

