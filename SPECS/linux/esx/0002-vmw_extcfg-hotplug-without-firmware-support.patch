commit b2aa18053c2651e0e99c1671c3a86b4bf2b70631
Author: Vamsi Krishna Brahmajosyula <vbrahmajosyula@vmware.com>
Date:   Mon Feb 28 22:48:48 2022 +0530

    0002-vmw_extcfg: Introduce Memory hotplug via Ext Config
    
    Detects available memory regions during device init.
    Add a handler to detect IRQ 9 which can handle memory
    hotplug.
    
    When the interrupt handler is invoked
    
    * Find the Memory device attached and reserve the region.
    * Add memory device to guest OS
    * Acknowledge the event
    
    Signed-off-by: Vamsi Krishna Brahmajosyula <vbrahmajosyula@vmware.com>
    Signed-off-by: Him Kalyan Bordoloi <bordoloih@vmware.com>
    Signed-off-by: Alex Upshaw <upshawa@vmware.com>

diff --git a/drivers/misc/vmw_extcfg/Makefile b/drivers/misc/vmw_extcfg/Makefile
index 909b41339..8f86fbd4d 100644
--- a/drivers/misc/vmw_extcfg/Makefile
+++ b/drivers/misc/vmw_extcfg/Makefile
@@ -1,3 +1,3 @@
 # SPDX-License-Identifier: Dual BSD/GPL
 obj-$(CONFIG_VMWARE_EXTCFG) += vmw_extcfg.o
-vmw_extcfg-$(CONFIG_VMWARE_EXTCFG) += extcfg_device.o extcfg_driver.o
\ No newline at end of file
+vmw_extcfg-$(CONFIG_VMWARE_EXTCFG) += extcfg_device.o extcfg_hotplug.o extcfg_memory_hotplug.o extcfg_driver.o
\ No newline at end of file
diff --git a/drivers/misc/vmw_extcfg/extcfg_device.h b/drivers/misc/vmw_extcfg/extcfg_device.h
index 936d773fe..b289ea0fc 100644
--- a/drivers/misc/vmw_extcfg/extcfg_device.h
+++ b/drivers/misc/vmw_extcfg/extcfg_device.h
@@ -43,6 +43,11 @@ enum devhp_commands { HOTADD_COMMAND = 1, HOTREMOVE_COMMAND = 2 };
 #define PMGLOBCTL_REG 0x1028
 
 #define ANQ_STATUS_OFF 0x100
+#define ANQ_COMMAND_OFF (ANQ_STATUS_OFF + 4)
+
+#define ANQ_MEMHP_SUBCODE_ADD 1
+#define ANQ_MEMHP_SUBCODE_OFF (ANQ_STATUS_OFF + 8)
+#define ANQ_MEMHP_MEM_DEV_NO_OFF (ANQ_STATUS_OFF + 12)
 
 #define ANQ_STATUS_DONE 0
 #define BIOS_ACPI_MODE 0xF0
@@ -51,12 +56,47 @@ enum devhp_commands { HOTADD_COMMAND = 1, HOTREMOVE_COMMAND = 2 };
 
 #define DEV_HP_QUEUE_BASE (0xA0 + 0x10)
 
+#define NUM_MEM_DEVS 512
+#define MEM_DEVS_BASE_OFFSET 0x1000
+#define MEM_DEV_SIZE 16
+#define MEM_DEV_OFFSET_STATUS 0x00
+#define MEM_DEV_OFFSET_NODE 0x01
+#define MEM_DEV_OFFSET_BASE 0x00
+#define MEM_DEV_OFFSET_END 0x08
+#define MEM_DEV_MASK_BASE 0xFFFFFFFFFFF00000
+#define MEM_DEV_MASK_END 0xFFFFFFFFFFFF0000
+
+#define MEM_STATUS_SUPPORTED 0x80
+#define MEM_STATUS_REMOVABLE 0x40
+#define MEM_STATUS_PRESENT 0x20
+
+struct hotplug_mem_data {
+	struct list_head list;
+	struct resource mem_resource;
+};
+
+struct mem_device {
+	u8 status;
+	u32 dev_id;
+	unsigned long offset;
+	u64 base;
+	u64 end;
+};
+
 struct extcfg {
 	resource_size_t io_bar;
 	resource_size_t mmio_bar;
 	void *mmio_addr;
 };
 
+void process_acpi_notification(struct work_struct *data);
+
+int detect_hotpluggable_mem(void);
+
+int process_memory_hotplug(void);
+
+struct list_head *get_hotplug_mem_data_head(void);
+
 struct extcfg *get_extcfg(void);
 
 u8 extconf_read_8(unsigned long offset);
diff --git a/drivers/misc/vmw_extcfg/extcfg_driver.c b/drivers/misc/vmw_extcfg/extcfg_driver.c
index 881cd1fcd..f7d791ca4 100644
--- a/drivers/misc/vmw_extcfg/extcfg_driver.c
+++ b/drivers/misc/vmw_extcfg/extcfg_driver.c
@@ -33,6 +33,7 @@ irqreturn_t sci_interrupt_handler(int irq, void *dev_id)
 {
 	/*disable interrupt*/
 	outl(~inl(GPE_STATUS_REG) & inl(GPE_ENABLE_REG), GPE_ENABLE_REG);
+	schedule_work(&hotplug_work);
 	return IRQ_HANDLED;
 }
 
@@ -62,6 +63,7 @@ static int __init extcfg_drv_init(void)
 		     GPE_ENABLE_REG);
 	}
 
+	INIT_WORK(&hotplug_work, process_acpi_notification);
 	ioapic_set_alloc_attr(&info, NUMA_NO_NODE, ACPI_LEVEL_SENSITIVE,
 			      ACPI_ACTIVE_LOW);
 	irq = mp_map_gsi_to_irq(gsi, IOAPIC_MAP_ALLOC, &info);
@@ -148,6 +150,10 @@ static int __init extcfg_dev_init(void)
 					(u32)cfg->mmio_bar) < 0)
 		return -EINVAL;
 
+	ret = detect_hotpluggable_mem();
+	if (ret < 0)
+		return ret;
+
 	return 0;
 }
 fs_initcall(extcfg_dev_init);
diff --git a/drivers/misc/vmw_extcfg/extcfg_hotplug.c b/drivers/misc/vmw_extcfg/extcfg_hotplug.c
new file mode 100644
index 000000000..2c2dea365
--- /dev/null
+++ b/drivers/misc/vmw_extcfg/extcfg_hotplug.c
@@ -0,0 +1,189 @@
+// SPDX-License-Identifier: Dual BSD/GPL
+/*
+ * VMware Virtual Chipset Extended Configuration Driver
+ *
+ * Copyright (C) 2022 VMware, Inc. All rights reserved.
+ */
+
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/list.h>
+#include <asm/mpspec.h>
+#include <linux/acpi.h>
+#include <linux/sched.h>
+#include <asm/pci_x86.h>
+#include <asm/irqdomain.h>
+#include <asm/io_apic.h>
+#include <asm/mpspec_def.h>
+#include <asm/mpspec.h>
+#include "extcfg_device.h"
+
+static bool hotadd_mem_enabled;
+struct list_head hotplug_mem_data_head;
+
+struct list_head *get_hotplug_mem_data_head(void)
+{
+	return &hotplug_mem_data_head;
+}
+
+int __init process_memory_hotplug_region(struct hotplug_mem_data *data)
+{
+	int ret = 0;
+
+	pr_notice("Hot addable memory detected in range 0x%016llX to 0x%016llX.\n",
+	       data->mem_resource.start, data->mem_resource.end);
+
+	ret = request_resource(&iomem_resource, &data->mem_resource);
+
+	if (ret < 0) {
+		hotadd_mem_enabled = false;
+		pr_err("Failed to reserve physical address-space resource for hot addable memory;"
+		       " memory hot adds will be ignored.\n");
+	} else {
+		hotadd_mem_enabled = true;
+	}
+
+	return ret;
+}
+
+/* Scan the memory-related entries in the extended configuration device to
+ * determine the physical address range of hot-addable memory and create a
+ * list of resources to reserve it. Handle memory hole (say pci hole) by
+ * creating a buckets of ranges to reserve.
+ */
+int __init detect_hotpluggable_mem(void)
+{
+	unsigned long i;
+	int ret = 0;
+	struct hotplug_mem_data *current_data = NULL;
+	struct list_head *position = NULL;
+	struct mem_device mem;
+
+	hotadd_mem_enabled = false;
+	INIT_LIST_HEAD(&hotplug_mem_data_head);
+
+	for (i = 0; i < NUM_MEM_DEVS; i++) {
+		mem.offset = MEM_DEVS_BASE_OFFSET + MEM_DEV_SIZE * i;
+		mem.status = extconf_read_8(mem.offset + MEM_DEV_OFFSET_STATUS);
+
+		if ((mem.status & MEM_STATUS_SUPPORTED) &&
+		    !(mem.status & MEM_STATUS_PRESENT)) {
+			mem.base = extconf_read_64(mem.offset +
+						   MEM_DEV_OFFSET_BASE);
+			mem.base &= MEM_DEV_MASK_BASE;
+			mem.end = extconf_read_64(mem.offset +
+						  MEM_DEV_OFFSET_END);
+			mem.end &= MEM_DEV_MASK_END;
+
+			/* Convert from the exclusive end offsets used in the
+			 * extended configuration memory device entries to
+			 * the inclusive offsets used for kernel resources.
+			 */
+			mem.end--;
+
+			if (current_data) {
+				if (current_data->mem_resource.end + 1 !=
+				    mem.base) {
+					/* We have detected a hole */
+					current_data = NULL;
+				} else {
+					/* Expand the current resource */
+					current_data->mem_resource.end =
+						mem.end;
+				}
+			}
+
+			if (!current_data) {
+				current_data =
+					kzalloc(sizeof(struct hotplug_mem_data),
+						GFP_KERNEL);
+				if (!current_data) {
+					pr_err("Failed to allocate memory to create a kernel resource for detected hot added memory.\n");
+					return -ENOMEM;
+				}
+
+				INIT_LIST_HEAD(&current_data->list);
+
+				current_data->mem_resource.start = mem.base;
+				current_data->mem_resource.end = mem.end;
+				current_data->mem_resource.flags =
+					IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
+				current_data->mem_resource.name =
+					"Hot Pluggable RAM";
+
+				list_add_tail(&current_data->list,
+					      &hotplug_mem_data_head);
+
+				hotadd_mem_enabled = true;
+			}
+		}
+	}
+
+	/* This call must occur before anything tries to
+	 * dynamically allocate resources from the physical address
+	 * space (i.e. iomem_resource), or those dynamic
+	 * allocations might conflict with newly added memory in
+	 * the event of a hot add.
+	 */
+	list_for_each(position, &hotplug_mem_data_head) {
+		current_data =
+			list_entry(position, struct hotplug_mem_data, list);
+		ret = process_memory_hotplug_region(current_data);
+		if (ret < 0)
+			return ret;
+	}
+
+	if (!hotadd_mem_enabled)
+		pr_notice("No hot addable memory detected.\n");
+
+	return ret;
+}
+
+void process_acpi_system_event(void)
+{
+	int ret;
+	int command;
+
+	/* Read command(type of event) */
+	command = read_acpi_notification_queue(ANQ_COMMAND_OFF);
+
+	switch (command) {
+	case MEM_HOTPLUG_COMMAND:
+		if (!hotadd_mem_enabled) {
+			pr_err("Mem Hotplug can not be processed. No hot addable memory found.");
+			break;
+		}
+		ret = process_memory_hotplug();
+		if (ret < 0)
+			pr_err("Mem Hotplug request failed with %d",
+			       ret);
+		break;
+	case CPU_HOTPLUG_COMMAND:
+		break;
+	default:
+		pr_err("Unknown/Unsupported Hotplug request %d", command);
+		break;
+	}
+}
+
+void process_acpi_notification(struct work_struct *data)
+{
+	u32 status;
+
+	status = inl(GPE_STATUS_REG);
+
+	/* GPE bit is 1 for Device Hotplug and 2 for General */
+	switch (status) {
+	case GPE_1_MASK:
+		pr_warn("Device Hotplug not available.");
+		break;
+	case GPE_2_MASK:
+		process_acpi_system_event();
+		break;
+	default:
+		pr_err("Unknown Hotplug request GPE %d", status);
+		break;
+	}
+
+	post_process_acpi_event(status);
+}
diff --git a/drivers/misc/vmw_extcfg/extcfg_memory_hotplug.c b/drivers/misc/vmw_extcfg/extcfg_memory_hotplug.c
new file mode 100644
index 000000000..bab4f24e6
--- /dev/null
+++ b/drivers/misc/vmw_extcfg/extcfg_memory_hotplug.c
@@ -0,0 +1,90 @@
+// SPDX-License-Identifier: Dual BSD/GPL
+/*
+ * VMware Virtual Chipset Extended Configuration Driver
+ *
+ * Copyright (C) 2022 VMware, Inc. All rights reserved.
+ */
+
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/acpi.h>
+#include <asm/irqdomain.h>
+#include <asm/io_apic.h>
+#include <asm/mpspec_def.h>
+#include <asm/mpspec.h>
+#include "extcfg_device.h"
+
+int process_memory_hotplug(void)
+{
+	struct resource *res;
+	int ret;
+	u8 numa_node;
+	struct list_head *position = NULL;
+	struct list_head *hotplug_mem_data_head = NULL;
+	struct hotplug_mem_data *current_data = NULL;
+	struct mem_device mem;
+
+	if (read_acpi_notification_queue(ANQ_MEMHP_SUBCODE_OFF) !=
+	    ANQ_MEMHP_SUBCODE_ADD) {
+		return -ENODEV;
+	}
+
+	mem.dev_id = read_acpi_notification_queue(ANQ_MEMHP_MEM_DEV_NO_OFF);
+	mem.offset = MEM_DEVS_BASE_OFFSET + MEM_DEV_SIZE * mem.dev_id;
+	mem.status = extconf_read_8(mem.offset + MEM_DEV_OFFSET_STATUS);
+	if (!((mem.status & MEM_STATUS_SUPPORTED) &&
+	      (mem.status & MEM_STATUS_PRESENT))) {
+		/* We expect the hot added memory to be marked as
+		 * supported and present.
+		 */
+		return -ENODEV;
+	}
+	numa_node = extconf_read_8(mem.offset + MEM_DEV_OFFSET_NODE);
+	mem.base = extconf_read_64(mem.offset + MEM_DEV_OFFSET_BASE);
+	mem.base &= MEM_DEV_MASK_BASE;
+	mem.end = extconf_read_64(mem.offset + MEM_DEV_OFFSET_END);
+	mem.end &= MEM_DEV_MASK_END;
+
+	/* Convert from the exclusive end offsets used in the extended
+	 * configuration memory device entries to the inclusive
+	 * offsets used for kernel resources.
+	 */
+	mem.end--;
+
+	res = kzalloc(sizeof(struct resource), GFP_KERNEL);
+	if (!res)
+		return -ENOMEM;
+
+	res->name = "System RAM";
+	res->start = mem.base;
+	res->end = mem.end;
+	res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
+
+	hotplug_mem_data_head = get_hotplug_mem_data_head();
+
+	list_for_each(position, hotplug_mem_data_head) {
+		current_data =
+			list_entry(position, struct hotplug_mem_data, list);
+		ret = request_resource(&current_data->mem_resource, res);
+		if (ret == 0)
+			break;
+	}
+
+	if (ret < 0) {
+		pr_err("Failed to reserve resource for hot added memory.\n");
+		kfree(res);
+		return ret;
+	}
+
+	/* Add the memory to the memory manager. */
+	ret = add_memory_resource(numa_node, res, memhp_default_online_type);
+	if (ret < 0) {
+		pr_err("Failed to add hot added memory to the memory manager.\n");
+		kfree(res);
+		return ret;
+	}
+
+	pr_notice("Successfully hot addedd memory in range 0x%016llX to 0x%016llX to node 0x%02X\n",
+	       mem.base, mem.end, numa_node);
+	return ret;
+}
