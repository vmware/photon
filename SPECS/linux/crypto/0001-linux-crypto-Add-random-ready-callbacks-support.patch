From d329bdbabe477a680ffbafb3bb0e965305d8d5fa Mon Sep 17 00:00:00 2001
From: srinidhira0 <srinidhir@vmware.com>
Date: Wed, 29 Jun 2022 14:32:49 +0000
Subject: [PATCH] linux:crypto: Add random ready callbacks support

  -  Few APIs provided by random driver to asynchronously
query whether the random entropy pool is ready or not has been
replaced by notifier call chain.

This will create a compatibility issue with crypto canister.
Hence adding wrapper functions around notifier calls so that
crypto canister can work seamless with the new changes in
random driver.

Signed-off-by: srinidhira0 <srinidhir@vmware.com>
Signed-off-by: Roye Eshed <eshedr@vmware.com>
---
 drivers/char/random.c  | 62 ++++++++++++++++++++++++++++++++++++++++--
 include/linux/random.h | 11 +++++++-
 2 files changed, 69 insertions(+), 4 deletions(-)

diff --git a/drivers/char/random.c b/drivers/char/random.c
index f769d858eda7..753503459e90 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -23,6 +23,7 @@
  * entropy collectors, described below, add data to the input pool.
  */
 
+
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
 #include <linux/utsname.h>
@@ -94,6 +95,11 @@ static int ratelimit_disable __read_mostly =
 module_param_named(ratelimit_disable, ratelimit_disable, int, 0644);
 MODULE_PARM_DESC(ratelimit_disable, "Disable random ratelimit suppression");
 
+struct random_ready_info {
+        struct random_ready_callback *cb;
+        struct notifier_block priv_nb;
+};
+
 /*
  * Returns whether or not the input pool has been seeded and thus guaranteed
  * to supply cryptographically secure random numbers. This applies to: the
@@ -181,6 +187,54 @@ static void __cold process_random_ready_list(void)
 	spin_unlock_irqrestore(&random_ready_chain_lock, flags);
 }
 
+static int generic_random_ready_cb(struct notifier_block *nb,
+			unsigned long action, void *data)
+{
+	struct random_ready_info *rnd_cb =
+		container_of(nb,struct random_ready_info, priv_nb);
+
+	pr_info("In generic_random_ready_cb\n");
+	if (rnd_cb) {
+		rnd_cb->cb->func(rnd_cb->cb);
+		return 0;
+	} else
+		return -ENOENT;
+}
+int add_random_ready_callback(struct random_ready_callback *rdy)
+{
+	int ret = 0;
+	struct random_ready_info *rnd_cb = (struct random_ready_info *)
+			kzalloc(sizeof(struct random_ready_info),GFP_KERNEL);
+	if (IS_ERR_OR_NULL(rnd_cb)) {
+		ret = -ENOMEM;
+		goto cb_exit;
+	}
+	pr_info("registering generic_cb notifier call\n");
+	rnd_cb->cb = rdy;
+	rnd_cb->priv_nb.notifier_call = generic_random_ready_cb;
+	ret = register_random_ready_notifier(&rnd_cb->priv_nb);
+
+cb_exit:
+	return ret;
+}
+EXPORT_SYMBOL(add_random_ready_callback);
+
+void del_random_ready_callback(struct random_ready_callback *rdy)
+{
+	struct random_ready_callback **ready_cb = &rdy;
+	struct random_ready_info *rnd_cb =
+		container_of(ready_cb,struct random_ready_info, cb);
+
+	pr_info("de-registering generic_cb notifier call\n");
+	if (rnd_cb && rnd_cb->priv_nb.notifier_call) {
+		unregister_random_ready_notifier(&rnd_cb->priv_nb);
+		rnd_cb->priv_nb.notifier_call = NULL;
+	}
+	if (rnd_cb)
+		kfree(rnd_cb);
+}
+EXPORT_SYMBOL(del_random_ready_callback);
+
 #define warn_unseeded_randomness() \
 	if (IS_ENABLED(CONFIG_WARN_ALL_UNSEEDED_RANDOM) && !crng_ready()) \
 		printk_deferred(KERN_NOTICE "random: %s called from %pS with crng_init=%d\n", \
@@ -197,7 +251,7 @@ static void __cold process_random_ready_list(void)
  *
  * There are a few exported interfaces for use by other drivers:
  *
- *	void get_random_bytes(void *buf, size_t len)
+ *	void get_random_bytes(void *buf, int len)
  *	u32 get_random_u32()
  *	u64 get_random_u64()
  *	unsigned int get_random_int()
@@ -434,10 +488,11 @@ static void _get_random_bytes(void *buf, size_t len)
  * wait_for_random_bytes() should be called and return 0 at least once
  * at any point prior.
  */
-void get_random_bytes(void *buf, size_t len)
+void get_random_bytes(void *buf, int len)
 {
+	size_t size_len = (size_t)len;
 	warn_unseeded_randomness();
-	_get_random_bytes(buf, len);
+	_get_random_bytes(buf, size_len);
 }
 EXPORT_SYMBOL(get_random_bytes);
 
@@ -713,6 +768,7 @@ static void __cold _credit_init_bits(size_t bits)
 
 	add = min_t(size_t, bits, POOL_BITS);
 
+
 	do {
 		orig = READ_ONCE(input_pool.init_bits);
 		new = min_t(unsigned int, POOL_BITS, orig + add);
diff --git a/include/linux/random.h b/include/linux/random.h
index 917470c4490a..9eef16a7a87e 100644
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@ -12,6 +12,15 @@
 
 struct notifier_block;
 
+struct random_ready_callback {
+	struct list_head list;
+	void (*func)(struct random_ready_callback *rdy);
+	struct module *owner;
+};
+
+extern int add_random_ready_callback(struct random_ready_callback *rdy);
+extern void del_random_ready_callback(struct random_ready_callback *rdy);
+
 void add_device_randomness(const void *buf, size_t len);
 void add_bootloader_randomness(const void *buf, size_t len);
 void add_input_randomness(unsigned int type, unsigned int code,
@@ -28,5 +37,5 @@ static inline void add_latent_entropy(void)
 
-void get_random_bytes(void *buf, size_t len);
+void get_random_bytes(void *buf, int len);
 size_t __must_check get_random_bytes_arch(void *buf, size_t len);
 u32 get_random_u32(void);
 u64 get_random_u64(void);
-- 
2.23.3

