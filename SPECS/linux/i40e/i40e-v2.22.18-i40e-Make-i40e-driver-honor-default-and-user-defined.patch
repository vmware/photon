From 6288f4b73dfd270e86ecf1923dfa1b4dbcea2bb0 Mon Sep 17 00:00:00 2001
From: "Srivatsa S. Bhat (VMware)" <srivatsa@csail.mit.edu>
Date: Thu, 3 Nov 2022 11:48:26 -0700
Subject: [PATCH] i40e: Make i40e driver honor default and user-defined IRQ
 affinities

The i40e driver completely ignores the default system-wide IRQ
affinity (set via the irqaffinity= kernel cmdline parameter) and
spreads its interrupts across all online CPUs instead.

Furthermore, if a user/administrator (or a service such as tuned or
irqbalance) overrides the default IRQ affinity for the i40e driver's
interrupts using the per-IRQ procfs interface (eg: by writing the
desired cpulist to /proc/irq/<IRQ>/smp_affinity_list), the driver is
supposed to remember this setting (as indicated by the
IRQD_AFFINITY_SET flag) and restore it if the underlying device gets
bounced or reinitialized (eg: ifconfig <NIC> down; ifconfig <NIC> up).
Instead, the i40e driver once again spreads its interrupts across all
online CPUs, and thus fails to honor the user-defined IRQ affinities
as well.

The underlying root-cause for both of these issues is the incorrect
use of the irq_set_affinity_hint() API in the driver's interrupt
request code-path at the time of probe. The driver calls this API with
the affinity mask set to all online CPUs, which ends up getting
remembered as the user-defined IRQ affinity (overriding both the
default system-wide IRQ affinity as well as the user's actual IRQ
affinity setting).

Fix this by removing the call to irq_set_affinity_hint() in the
driver's initialization code.

Signed-off-by: Sharan Turlapati <sturlapati@vmware.com>
Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
---
 src/i40e_main.c | 20 --------------------
 1 file changed, 20 deletions(-)

diff --git a/src/i40e_main.c b/src/i40e_main.c
index cd83ec2..ae9f802 100644
--- a/src/i40e_main.c
+++ b/src/i40e_main.c
@@ -4989,9 +4989,6 @@ int i40e_vsi_request_irq_msix(struct i40e_vsi *vsi, char *basename)
 	int tx_int_idx = 0;
 	int vector, err;
 	int irq_num;
-#ifdef HAVE_IRQ_AFFINITY_HINT
-	int cpu;
-#endif
 
 	for (vector = 0; vector < q_vectors; vector++) {
 		struct i40e_q_vector *q_vector = vsi->q_vectors[vector];
@@ -5029,16 +5026,6 @@ int i40e_vsi_request_irq_msix(struct i40e_vsi *vsi, char *basename)
 		q_vector->affinity_notify.release = i40e_irq_affinity_release;
 		irq_set_affinity_notifier(irq_num, &q_vector->affinity_notify);
 #endif
-#ifdef HAVE_IRQ_AFFINITY_HINT
-		/* Spread affinity hints out across online CPUs.
-		 *
-		 * get_cpu_mask returns a static constant mask with
-		 * a permanent lifetime so it's ok to pass to
-		 * irq_set_affinity_hint without making a copy.
-		 */
-		cpu = cpumask_local_spread(q_vector->v_idx, -1);
-		irq_set_affinity_hint(irq_num, get_cpu_mask(cpu));
-#endif /* HAVE_IRQ_AFFINITY_HINT */
 	}
 
 	vsi->irqs_ready = true;
@@ -5050,9 +5037,6 @@ free_queue_irqs:
 		irq_num = pf->msix_entries[base + vector].vector;
 #ifdef HAVE_IRQ_AFFINITY_NOTIFY
 		irq_set_affinity_notifier(irq_num, NULL);
-#endif
-#ifdef HAVE_IRQ_AFFINITY_HINT
-		irq_set_affinity_hint(irq_num, NULL);
 #endif
 		free_irq(irq_num, &vsi->q_vectors[vector]);
 	}
@@ -5865,10 +5849,6 @@ static void i40e_vsi_free_irq(struct i40e_vsi *vsi)
 #ifdef HAVE_IRQ_AFFINITY_NOTIFY
 			/* clear the affinity notifier in the IRQ descriptor */
 			irq_set_affinity_notifier(irq_num, NULL);
-#endif
-#ifdef HAVE_IRQ_AFFINITY_HINT
-			/* remove our suggested affinity mask for this IRQ */
-			irq_set_affinity_hint(irq_num, NULL);
 #endif
 			synchronize_irq(irq_num);
 			free_irq(irq_num, vsi->q_vectors[i]);
-- 
2.39.0

