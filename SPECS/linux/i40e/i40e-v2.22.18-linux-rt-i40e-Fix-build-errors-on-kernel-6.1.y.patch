From cf6d336aa88d7eb7016cdb0699063abbacd16af0 Mon Sep 17 00:00:00 2001
rom: "Srivatsa S. Bhat (VMware)" <srivatsa@csail.mit.edu>
Date: Tue, 10 Jan 2023 17:29:04 -0800
Subject: [PATCH] linux-rt, i40e: Fix build errors on kernel 6.1.y

Commit 4d213ee396a6 ("u64_stat: Remove the obsolete fetch_irq()
variants") in upstream PREEMPT_RT kernel deprecated
u64_stats_fetch_begin_irq() and u64_stats_fetch_retry_irq() and
converted all call-sites to use u64_stats_fetch_begin() and
u64_stats_fetch_retry() instead. Do the same in the i40e driver.

Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
---
 src/i40e_ethtool_stats.h | 16 ++++++++--------
 src/i40e_main.c          | 16 ++++++++--------
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/i40e_ethtool_stats.h b/src/i40e_ethtool_stats.h
index 5cafca3..6189f83 100644
--- a/src/i40e_ethtool_stats.h
+++ b/src/i40e_ethtool_stats.h
@@ -165,7 +165,7 @@ __i40e_add_ethtool_stats(u64 **data, void *pointer,
  * @ring: the ring to copy
  *
  * Queue statistics must be copied while protected by
- * u64_stats_fetch_begin_irq, so we can't directly use i40e_add_ethtool_stats.
+ * u64_stats_fetch_begin, so we can't directly use i40e_add_ethtool_stats.
  * Assumes that queue stats are defined in i40e_gstrings_queue_stats. If the
  * ring pointer is null, zero out the queue stat values and update the data
  * pointer. Otherwise safely copy the stats from the ring into the supplied
@@ -185,15 +185,15 @@ i40e_add_queue_stats(u64 **data, struct i40e_ring *ring)
 
 	/* To avoid invalid statistics values, ensure that we keep retrying
 	 * the copy until we get a consistent value according to
-	 * u64_stats_fetch_retry_irq. But first, make sure our ring is
+	 * u64_stats_fetch_retry. But first, make sure our ring is
 	 * non-null before attempting to access its syncp.
 	 */
 #ifdef HAVE_NDO_GET_STATS64
 	do {
-		start = !ring ? 0 : u64_stats_fetch_begin_irq(&ring->syncp);
+		start = !ring ? 0 : u64_stats_fetch_begin(&ring->syncp);
 		for (i = 0; i < size; i++)
 			i40e_add_one_ethtool_stat(&(*data)[i], ring, &stats[i]);
-	} while (ring && u64_stats_fetch_retry_irq(&ring->syncp, start));
+	} while (ring && u64_stats_fetch_retry(&ring->syncp, start));
 #else
 	for (i = 0; i < size; i++)
 		i40e_add_one_ethtool_stat(&(*data)[i], ring, &stats[i]);
@@ -210,7 +210,7 @@ i40e_add_queue_stats(u64 **data, struct i40e_ring *ring)
  * @rx_ring: the rx ring to copy
  *
  * RX queue XDP statistics must be copied while protected by
- * u64_stats_fetch_begin_irq, so we can't directly use i40e_add_ethtool_stats.
+ * u64_stats_fetch_begin, so we can't directly use i40e_add_ethtool_stats.
  * Assumes that queue stats are defined in i40e_gstrings_rx_queue_xdp_stats. If
  * the ring pointer is null, zero out the queue stat values and update the data
  * pointer. Otherwise safely copy the stats from the ring into the supplied
@@ -231,20 +231,20 @@ i40e_add_rx_queue_xdp_stats(u64 **data, struct i40e_ring *rx_ring)
 
 	/* To avoid invalid statistics values, ensure that we keep retrying
 	 * the copy until we get a consistent value according to
-	 * u64_stats_fetch_retry_irq. But first, make sure our ring is
+	 * u64_stats_fetch_retry. But first, make sure our ring is
 	 * non-null before attempting to access its syncp.
 	 */
 #ifdef HAVE_NDO_GET_STATS64
 	do {
 		start = !rx_ring ? 0 :
-			u64_stats_fetch_begin_irq(&rx_ring->syncp);
+			u64_stats_fetch_begin(&rx_ring->syncp);
 #endif
 	for (i = 0; i < xdp_size; i++) {
 		i40e_add_one_ethtool_stat(&(*data)[i], rx_ring,
 					  &xdp_stats[i]);
 	}
 #ifdef HAVE_NDO_GET_STATS64
-	} while (rx_ring && u64_stats_fetch_retry_irq(&rx_ring->syncp, start));
+	} while (rx_ring && u64_stats_fetch_retry(&rx_ring->syncp, start));
 #endif
 
 	/* Once we successfully copy the stats in, update the data pointer */
diff --git a/src/i40e_main.c b/src/i40e_main.c
index ae9f802..b9c1b4e 100644
--- a/src/i40e_main.c
+++ b/src/i40e_main.c
@@ -482,10 +482,10 @@ static void i40e_get_netdev_stats_struct_tx(struct i40e_ring *ring,
 	unsigned int start;
 
 	do {
-		start = u64_stats_fetch_begin_irq(&ring->syncp);
+		start = u64_stats_fetch_begin(&ring->syncp);
 		packets = ring->stats.packets;
 		bytes   = ring->stats.bytes;
-	} while (u64_stats_fetch_retry_irq(&ring->syncp, start));
+	} while (u64_stats_fetch_retry(&ring->syncp, start));
 
 	stats->tx_packets += packets;
 	stats->tx_bytes   += bytes;
@@ -541,10 +541,10 @@ static struct rtnl_link_stats64 *i40e_get_netdev_stats_struct(
 		rx_ring = &tx_ring[1];
 
 		do {
-			start = u64_stats_fetch_begin_irq(&rx_ring->syncp);
+			start = u64_stats_fetch_begin(&rx_ring->syncp);
 			packets = rx_ring->stats.packets;
 			bytes   = rx_ring->stats.bytes;
-		} while (u64_stats_fetch_retry_irq(&rx_ring->syncp, start));
+		} while (u64_stats_fetch_retry(&rx_ring->syncp, start));
 
 		stats->rx_packets += packets;
 		stats->rx_bytes   += bytes;
@@ -1011,12 +1011,12 @@ static void i40e_update_vsi_stats(struct i40e_vsi *vsi)
 
 #ifdef HAVE_NDO_GET_STATS64
 		do {
-			start = u64_stats_fetch_begin_irq(&p->syncp);
+			start = u64_stats_fetch_begin(&p->syncp);
 #endif
 			packets = p->stats.packets;
 			bytes = p->stats.bytes;
 #ifdef HAVE_NDO_GET_STATS64
-		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
+		} while (u64_stats_fetch_retry(&p->syncp, start));
 #endif
 		tx_b += bytes;
 		tx_p += packets;
@@ -1030,12 +1030,12 @@ static void i40e_update_vsi_stats(struct i40e_vsi *vsi)
 		p = &p[1];
 #ifdef HAVE_NDO_GET_STATS64
 		do {
-			start = u64_stats_fetch_begin_irq(&p->syncp);
+			start = u64_stats_fetch_begin(&p->syncp);
 #endif
 			packets = p->stats.packets;
 			bytes = p->stats.bytes;
 #ifdef HAVE_NDO_GET_STATS64
-		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
+		} while (u64_stats_fetch_retry(&p->syncp, start));
 #endif
 		rx_b += bytes;
 		rx_p += packets;
-- 
2.39.0

