From 41aa2a1693d249bd3771ed370a994e31cd3fc7c7 Mon Sep 17 00:00:00 2001
From: "Srivatsa S. Bhat (VMware)" <srivatsa@csail.mit.edu>
Date: Thu, 12 Jan 2023 15:03:24 -0800
Subject: [PATCH] linux-rt, iavf: Fix build errors on kernel 6.1.y

Commit 4d213ee396a6 ("u64_stat: Remove the obsolete fetch_irq()
variants") in upstream PREEMPT_RT kernel deprecated
u64_stats_fetch_begin_irq() and u64_stats_fetch_retry_irq() and
converted all call-sites to use u64_stats_fetch_begin() and
u64_stats_fetch_retry() instead. Do the same in the iavf driver.

Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
---
 src/iavf_ethtool_stats.h | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/iavf_ethtool_stats.h b/src/iavf_ethtool_stats.h
index 2c658aa..2733c0e 100644
--- a/src/iavf_ethtool_stats.h
+++ b/src/iavf_ethtool_stats.h
@@ -228,7 +228,7 @@ enum iavf_chnl_stat_type {
  * @stat_type: stat_type could be TX/TX/VECTOR
  *
  * Queue statistics must be copied while protected by
- * u64_stats_fetch_begin_irq, so we can't directly use iavf_add_ethtool_stats.
+ * u64_stats_fetch_begin, so we can't directly use iavf_add_ethtool_stats.
  * Assumes that queue stats are defined in iavf_gstrings_queue_stats. If the
  * ring pointer is null, zero out the queue stat values and update the data
  * pointer. Otherwise safely copy the stats from the ring into the supplied
@@ -273,12 +273,12 @@ iavf_add_queue_stats_chnl(u64 **data, struct iavf_ring *ring,

 	/* To avoid invalid statistics values, ensure that we keep retrying
 	 * the copy until we get a consistent value according to
-	 * u64_stats_fetch_retry_irq. But first, make sure our ring is
+	 * u64_stats_fetch_retry. But first, make sure our ring is
 	 * non-null before attempting to access its syncp.
 	 */
 #ifdef HAVE_NDO_GET_STATS64
 	do {
-		start = !ring ? 0 : u64_stats_fetch_begin_irq(&ring->syncp);
+		start = !ring ? 0 : u64_stats_fetch_begin(&ring->syncp);
 #endif
 		for (i = 0; i < size; i++) {
 			void *ptr = ring;
@@ -289,7 +289,7 @@ iavf_add_queue_stats_chnl(u64 **data, struct iavf_ring *ring,
 						  &stats[i]);
 		}
 #ifdef HAVE_NDO_GET_STATS64
-	} while (ring && u64_stats_fetch_retry_irq(&ring->syncp, start));
+	} while (ring && u64_stats_fetch_retry(&ring->syncp, start));
 #endif

 	/* Once we successfully copy the stats in, update the data pointer */
@@ -302,7 +302,7 @@ iavf_add_queue_stats_chnl(u64 **data, struct iavf_ring *ring,
  * @ring: the ring to copy
  *
  * Queue statistics must be copied while protected by
- * u64_stats_fetch_begin_irq, so we can't directly use iavf_add_ethtool_stats.
+ * u64_stats_fetch_begin, so we can't directly use iavf_add_ethtool_stats.
  * Assumes that queue stats are defined in iavf_gstrings_queue_stats. If the
  * ring pointer is null, zero out the queue stat values and update the data
  * pointer. Otherwise safely copy the stats from the ring into the supplied
@@ -322,19 +322,19 @@ iavf_add_queue_stats(u64 **data, struct iavf_ring *ring)

 	/* To avoid invalid statistics values, ensure that we keep retrying
 	 * the copy until we get a consistent value according to
-	 * u64_stats_fetch_retry_irq. But first, make sure our ring is
+	 * u64_stats_fetch_retry. But first, make sure our ring is
 	 * non-null before attempting to access its syncp.
 	 */
 #ifdef HAVE_NDO_GET_STATS64
 	do {
-		start = !ring ? 0 : u64_stats_fetch_begin_irq(&ring->syncp);
+		start = !ring ? 0 : u64_stats_fetch_begin(&ring->syncp);
 #endif
 		for (i = 0; i < size; i++) {
 			iavf_add_one_ethtool_stat(&(*data)[i], ring,
 						  &stats[i]);
 		}
 #ifdef HAVE_NDO_GET_STATS64
-	} while (ring && u64_stats_fetch_retry_irq(&ring->syncp, start));
+	} while (ring && u64_stats_fetch_retry(&ring->syncp, start));
 #endif

 	/* Once we successfully copy the stats in, update the data pointer */
--
2.25.1

