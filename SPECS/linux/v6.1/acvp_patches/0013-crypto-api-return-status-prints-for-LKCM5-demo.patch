From 5dafdcbce3214988d09273cef76c3b44e8b80861 Mon Sep 17 00:00:00 2001
From: Srish Srinivasan <srish.srinivasan@broadcom.com>
Date: Tue, 12 Dec 2023 08:42:17 +0000
Subject: [PATCH] crypto api return status prints for LKCM5 demo

- these prints appear only when both ACVP_BUILD and KAT_BUILD
  are enabled during build

Signed-off-by: Srish Srinivasan <srish.srinivasan@broadcom.com>
Signed-off-by: Shivani Agarwal <shivani.agarwal@broadcom.com>
---
 crypto/aead.c             | 35 ++++++++++++++++++++++++++++++++---
 crypto/akcipher.c         | 10 ++++++++--
 crypto/algif_ecc.c        | 39 +++++++++++++++++++++++++++++++++++----
 crypto/cipher.c           |  7 ++++++-
 crypto/kpp.c              | 10 ++++++++--
 crypto/rng.c              |  6 ++++++
 crypto/shash.c            | 26 +++++++++++++++++++++++---
 crypto/skcipher.c         | 30 ++++++++++++++++++++++++++++--
 include/crypto/akcipher.h | 30 ++++++++++++++++++++++++++++--
 include/crypto/hash.h     |  6 ++++++
 include/crypto/kpp.h      | 18 ++++++++++++++++++
 include/crypto/rng.h      |  6 ++++++
 12 files changed, 204 insertions(+), 19 deletions(-)

diff --git a/crypto/aead.c b/crypto/aead.c
index c4ece86c4..b64771784 100644
--- a/crypto/aead.c
+++ b/crypto/aead.c
@@ -50,6 +50,11 @@ int crypto_aead_setkey(struct crypto_aead *tfm,
 	else
 		err = crypto_aead_alg(tfm)->setkey(tfm, key, keylen);
 
+	if(err < 0)
+		printk(KERN_ERR "%ps FAILED, returned %d", crypto_aead_alg(tfm)->setkey, err);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", crypto_aead_alg(tfm)->setkey, err);
+
 	if (unlikely(err)) {
 		crypto_aead_set_flags(tfm, CRYPTO_TFM_NEED_KEY);
 		return err;
@@ -70,9 +75,12 @@ int crypto_aead_setauthsize(struct crypto_aead *tfm, unsigned int authsize)
 
 	if (crypto_aead_alg(tfm)->setauthsize) {
 		err = crypto_aead_alg(tfm)->setauthsize(tfm, authsize);
-		if (err)
+		if (err) {
+			printk(KERN_ERR "%ps FAILED, returned %d", crypto_aead_alg(tfm)->setauthsize, err);
 			return err;
+		}
 	}
+	printk(KERN_INFO "%ps PASSED, returned %d", crypto_aead_alg(tfm)->setauthsize, err);
 
 	tfm->authsize = authsize;
 	return 0;
@@ -91,7 +99,14 @@ int crypto_aead_encrypt(struct aead_request *req)
 		ret = -ENOKEY;
 	else
 		ret = crypto_aead_alg(aead)->encrypt(req);
+
+	if(ret < 0)
+		printk(KERN_ERR "%ps FAILED, returned %d", crypto_aead_alg(aead)->encrypt, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", crypto_aead_alg(aead)->encrypt, ret);
+
 	crypto_stats_aead_encrypt(cryptlen, alg, ret);
+
 	return ret;
 }
 EXPORT_SYMBOL_GPL(crypto_aead_encrypt);
@@ -110,7 +125,14 @@ int crypto_aead_decrypt(struct aead_request *req)
 		ret = -EINVAL;
 	else
 		ret = crypto_aead_alg(aead)->decrypt(req);
+
+	if(ret < 0)
+		printk(KERN_ERR "%ps FAILED, returned %d", crypto_aead_alg(aead)->decrypt, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", crypto_aead_alg(aead)->decrypt, ret);
+
 	crypto_stats_aead_decrypt(cryptlen, alg, ret);
+
 	return ret;
 }
 EXPORT_SYMBOL_GPL(crypto_aead_decrypt);
@@ -135,8 +157,15 @@ static int crypto_aead_init_tfm(struct crypto_tfm *tfm)
 	if (alg->exit)
 		aead->base.exit = crypto_aead_exit_tfm;
 
-	if (alg->init)
-		return alg->init(aead);
+	int err;
+	if (alg->init) {
+		err = alg->init(aead);
+		if(err)
+			printk(KERN_ERR "%ps FAILED, returned %d", alg->init, err);
+		else
+			printk(KERN_INFO "%ps PASSED, returned %d", alg->init, err);
+		return err;
+	}
 
 	return 0;
 }
diff --git a/crypto/akcipher.c b/crypto/akcipher.c
index ab975a420..c9ae52210 100644
--- a/crypto/akcipher.c
+++ b/crypto/akcipher.c
@@ -63,8 +63,14 @@ static int crypto_akcipher_init_tfm(struct crypto_tfm *tfm)
 	if (alg->exit)
 		akcipher->base.exit = crypto_akcipher_exit_tfm;
 
-	if (alg->init)
-		return alg->init(akcipher);
+        if (alg->init) {
+                int err = alg->init(akcipher);
+                if(err)
+                        printk(KERN_ERR "%ps FAILED, returned %d", alg->init, err);
+                else
+                        printk(KERN_INFO "%ps PASSED, returned %d", alg->init, err);
+                return err;
+        }
 
 	return 0;
 }
diff --git a/crypto/algif_ecc.c b/crypto/algif_ecc.c
index 2091789c4..6cd495584 100644
--- a/crypto/algif_ecc.c
+++ b/crypto/algif_ecc.c
@@ -109,6 +109,10 @@ static int ecc_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)
 		ecc_swap_digits((u64 *)y_buf, pk.y, pk.ndigits);
 
 		ret = ecc_is_pubkey_valid_full(curve, &pk);
+		if(!ret)
+			printk(KERN_INFO "ecc_is_pubkey_valid_full PASSED, returned %d", ret);
+		else
+			printk(KERN_ERR "ecc_is_pubkey_valid_full FAILED, returned %d", ret);
 
 
 		kfree(pk.x);
@@ -155,8 +159,27 @@ static int ecc_recvmsg(struct socket *sock, struct msghdr *msg,
 	} else if(iov[3].iov_len == 192) {
 		curve = &nist_p192;
 		curve_id = 1;
-	} else
-		return -EINVAL;
+	} else {
+		int skip_gen_privkey = 0;
+		switch(iov[3].iov_len) {
+			case 1:  break;
+			case 2:  skip_gen_privkey = 1;
+				 break;
+			default: return -EINVAL;
+		}
+
+		if(!skip_gen_privkey) {
+			ret = ecc_gen_privkey(2, 0, (u64 *)d_buf);
+			if (ret < 0)
+				printk(KERN_ERR "ecc_gen_privkey FAILED, returned %d", ret);
+			return ret;
+		}
+
+		ret = ecc_make_pub_key(2, 0, (u64 *)d_buf, pubkey);
+		if (ret < 0)
+			printk(KERN_ERR "ecc_make_pub_key FAILED, returned %d", ret);
+		return ret;
+	}
 
         if (iov[0].iov_len != curve->g.ndigits * sizeof(u64) ||
             iov[1].iov_len != curve->g.ndigits * sizeof(u64) ||
@@ -164,12 +187,20 @@ static int ecc_recvmsg(struct socket *sock, struct msghdr *msg,
                 return -EINVAL;
 
         ret = ecc_gen_privkey(curve_id, curve->g.ndigits, (u64 *)d_buf);
-        if (ret < 0)
+        if (ret < 0) {
+		printk(KERN_ERR "ecc_gen_privkey FAILED, returned %d", ret);
                 return ret;
+	}
+	else
+		printk(KERN_INFO "ecc_gen_privkey PASSED, returned %d", ret);
 
         ret = ecc_make_pub_key(curve_id, curve->g.ndigits, (u64 *)d_buf, pubkey);
-        if (ret < 0)
+        if (ret < 0) {
+		printk(KERN_ERR "ecc_make_pub_key FAILED, returned %d", ret);
                 return ret;
+	}
+	else
+		printk(KERN_INFO "ecc_make_pub_key PASSED, returned %d", ret);
 
         ret = copy_to_user(iov[0].iov_base, d_buf, iov[0].iov_len);
         if (ret) {
diff --git a/crypto/cipher.c b/crypto/cipher.c
index 395f0c2fb..45bb7a356 100644
--- a/crypto/cipher.c
+++ b/crypto/cipher.c
@@ -51,7 +51,12 @@ int crypto_cipher_setkey(struct crypto_cipher *tfm,
 	if ((unsigned long)key & alignmask)
 		return setkey_unaligned(tfm, key, keylen);
 
-	return cia->cia_setkey(crypto_cipher_tfm(tfm), key, keylen);
+	int err = cia->cia_setkey(crypto_cipher_tfm(tfm), key, keylen);
+	if(err)
+		printk(KERN_ERR "%ps FAILED, returned %d", cia->cia_setkey, err);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", cia->cia_setkey, err);
+	return err;
 }
 EXPORT_SYMBOL_NS_GPL(crypto_cipher_setkey, CRYPTO_INTERNAL);
 
diff --git a/crypto/kpp.c b/crypto/kpp.c
index 678e871ce..681284942 100644
--- a/crypto/kpp.c
+++ b/crypto/kpp.c
@@ -62,8 +62,14 @@ static int crypto_kpp_init_tfm(struct crypto_tfm *tfm)
 	if (alg->exit)
 		kpp->base.exit = crypto_kpp_exit_tfm;
 
-	if (alg->init)
-		return alg->init(kpp);
+	if (alg->init) {
+		int err = alg->init(kpp);
+		if(err)
+			printk(KERN_ERR "%ps FAILED, returned %d", alg->init, err);
+		else
+			printk(KERN_INFO "%ps PASSED, returned %d", alg->init, err);
+		return err;
+	}
 
 	return 0;
 }
diff --git a/crypto/rng.c b/crypto/rng.c
index 353026522..c2b1ae96f 100644
--- a/crypto/rng.c
+++ b/crypto/rng.c
@@ -70,6 +70,12 @@ int crypto_rng_reset(struct crypto_rng *tfm, const u8 *seed, unsigned int slen)
 
 	crypto_stats_get(alg);
 	err = crypto_rng_alg(tfm)->seed(tfm, seed, slen);
+
+	if(err)
+		printk(KERN_ERR "%ps FAILED, returned %d", crypto_rng_alg(tfm)->seed, err);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", crypto_rng_alg(tfm)->seed, err);
+
 	crypto_stats_rng_seed(alg, err);
 out:
 	kfree_sensitive(buf);
diff --git a/crypto/shash.c b/crypto/shash.c
index 4c88e63b3..61816aeca 100644
--- a/crypto/shash.c
+++ b/crypto/shash.c
@@ -78,6 +78,11 @@ int crypto_shash_setkey(struct crypto_shash *tfm, const u8 *key,
 	else
 		err = shash->setkey(tfm, key, keylen);
 
+	if(err)
+		printk(KERN_ERR "%ps FAILED, returned %d", shash->setkey, err);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", shash->setkey, err);
+
 	if (unlikely(err)) {
 		shash_set_needkey(tfm, shash);
 		return err;
@@ -128,7 +133,14 @@ int crypto_shash_update(struct shash_desc *desc, const u8 *data,
 	if ((unsigned long)data & alignmask)
 		return shash_update_unaligned(desc, data, len);
 
-	return shash->update(desc, data, len);
+	int err = shash->update(desc, data, len);
+	if(err)
+		printk(KERN_ERR "%ps FAILED, returned %d", shash->update, err);
+	else
+		if(strcmp(shash->base.cra_name, "crc32c")) {
+			printk(KERN_INFO "%ps PASSED, returned %d", shash->update, err);
+		}
+	return err;
 }
 EXPORT_SYMBOL_GPL(crypto_shash_update);
 
@@ -169,7 +181,12 @@ int crypto_shash_final(struct shash_desc *desc, u8 *out)
 	if ((unsigned long)out & alignmask)
 		return shash_final_unaligned(desc, out);
 
-	return shash->final(desc, out);
+	int err = shash->final(desc, out);
+        if(err)
+                printk(KERN_ERR "%ps FAILED, returned %d", shash->final, err);
+        else
+                printk(KERN_INFO "%ps PASSED, returned %d", shash->final, err);
+        return err;
 }
 EXPORT_SYMBOL_GPL(crypto_shash_final);
 
@@ -438,8 +455,10 @@ static int crypto_shash_init_tfm(struct crypto_tfm *tfm)
 		return 0;
 
 	err = alg->init_tfm(hash);
-	if (err)
+	if (err) {
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->init_tfm, err);
 		return err;
+	}
 
 	/* ->init_tfm() may have increased the descsize. */
 	if (WARN_ON_ONCE(hash->descsize > HASH_MAX_DESCSIZE)) {
@@ -447,6 +466,7 @@ static int crypto_shash_init_tfm(struct crypto_tfm *tfm)
 			alg->exit_tfm(hash);
 		return -EINVAL;
 	}
+	printk(KERN_INFO "%ps PASSED, returned %d", alg->init_tfm, err);
 
 	return 0;
 }
diff --git a/crypto/skcipher.c b/crypto/skcipher.c
index 418211180..fcf81c91e 100644
--- a/crypto/skcipher.c
+++ b/crypto/skcipher.c
@@ -606,6 +606,12 @@ int crypto_skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key,
 	else
 		err = cipher->setkey(tfm, key, keylen);
 
+	if(err)
+		printk(KERN_ERR "%ps FAILED, returned %d", cipher->setkey, err);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", cipher->setkey, err);
+
+
 	if (unlikely(err)) {
 		skcipher_set_needkey(tfm);
 		return err;
@@ -628,6 +634,14 @@ int crypto_skcipher_encrypt(struct skcipher_request *req)
 		ret = -ENOKEY;
 	else
 		ret = crypto_skcipher_alg(tfm)->encrypt(req);
+
+	if(!strstr(crypto_skcipher_alg(tfm)->base.cra_driver_name, "ecb-cipher_null")) {
+		if(ret)
+			printk(KERN_ERR "%ps FAILED, returned %d", crypto_skcipher_alg(tfm)->encrypt, ret);
+		else
+			printk(KERN_INFO "%ps PASSED, returned %d", crypto_skcipher_alg(tfm)->encrypt, ret);
+	}
+
 	crypto_stats_skcipher_encrypt(cryptlen, ret, alg);
 	return ret;
 }
@@ -645,6 +659,12 @@ int crypto_skcipher_decrypt(struct skcipher_request *req)
 		ret = -ENOKEY;
 	else
 		ret = crypto_skcipher_alg(tfm)->decrypt(req);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", crypto_skcipher_alg(tfm)->decrypt, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", crypto_skcipher_alg(tfm)->decrypt, ret);
+
 	crypto_stats_skcipher_decrypt(cryptlen, ret, alg);
 	return ret;
 }
@@ -668,8 +688,14 @@ static int crypto_skcipher_init_tfm(struct crypto_tfm *tfm)
 	if (alg->exit)
 		skcipher->base.exit = crypto_skcipher_exit_tfm;
 
-	if (alg->init)
-		return alg->init(skcipher);
+        if(alg->init) {
+                int err = alg->init(skcipher);
+                if(err)
+                        printk(KERN_ERR "%ps FAILED, returned %d", alg->init, err);
+                else
+                        printk(KERN_INFO "%ps PASSED, returned %d", alg->init, err);
+                return err;
+	}
 
 	return 0;
 }
diff --git a/include/crypto/akcipher.h b/include/crypto/akcipher.h
index 5764b46bd..0d4ab1759 100644
--- a/include/crypto/akcipher.h
+++ b/include/crypto/akcipher.h
@@ -342,6 +342,12 @@ static inline int crypto_akcipher_sign(struct akcipher_request *req)
 	crypto_stats_get(calg);
 	ret = alg->sign(req);
 	crypto_stats_akcipher_sign(ret, calg);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->sign, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", alg->sign, ret);
+
 	return ret;
 }
 
@@ -369,6 +375,12 @@ static inline int crypto_akcipher_verify(struct akcipher_request *req)
 	crypto_stats_get(calg);
 	ret = alg->verify(req);
 	crypto_stats_akcipher_verify(ret, calg);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->verify, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", alg->verify, ret);
+
 	return ret;
 }
 
@@ -391,7 +403,14 @@ static inline int crypto_akcipher_set_pub_key(struct crypto_akcipher *tfm,
 {
 	struct akcipher_alg *alg = crypto_akcipher_alg(tfm);
 
-	return alg->set_pub_key(tfm, key, keylen);
+	int ret = alg->set_pub_key(tfm, key, keylen);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->set_pub_key, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", alg->set_pub_key, ret);
+
+	return ret;
 }
 
 /**
@@ -413,6 +432,13 @@ static inline int crypto_akcipher_set_priv_key(struct crypto_akcipher *tfm,
 {
 	struct akcipher_alg *alg = crypto_akcipher_alg(tfm);
 
-	return alg->set_priv_key(tfm, key, keylen);
+	int ret = alg->set_priv_key(tfm, key, keylen);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->set_priv_key, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", alg->set_priv_key, ret);
+
+	return ret;
 }
 #endif
diff --git a/include/crypto/hash.h b/include/crypto/hash.h
index f5841992d..11384f8d7 100644
--- a/include/crypto/hash.h
+++ b/include/crypto/hash.h
@@ -556,6 +556,12 @@ static inline int crypto_ahash_update(struct ahash_request *req)
 	crypto_stats_get(alg);
 	ret = crypto_ahash_reqtfm(req)->update(req);
 	crypto_stats_ahash_update(nbytes, ret, alg);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", crypto_ahash_reqtfm(req)->update, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", crypto_ahash_reqtfm(req)->update, ret);
+
 	return ret;
 }
 
diff --git a/include/crypto/kpp.h b/include/crypto/kpp.h
index 24d01e987..a8b2bdeb7 100644
--- a/include/crypto/kpp.h
+++ b/include/crypto/kpp.h
@@ -292,6 +292,12 @@ static inline int crypto_kpp_set_secret(struct crypto_kpp *tfm,
 	crypto_stats_get(calg);
 	ret = alg->set_secret(tfm, buffer, len);
 	crypto_stats_kpp_set_secret(calg, ret);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->set_secret, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", alg->set_secret, ret);
+
 	return ret;
 }
 
@@ -318,6 +324,12 @@ static inline int crypto_kpp_generate_public_key(struct kpp_request *req)
 	crypto_stats_get(calg);
 	ret = alg->generate_public_key(req);
 	crypto_stats_kpp_generate_public_key(calg, ret);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->generate_public_key, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", alg->generate_public_key, ret);
+
 	return ret;
 }
 
@@ -341,6 +353,12 @@ static inline int crypto_kpp_compute_shared_secret(struct kpp_request *req)
 	crypto_stats_get(calg);
 	ret = alg->compute_shared_secret(req);
 	crypto_stats_kpp_compute_shared_secret(calg, ret);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", alg->compute_shared_secret, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", alg->compute_shared_secret, ret);
+
 	return ret;
 }
 
diff --git a/include/crypto/rng.h b/include/crypto/rng.h
index 17bb3673d..ced7d2494 100644
--- a/include/crypto/rng.h
+++ b/include/crypto/rng.h
@@ -143,6 +143,12 @@ static inline int crypto_rng_generate(struct crypto_rng *tfm,
 	crypto_stats_get(alg);
 	ret = crypto_rng_alg(tfm)->generate(tfm, src, slen, dst, dlen);
 	crypto_stats_rng_generate(alg, dlen, ret);
+
+	if(ret)
+		printk(KERN_ERR "%ps FAILED, returned %d", crypto_rng_alg(tfm)->generate, ret);
+	else
+		printk(KERN_INFO "%ps PASSED, returned %d", crypto_rng_alg(tfm)->generate, ret);
+
 	return ret;
 }
 
-- 
2.39.4

