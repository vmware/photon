From 613dcdc92be98afafca0b9aef9ffa39c30bcbb9f Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Fri, 31 Mar 2023 17:43:33 +0530
Subject: [PATCH 1/3] mkinitrd: verbose fix

Add a sanity check to verify initrd post creation.
If something is wrong with initrd, show an error on tty.

If running in non tty, show all logs.

mkinitrd logs will be captured at: `/var/log/mkinitrd-<kernel>.log`

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 mkinitrd-dracut.sh | 151 +++++++++++++++++++++++++++++++++------------
 1 file changed, 112 insertions(+), 39 deletions(-)

diff --git a/mkinitrd-dracut.sh b/mkinitrd-dracut.sh
index 4047233..deacb69 100755
--- a/mkinitrd-dracut.sh
+++ b/mkinitrd-dracut.sh
@@ -1,6 +1,6 @@
 #!/bin/bash --norc
-kver=$(uname -r)
-kernel_ver_dir='/var/lib/initramfs/kernel'
+
+kver="$(uname -r)"

 boot_dir="/boot"
 quiet=0
@@ -8,10 +8,12 @@ host_only=0
 force=0
 set_hostonly=0
 no_hostonly=0
+dracut_dbg=0

 error() { echo "$@" >&2; }

 usage () {
+    local cmd=""
     [[ $1 = '-n' ]] && cmd=echo || cmd=error

     $cmd "usage: ${0##*/} [--version] [--help] [-v] [-f] [--preload <module>]"
@@ -19,6 +21,7 @@ usage () {
     $cmd "       [--nocompress]"
     $cmd "       [--set-hostonly]"
     $cmd "       [--no-hostonly]"
+    $cmd "       [--debug]"
     $cmd "       <initrd-image> <kernel-version>"
     $cmd ""
     $cmd "       (ex: ${0##*/} /boot/initramfs-$kver.img $kver)"
@@ -34,7 +37,7 @@ read_arg() {
     # $1 = arg name
     # $2 = arg value
     # $3 = arg parameter
-    param="$1"
+    local param="$1"
     local rematch='^[^=]*=(.*)$' result
     if [[ $2 =~ $rematch ]]; then
         read "$param" <<< "${BASH_REMATCH[1]}"
@@ -56,14 +59,14 @@ read_arg() {
 # For photon
 default_kernel_images() {

-    local kernel_version
-
-    for kernel_version in $(ls $kernel_ver_dir) ; do
+    local kernel_version=""

-        # Take this directory as the source of truth
-	kernels="$kernels $kernel_version"
-        targets="$targets $boot_dir/initrd.img-$kernel_version"
-    done
+  for kernel_version in $(find /lib/modules -mindepth 1 -maxdepth 1 -type d); do
+    kernel_version="$(basename ${kernel_version})"
+    # Take this directory as the source of truth
+    kernels="$kernels $kernel_version"
+    targets="$targets $boot_dir/initrd.img-$kernel_version"
+  done
 }

 while (($# > 0)); do
@@ -88,6 +91,7 @@ while (($# > 0)); do
         --nocompress) dracut_args="$dracut_args --no-compress";;
         --set-hostonly) set_hostonly=1;;
         --no-hostonly) no_hostonly=1;;
+        --debug) dracut_dbg=1;;
         --help) usage -n;;
         --builtin) ;;
         --without*) ;;
@@ -145,7 +149,7 @@ while (($# > 0)); do
 done

 [[ $targets && $kernels ]] || default_kernel_images
-[[ $targets && $kernels ]] || (error "No Kernel Registered")
+[[ $targets && $kernels ]] || error "No Kernel Registered"

 # We can have several targets/kernels, transform the list to an array
 targets=( $targets )
@@ -179,36 +183,105 @@ fi
 [[ $host_only == 1 ]] && dracut_args="${dracut_args} -H"
 [[ $force == 1 ]]     && dracut_args="${dracut_args} -f"

-for ((i=0 ; $i<${#targets[@]} ; i++)); do
+initrd_sanity_check() {
+  local ret=0
+  local status="$1"
+  local log_fn="$2"
+  local target="$3"
+  local errmsg=""

-    if [[ $img_vers ]];then
-	target="${targets[$i]}-${kernels[$i]}"
-    else
-	target="${targets[$i]}"
-    fi
-    kernel="${kernels[$i]}"
+  # initrd issues can be fatal, so if anything goes wrong during initrd creation
+  # print errors to console
+  if [ ${status} -ne 0 ]; then
+    errmsg=$(cat << EOF
+\n\n------------------------ ERROR NOTICE ------------------------------
+          DRACUT RETURNED NON-ZERO EXIT STATUS(${status})

-    if [[ -s "$kernel_ver_dir/$kernel" ]]; then
-       readarray -t kernel_cfg < <(xargs -n1 -a $kernel_ver_dir/$kernel)
-    else
-        kernel_cfg=()
-    fi
+PROBABLY ${target} IS FAULTY
+SYSTEM MAY BECOME UNUSABLE POST REBOOT
+---------------------- PROCEED WITH CAUTION ------------------------
+EOF
+)
+    echo -e "${errmsg}" 1>&2 |& tee -a "${log_fn}"
+    ret=1
+  fi

-    # Duplicate code: No way found how to redirect output based on $quiet
-    if [[ $quiet == 1 ]];then
-	echo "Creating $target"
-	if [[ $basicmodules ]]; then
-		dracut $dracut_args --add-drivers "$basicmodules" "${kernel_cfg[@]}" "$target" \
-		"$kernel" &>/dev/null
-	else
-            dracut $dracut_args "${kernel_cfg[@]}" "$target" "$kernel" &>/dev/null
-	fi
-    else
-	if [[ $basicmodules ]]; then
-            dracut $dracut_args --add-drivers "$basicmodules" "${kernel_cfg[@]}" "$target" \
-		"$kernel"
-	else
-            dracut $dracut_args "${kernel_cfg[@]}" "$target" "$kernel"
-	fi
+  if ! lsinitrd ${target} 1>/dev/null; then
+    errmsg=$(cat << EOF
+\n\n------------------------ ERROR NOTICE ------------------------------
+                  lsinitrd ${target} FAILED
+
+PROBABLY ${target} IS FAULTY
+SYSTEM MAY BECOME UNUSABLE POST REBOOT
+---------------------- PROCEED WITH CAUTION -----------------------\n\n
+EOF
+)
+    echo -e "${errmsg}" 1>&2 |& tee -a "${log_fn}"
+    ret=1
+  fi
+
+  return ${ret}
+}
+
+# If running in non tty, enable verbose
+# It's probably happening in some kind of build env, we need verbose.
+if ! test -t 1; then
+  quiet=0
+fi
+
+final_ret=0
+
+for ((i = 0; i < ${#targets[@]}; i++)); do
+  ret=0
+  if [[ $img_vers ]];then
+    target="${targets[$i]}-${kernels[$i]}"
+  else
+    target="${targets[$i]}"
+  fi
+  kernel="${kernels[$i]}"
+
+  log_fn="/var/log/mkinitrd-${kernel}.log"
+
+  echo "Creating $target"
+
+  if [ $dracut_dbg -ne 0 ]; then
+    export DRACUT_INSTALL="/usr/lib/dracut/dracut-install --verbose"
+    dracut_cmd=(dracut -L 6 $dracut_args)
+  else
+    dracut_cmd=(dracut $dracut_args)
+  fi
+
+  # this check is for combination of newer and older kernels
+  if [ -d "/lib/modules/${kernel}/dracut.conf.d" ]; then
+    dracut_cmd+=("--confdir \"/lib/modules/${kernel}/dracut.conf.d /etc/dracut.conf.d\"")
+  elif [ -d "/var/lib/initramfs/kernel" ]; then
+    kernel_ver_dir="/var/lib/initramfs/kernel"
+    if [ -s "$kernel_ver_dir/$kernel" ]; then
+      dracut_cmd+=("$(cat $kernel_ver_dir/$kernel)")
     fi
+    unset kernel_ver_dir
+  else
+    error "ERROR: either /lib/modules/${kernel}/dracut.conf.d and /var/lib/initramfs/kernel not present"
+    exit 1
+  fi
+
+  if [[ $basicmodules ]]; then
+    dracut_cmd+=("--add-drivers \"$basicmodules\"")
+  fi
+  dracut_cmd+=("\"$target\" \"$kernel\"")
+
+  if [ ${quiet} -eq 1 ]; then
+    eval "${dracut_cmd[@]}" &> "${log_fn}"
+  else
+    eval "${dracut_cmd[@]}" |& tee "${log_fn}"
+  fi
+
+  ret=${PIPESTATUS[0]}
+  if ! initrd_sanity_check "${ret}" "${log_fn}" "${target}"; then
+    final_ret=1
+  fi
 done
+
+[ $final_ret -ne 0 ] && error "--- ERROR: mkinitrd FAILED, SOMETHING WENT WRONG ---"
+
+exit ${final_ret}
--
2.25.1
